{"version":3,"file":"static/webpack/static/development/pages/_app.js.530d07866a97ea665331.hot-update.js","sources":["webpack:///./src/components/SearchBar.js"],"sourcesContent":["import _ from 'lodash';\nimport React, { Component } from 'react';\nimport { Search, Label } from 'semantic-ui-react';\n\nconst resultRenderer = ({ uid, username }) => <Label key={uid} content={username} />;\n\nexport default class SearchBar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: '',\n            isLoading: false\n        };\n    }\n\n    componentWillMount() {\n        this.resetComponent();\n    }\n\n    resetComponent = () => this.setState({ isLoading: false, value: '' });\n\n    handleResultSelect = async (e, { result }) => {\n        const { checkDuplicateSelect } = this.props;\n        this.setState({ value: result.username, isLoading: true });\n        await this.props.handleResultSelect(result.username, this.resetComponent);\n    };\n\n    handleSearchChange = (e, { value }) => {\n        this.setState({ isLoading: true, value }, () => {\n            // reset loading if empty\n            if (this.state.value.length < 1) return this.resetComponent();\n\n            // fetch users by username\n            this.props.fetchByUsername(this.state.value, () => {\n                this.setState({ isLoading: false });\n                // prefetch first result\n                const { results } = this.props;\n                if (results.length) {\n                    const firstResult = results[0].username;\n                    if (this.props.prefetchRoute) this.props.prefetchRoute(firstResult);\n                }\n            });\n        });\n    };\n\n    render() {\n        const { isLoading, value } = this.state;\n        const { results } = this.props;\n        return (\n            <Search\n                input={{ fluid: true, icon: 'arrow circle right' }}\n                loading={isLoading}\n                placeholder={'Enter your Epic username'}\n                onResultSelect={this.handleResultSelect}\n                onSearchChange={_.debounce(this.handleSearchChange, 500, {\n                    leading: true\n                })}\n                results={results}\n                resultRenderer={resultRenderer}\n                value={value}\n                showNoResults={false}\n            />\n        );\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAaA;AAAA;AAAA;AAAA;AAAA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAhBA;AAAA;AAAA;AAAA;AACA;AADA;AAqBA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAHA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnCA;AACA;AACA;AAFA;AAHA;AAOA;AACA;;;AACA;AACA;AACA;;;AA4BA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAXA;AAcA;;;;AA1DA;AACA;;;;;A","sourceRoot":""}
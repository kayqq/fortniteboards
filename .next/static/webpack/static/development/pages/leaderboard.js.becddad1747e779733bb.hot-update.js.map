{"version":3,"file":"static/webpack/static/development/pages/leaderboard.js.becddad1747e779733bb.hot-update.js","sources":["webpack:///./src/components/board/index.js"],"sourcesContent":["import React, { Component } from 'react';\n\nimport { Grid } from 'semantic-ui-react';\nimport ModeHeader from './ModeHeader';\nimport StatsHeader from './StatsHeader';\nimport Player from './Player';\n\nexport default class Board extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { mode: 'solo' };\n    }\n\n    handleModeChange = direction => {\n        const { mode } = this.state;\n        let nextMode = '';\n        switch (mode) {\n            case 'solo':\n                nextMode = direction === 'forward' ? 'duo' : 'squad';\n                break;\n            case 'duo':\n                nextMode = direction === 'forward' ? 'squad' : 'solo';\n                break;\n            case 'squad':\n                nextMode = direction === 'forward' ? 'solo' : 'duo';\n                break;\n            default:\n                break;\n        }\n        this.setState({ mode: nextMode });\n    };\n\n    render() {\n        const { players } = this.props;\n        const { mode } = this.state;\n        const columns = [\n            { header: 'Player', accessor: 'username', size: '6' },\n            { header: 'K/D', accessor: 'kd', size: '2' },\n            { header: 'Win %', accessor: 'winrate', size: '2' },\n            { header: 'Kills', accessor: 'kills', size: '2' },\n            { header: 'Wins', accessor: 'placetop1', size: '3' }\n            // { header: 'Matches', accessor: 'matchesplayed', size: '3' }\n        ];\n        return (\n            <Grid style={{ backgroundColor: '#2c3c57', color: 'white' }}>\n                {/* Render Mode Header / Selector */}\n                <ModeHeader mode={mode} handleModeChange={this.handleModeChange} />\n\n                {/* Render Column Header */}\n                <StatsHeader columns={columns} />\n\n                {/* Render Player stats */}\n                {players.map((player, index) => (\n                    <Player columns={columns} player={player} key={index} mode={mode} />\n                ))}\n            </Grid>\n        );\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAMA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAXA;AACA;AAYA;AAAA;AAAA;AACA;AACA;AArBA;AAAA;AAAA;AAHA;AAIA;AACA;;;AAoBA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAGA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;;;;AAnDA;AACA;;;;;A","sourceRoot":""}
{"version":3,"file":"static/webpack/static/development/pages/leaderboard.js.c4c10ae86eccf4fb7abd.hot-update.js","sources":["webpack:///./src/components/Board/Player.js"],"sourcesContent":["import React from 'react';\nimport Link from 'next/link';\n// import { Link } from '../../../routes';\nimport { Grid, Header, Icon, Responsive } from 'semantic-ui-react';\n\nconst StatsColumn = ({ index, content = null, matches = null }) => {\n    return (\n        <Grid.Column\n            className={index == 0 ? '' : 'compact'}\n            textAlign={index == 0 ? 'left' : 'center'}\n            mobile={index == 0 ? '6' : '2'}\n        >\n            <Header as={index == 0 ? 'h4' : 'h4'} style={{ color: 'white' }}>\n                {content == null ? 'XXXX' : content}\n                {index == 0 ? (\n                    <Header.Subheader\n                        size=\"small\"\n                        style={{ color: '#92a2bd', whiteSpace: 'nowrap' }}\n                    >\n                        {matches == null ? '0000' : matches} Matches\n                    </Header.Subheader>\n                ) : null}\n            </Header>\n        </Grid.Column>\n    );\n};\n\nconst TrashColumn = ({ index, removePlayer }) => {\n    return (\n        <Grid.Column\n            textAlign=\"center\"\n            mobile=\"1\"\n            onClick={() => {\n                removePlayer(index);\n            }}\n        >\n            <Icon size=\"small\" color=\"red\" name=\"trash alternate outline\" />\n        </Grid.Column>\n    );\n};\n\nconst Player = ({ columns, mode, player, boardIndex, removePlayer }) => {\n    return (\n        <Grid.Row stretched style={{ backgroundColor: '#2c3c57', marginBottom: '8px' }}>\n            <Responsive\n                as={Grid.Column}\n                minWidth={Responsive.onlyMobile.maxWidth}\n                textAlign=\"center\"\n                mobile=\"1\"\n            >\n                <Header as=\"h4\" style={{ color: '#92a2bd' }}>\n                    {boardIndex + 1}\n                </Header>\n            </Responsive>\n            {columns.map((column, columnIndex) => {\n                if (!player) {\n                    return <StatsColumn key={columnIndex} index={columnIndex} />;\n                }\n                const columnContent =\n                    columnIndex === 0 ? (\n                        <Link href={`/profile/${player.username}`}>\n                            <a>{player.username}</a>\n                        </Link>\n                    ) : (\n                        player.stats[`${column.accessor}_${mode}`]\n                    );\n                const matches = player.stats[`matchesplayed_${mode}`];\n                return (\n                    <StatsColumn\n                        key={columnIndex}\n                        index={columnIndex}\n                        content={columnContent}\n                        matches={matches}\n                    />\n                );\n            })}\n            <TrashColumn index={boardIndex} removePlayer={removePlayer} />\n        </Grid.Row>\n    );\n};\n\nexport default Player;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AAAA;AAGA;AACA;AACA;;;;A","sourceRoot":""}
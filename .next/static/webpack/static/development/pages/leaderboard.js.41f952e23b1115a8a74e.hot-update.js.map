{"version":3,"file":"static/webpack/static/development/pages/leaderboard.js.41f952e23b1115a8a74e.hot-update.js","sources":["webpack:///./pages/leaderboard.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\n\nimport { Container, Grid } from 'semantic-ui-react';\nimport SearchBar from '../src/components/SearchBar';\nimport { fetchByUsername, getProfile } from '../src/actions';\n\nimport Board from '../src/components/board';\n\n// show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n\nclass Leaderboard extends Component {\n    static async getInitialProps({ store, query, pathname, asPath, req }) {\n        const { usernames, entries } = query;\n        // spread into array for mapping\n        let players = [];\n\n        if (!usernames) return { players };\n\n        if (entries <= 1) {\n            players = await getProfile(usernames);\n        } else {\n            players = await Promise.all(usernames.map(username => getProfile(username)));\n        }\n\n        /// ====== ADD ERROR HANDLING INCASE INCORRECT URL / PARAMS / QUERY / ETC =====\n        // // Error Handl\n        // const profile = (await getProfile(query.username)) || {};\n        // if (!profile.uid) {\n        //     const err = new Error();\n        //     err.code = 'ENOENT';\n        //     throw err;\n        // }\n        // return { profile };\n        return { players, entries };\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = { players: [], mode: 'solo' };\n    }\n\n    componentDidMount() {\n        if (this.props.entries <= 1) {\n            this.setState({\n                players: [...this.state.players, this.props.players],\n                entries: this.props.entries\n            });\n        } else {\n            this.setState({\n                players: [...this.state.players, ...this.props.players],\n                entries: this.props.entries\n            });\n        }\n    }\n\n    addPlayer = async (username, resetSearchFn) => {\n        const { players } = this.state;\n        const { router } = this.props;\n\n        // Reset component if username is already in table\n        if (isPlayerSelected(username, players)) return resetSearchFn();\n\n        // Get profile of username and add to table\n        const newPlayer = await getProfile(username);\n        this.setState({ players: [...players, newPlayer] }, () => {\n            // build list of player usernames currently viewing\n            const usernames = [...this.state.players.map(player => player.username)];\n            // append list to query params (shallow)\n            router.push({\n                pathname: '/leaderboard',\n                query: { usernames: usernames, entries: usernames.length },\n                options: { shallow: true }\n            });\n\n            // reset search bar\n            resetSearchFn();\n        });\n\n        // Helper function\n        // Check if duplicate username selection - Boolean\n        function isPlayerSelected(username, players) {\n            players.find(player => player.username === username);\n        }\n    };\n\n    removePlayer = index => {\n        const { players } = this.state;\n        const destPlayers = this.state.players;\n        destPlayers.splice(index, 1);\n        console.log('STATE', this.state.players);\n        console.log('DESTRUCTURED', players);\n    };\n\n    render() {\n        // console.log(this.props.profiles);\n        const { searchResults, fetchByUsername } = this.props;\n\n        const debouncedfetchByUsername = _.debounce(fetchByUsername, 500, {\n            maxWait: 1000\n        });\n\n        return (\n            <div>\n                <Container\n                    text\n                    textAlign=\"center\"\n                    style={{\n                        paddingTop: '200px',\n                        paddingBottom: '100px',\n                        height: '100%'\n                    }}\n                >\n                    <h1>Leaderboard</h1>\n                    <Grid columns=\"1\" centered textAlign=\"center\">\n                        <Grid.Column\n                            mobile=\"16\"\n                            computer=\"6\"\n                            largeScreen=\"6\"\n                            tablet=\"6\"\n                            widescreen=\"6\"\n                        >\n                            <Container>\n                                <SearchBar\n                                    handleResultSelect={this.addPlayer}\n                                    fetchByUsername={debouncedfetchByUsername}\n                                    results={searchResults}\n                                />\n                            </Container>\n                        </Grid.Column>\n                        <Grid.Column textAlign=\"center\">\n                            <Board players={this.state.players} removePlayer={this.removePlayer} />\n                        </Grid.Column>\n                    </Grid>\n                </Container>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        searchResults: state.search.searchResults\n    };\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators({ fetchByUsername }, dispatch);\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Leaderboard);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAAA;AAAA;AAAA;AACA;;AACA;;;;;;AACA;AACA;;AADA;;;;;;AAEA;AAAA;AAAA;AACA;;AADA;AACA;;AAWA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAyBA;AACA;AAAA;AAAA;AACA;AACA;AA3BA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAQA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AACA;AAMA;AACA;AAGA;AACA;AACA;AA1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AApBA;AAAA;AAAA;AAAA;AACA;AADA;AAiDA;AAEA;AACA;AACA;AACA;AACA;AACA;AAtDA;AAAA;AAAA;AAAA;AAFA;AAGA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;AAwCA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AADA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AAHA;AAOA;AAAA;AACA;AAAA;AAAA;AAMA;;;;AA9HA;AACA;AAgIA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;A","sourceRoot":""}
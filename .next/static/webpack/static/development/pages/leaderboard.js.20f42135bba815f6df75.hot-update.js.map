{"version":3,"file":"static/webpack/static/development/pages/leaderboard.js.20f42135bba815f6df75.hot-update.js","sources":["webpack:///./pages/leaderboard.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport _ from \"lodash\";\n\nimport SearchBar from \"../src/components/SearchBar\";\nimport { fetchByUsername, getProfile } from \"../src/actions\";\nimport {\n  Container,\n  Grid,\n  Segment,\n  Icon,\n  Header,\n  Label,\n  Menu,\n  Table,\n  GridRow\n} from \"semantic-ui-react\";\n\n// show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n\nconst Board = ({ players, mode, handleModeChange }) => {\n  // const columns = { \"K/D\": \"kd\", Wins: \"placetop1\" };\n  // console.log(Object.entries(columns));\n  // Make columns map to make rendering the columns dynamic instead of static written jsx\n  let backgroundColor = \"\";\n  let title = \"\";\n  switch (mode) {\n    case \"solo\":\n      backgroundColor = \"#14c8ff\";\n      title = \"Solo\";\n      break;\n    case \"duo\":\n      backgroundColor = \"#f3af19\";\n      title = \"Duo\";\n      break;\n    case \"squad\":\n      backgroundColor = \"#9d4dbb\";\n      title = \"Squad\";\n      break;\n    default:\n      break;\n  }\n  return (\n    <Grid style={{ backgroundColor: \"#2c3c57\", color: \"white\" }}>\n      <Grid.Row\n        textAlign=\"center\"\n        verticalAlign=\"middle\"\n        columns=\"3\"\n        style={{ backgroundColor: backgroundColor }}\n      >\n        <Grid.Column\n          as={Icon}\n          floated=\"left\"\n          textAlign=\"left\"\n          name=\"angle left\"\n          onClick={() => handleModeChange()}\n        />\n        <Grid.Column as=\"span\" width=\"3\" textAlign=\"center\">\n          {title}\n        </Grid.Column>\n        <Grid.Column\n          as={Icon}\n          floated=\"right\"\n          textAlign=\"right\"\n          name=\"angle right\"\n          onClick={() => handleModeChange()}\n        />\n      </Grid.Row>\n\n      {players.map(player => (\n        <Grid.Row columns=\"5\" stretched>\n          <Grid.Column textAlign=\"center\" verticalAlign=\"middle\">\n            <Header size=\"medium\" style={{ color: \"white\" }}>\n              {player.stats[`kd_${mode}`]}\n              <Header.Subheader style={{ color: \"#92a2bd\" }}>\n                K/D\n              </Header.Subheader>\n            </Header>\n          </Grid.Column>\n          <Grid.Column textAlign=\"center\" verticalAlign=\"middle\">\n            <Header size=\"medium\" style={{ color: \"white\" }}>\n              {player.stats[`placetop1_${mode}`]}\n              <Header.Subheader style={{ color: \"#92a2bd\" }}>\n                Wins\n              </Header.Subheader>\n            </Header>\n          </Grid.Column>\n          <Grid.Column textAlign=\"center\" verticalAlign=\"middle\">\n            <Header size=\"medium\" style={{ color: \"white\" }}>\n              {player.stats[`kills_${mode}`]}\n              <Header.Subheader style={{ color: \"#92a2bd\" }}>\n                Kills\n              </Header.Subheader>\n            </Header>\n          </Grid.Column>\n          <Grid.Column textAlign=\"center\" verticalAlign=\"middle\">\n            <Header size=\"medium\" style={{ color: \"white\" }}>\n              {player.stats[`winrate_${mode}`]}\n              <Header.Subheader style={{ color: \"#92a2bd\" }}>\n                Win %\n              </Header.Subheader>\n            </Header>\n          </Grid.Column>\n          <Grid.Column textAlign=\"center\" verticalAlign=\"middle\">\n            <Header size=\"medium\" style={{ color: \"white\" }}>\n              {player.stats[`matchesplayed_${mode}`]}\n              <Header.Subheader style={{ color: \"#92a2bd\" }}>\n                Matches\n              </Header.Subheader>\n            </Header>\n          </Grid.Column>\n        </Grid.Row>\n      ))}\n    </Grid>\n  );\n};\n\nclass Leaderboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { players: [], mode: \"solo\" };\n  }\n\n  handleModeChange = () => {\n    const { mode } = this.state;\n    let nextMode = \"\";\n    switch (mode) {\n      case \"solo\":\n        nextMode = \"duo\";\n        break;\n      case \"duo\":\n        nextMode = \"squad\";\n        break;\n      case \"squad\":\n        nextMode = \"solo\";\n        break;\n      default:\n        break;\n    }\n    this.setState({ mode: nextMode });\n  };\n\n  isPlayerSelected = (username, players) =>\n    players.find(player => player.username === username);\n\n  handleResultSelect = async (username, resetSearchFn) => {\n    const { players } = this.state;\n\n    // Reset component if username is already in table\n    if (this.isPlayerSelected(username, players)) return resetSearchFn();\n\n    // Get profile of username and add to table\n    const newPlayer = await getProfile(username);\n    this.setState({ players: [...players, newPlayer] }, () => resetSearchFn());\n    console.log(this.state.players);\n  };\n\n  render() {\n    const { searchResults, fetchByUsername } = this.props;\n\n    const debouncedfetchByUsername = _.debounce(fetchByUsername, 500, {\n      maxWait: 1000\n    });\n\n    return (\n      <div>\n        <Container\n          text\n          textAlign=\"center\"\n          style={{\n            paddingTop: \"200px\",\n            paddingBottom: \"100px\",\n            height: \"100%\"\n          }}\n        >\n          <h1>Leaderboard</h1>\n          <Grid columns=\"1\" centered textAlign=\"center\">\n            <Grid.Column\n              mobile=\"16\"\n              computer=\"6\"\n              largeScreen=\"6\"\n              tablet=\"6\"\n              widescreen=\"6\"\n            >\n              <Container>\n                <SearchBar\n                  handleResultSelect={this.handleResultSelect}\n                  fetchByUsername={debouncedfetchByUsername}\n                  results={searchResults}\n                />\n              </Container>\n            </Grid.Column>\n            <Grid.Column textAlign=\"center\">\n              <Board\n                handleModeChange={this.handleModeChange}\n                players={this.state.players}\n                mode={this.state.mode}\n              />\n            </Grid.Column>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchResults: state.search.searchResults\n  };\n};\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators({ fetchByUsername }, dispatch);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Leaderboard);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAaA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAdA;AACA;AAeA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAOA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AASA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AArCA;AA8CA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAMA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAXA;AACA;AAYA;AAAA;AAAA;AACA;AACA;AAxBA;AAyBA;AACA;AAAA;AADA;AACA;AA1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA7BA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAHA;AAIA;AACA;;;AAmCA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AADA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AAHA;AAOA;AAAA;AAEA;AACA;AACA;AAHA;AAUA;;;;AAvFA;AACA;AAyFA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AADA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}
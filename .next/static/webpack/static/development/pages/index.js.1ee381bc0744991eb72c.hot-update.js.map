{"version":3,"file":"static/webpack/static/development/pages/index.js.1ee381bc0744991eb72c.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { connect } from 'react-redux';\r\nimport _ from 'lodash';\r\nimport { Container, Grid, Card } from 'semantic-ui-react';\r\nimport SearchBar from '../src/components/SearchBar';\r\nimport NewsCard from '../src/components/NewsCard';\r\n\r\nimport { getNews, getUsernames } from '../src/actions';\r\n\r\nclass Index extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            results: [],\r\n            news: []\r\n        };\r\n    }\r\n    async componentDidMount() {\r\n        const data = await getNews();\r\n        this.setState({ news: data.entries.slice(0, 3) });\r\n    }\r\n\r\n    handleResultSelect = username => {\r\n        this.props.router.push(`/profile/${username}`);\r\n    };\r\n\r\n    prefetchRoute = username => {\r\n        this.props.router.prefetch(`/profile/${username}`);\r\n    };\r\n\r\n    handleUsernameSearch = async (username, callback) => {\r\n        const usernames = await getUsernames(username);\r\n        const formattedResults = usernames.map((result, index) => {\r\n            result.key = index;\r\n            result.title = result.username;\r\n            return result;\r\n        });\r\n        callback();\r\n        this.setState({ results: formattedResults });\r\n    };\r\n\r\n    render() {\r\n        const { results } = this.state;\r\n\r\n        // debounced fetch\r\n        const debouncedfetchByUsername = _.debounce(this.handleUsernameSearch, 500, {\r\n            maxWait: 1000\r\n        });\r\n\r\n        return (\r\n            <Container\r\n                textAlign=\"center\"\r\n                style={{\r\n                    paddingTop: '100px',\r\n                    paddingBottom: '100px',\r\n                    height: '100%'\r\n                }}\r\n            >\r\n                <Grid centered textAlign=\"center\">\r\n                    <Grid.Row>\r\n                        <h3>Fortnite Boards</h3>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <h4>\r\n                            Welcome to Fortnite Boards! Search player stats by battle tag or build\r\n                            your own Leaderboard and share to your friends!\r\n                        </h4>\r\n                    </Grid.Row>\r\n                    <Grid.Row style={{ backgroundColor: 'grey' }}>\r\n                        <Grid.Column\r\n                            mobile=\"16\"\r\n                            computer=\"6\"\r\n                            largeScreen=\"6\"\r\n                            tablet=\"6\"\r\n                            widescreen=\"6\"\r\n                        >\r\n                            <SearchBar\r\n                                handleResultSelect={this.handleResultSelect}\r\n                                prefetchRoute={this.prefetchRoute}\r\n                                fetchByUsername={debouncedfetchByUsername}\r\n                                results={results}\r\n                            />\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n\r\n                    <Grid.Row style={{ backgroundColor: 'green' }}>\r\n                        <h3>News</h3>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Card.Group stackable itemsPerRow={3}>\r\n                                {this.state.news.map(article => (\r\n                                    <NewsCard\r\n                                        key={article.title}\r\n                                        imagesrc={article.image}\r\n                                        title={article.title}\r\n                                        description={article.body}\r\n                                        date={article.time}\r\n                                    />\r\n                                ))}\r\n                            </Card.Group>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({ fetchByUsername }, dispatch);\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Index);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAcA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAtBA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAFA;AAHA;AAOA;AACA;;;;;;;;;;;;;AACA;AACA;;AADA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AAqBA;AAAA;AACA;AAGA;AACA;AADA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AAJA;AASA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AADA;AAeA;;;;AAlGA;AACA;AAoGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;A","sourceRoot":""}
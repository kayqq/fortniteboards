{"version":3,"file":"static/webpack/static/development/pages/leaderboard.js.f6c917134b628a563030.hot-update.js","sources":["webpack:///./pages/leaderboard.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport _ from \"lodash\";\n\nimport SearchBar from \"../src/components/SearchBar\";\nimport { fetchByUsername, getProfile } from \"../src/actions\";\nimport {\n  Container,\n  Grid,\n  Segment,\n  Icon,\n  Header,\n  Label,\n  Menu,\n  Table,\n  GridRow\n} from \"semantic-ui-react\";\n\n// show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n\nconst Board = ({ players, mode }) => {\n  // const columns = { \"K/D\": \"kd\", Wins: \"placetop1\" };\n  // console.log(Object.entries(columns));\n  // Make columns map to make rendering the columns dynamic instead of static written jsx\n  let backgroundColor = \"\";\n  let title = \"\";\n  switch (mode) {\n    case \"solo\":\n      backgroundColor = \"#14c8ff\";\n      title = \"Solo\";\n      break;\n    case \"duo\":\n      backgroundColor = \"#f3af19\";\n      title = \"Duo\";\n      break;\n    case \"squad\":\n      backgroundColor = \"#9d4dbb\";\n      title = \"Squad\";\n      break;\n    default:\n      break;\n  }\n  return (\n    <Grid style={{ backgroundColor: \"#2c3c57\", color: \"white\" }}>\n      <Grid.Row style={{ backgroundColor: backgroundColor }}>\n        <Grid.Column>{title}</Grid.Column>\n      </Grid.Row>\n\n      {players.map(player => (\n        <Grid.Row columns=\"5\" stretched>\n          <Grid.Column textAlign=\"center\" verticalAlign=\"middle\">\n            <Header size=\"medium\" style={{ color: \"white\" }}>\n              {player.stats[`kd_${mode}`]}\n              <Header.Subheader style={{ color: \"#92a2bd\" }}>\n                K/D\n              </Header.Subheader>\n            </Header>\n          </Grid.Column>\n          <Grid.Column textAlign=\"center\" verticalAlign=\"middle\">\n            <Header size=\"medium\" style={{ color: \"white\" }}>\n              {player.stats[`placetop1_${mode}`]}\n              <Header.Subheader style={{ color: \"#92a2bd\" }}>\n                Wins\n              </Header.Subheader>\n            </Header>\n          </Grid.Column>\n          <Grid.Column textAlign=\"center\" verticalAlign=\"middle\">\n            <Header size=\"medium\" style={{ color: \"white\" }}>\n              {player.stats[`kills_${mode}`]}\n              <Header.Subheader style={{ color: \"#92a2bd\" }}>\n                Kills\n              </Header.Subheader>\n            </Header>\n          </Grid.Column>\n          <Grid.Column textAlign=\"center\" verticalAlign=\"middle\">\n            <Header size=\"medium\" style={{ color: \"white\" }}>\n              {player.stats[`winrate_${mode}`]}\n              <Header.Subheader style={{ color: \"#92a2bd\" }}>\n                Win %\n              </Header.Subheader>\n            </Header>\n          </Grid.Column>\n          <Grid.Column textAlign=\"center\" verticalAlign=\"middle\">\n            <Header size=\"medium\" style={{ color: \"white\" }}>\n              {player.stats[`matchesplayed_${mode}`]}\n              <Header.Subheader style={{ color: \"#92a2bd\" }}>\n                Matches\n              </Header.Subheader>\n            </Header>\n          </Grid.Column>\n        </Grid.Row>\n      ))}\n    </Grid>\n  );\n};\n\nclass Leaderboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { players: [], mode: \"solo\" };\n  }\n\n  handleResultSelect = async (username, callback) => {\n    const { players } = this.state;\n    const newPlayer = await getProfile(username);\n    this.setState({ players: [...players, newPlayer] }, () => callback());\n  };\n\n  prefetchRoute = username => {\n    this.props.router.prefetch(`/profile/${username}`);\n  };\n\n  render() {\n    const { searchResults, fetchByUsername } = this.props;\n\n    const debouncedfetchByUsername = _.debounce(fetchByUsername, 500, {\n      maxWait: 1000\n    });\n\n    return (\n      <React.Fragment>\n        <Container\n          textAlign=\"center\"\n          style={{\n            paddingTop: \"200px\",\n            paddingBottom: \"100px\",\n            height: \"100%\"\n          }}\n        >\n          <h1>Leaderboard</h1>\n          <Grid columns=\"1\" centered textAlign=\"center\">\n            <Grid.Column\n              mobile=\"16\"\n              computer=\"6\"\n              largeScreen=\"6\"\n              tablet=\"6\"\n              widescreen=\"6\"\n            >\n              <Container>\n                <SearchBar\n                  handleResultSelect={this.handleResultSelect}\n                  prefetchRoute={this.prefetchRoute}\n                  fetchByUsername={debouncedfetchByUsername}\n                  results={searchResults}\n                />\n              </Container>\n            </Grid.Column>\n            <Grid.Column textAlign=\"center\">\n              <Container\n                text\n                style={{\n                  marginTop: \"1em\",\n                  backgroundColor: \"#2c3c57\"\n                }}\n              >\n                {/* ******************* */}\n                <Board players={this.state.players} mode={this.state.mode} />\n                {/* ********************* */}\n              </Container>\n            </Grid.Column>\n          </Grid>\n        </Container>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchResults: state.search.searchResults\n  };\n};\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators({ fetchByUsername }, dispatch);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Leaderboard);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAaA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAdA;AACA;AAeA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AArCA;AA8CA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AADA;AAaA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAHA;AAIA;AACA;;;AAWA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AADA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAHA;AAFA;AASA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AAJA;AAQA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AAAA;AAAA;AAQA;;;;AArEA;AACA;AAuEA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AADA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}
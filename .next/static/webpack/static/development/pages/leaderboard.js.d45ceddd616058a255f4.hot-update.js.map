{"version":3,"file":"static/webpack/static/development/pages/leaderboard.js.d45ceddd616058a255f4.hot-update.js","sources":["webpack:///./pages/leaderboard.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\n\nimport { Container, Grid, Icon } from 'semantic-ui-react';\nimport SearchBar from '../src/components/SearchBar';\nimport { fetchByUsername, getProfile } from '../src/actions';\n\nimport Board from '../src/components/board';\n\n// show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n\nclass Leaderboard extends Component {\n    static async getInitialProps({ store, query, pathname, asPath, req }) {\n        const { usernames, entries } = query;\n        let initialPlayers = [];\n\n        if (!usernames) return { initialPlayers };\n\n        if (entries <= 1) {\n            initialPlayers = await getProfile(usernames);\n        } else {\n            initialPlayers = await Promise.all(usernames.map(username => getProfile(username)));\n        }\n        return { initialPlayers, entries };\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: [],\n            mode: 'solo',\n            columns: [],\n            column: null,\n            direction: null\n        };\n    }\n\n    componentDidMount() {\n        const { initialPlayers, entries } = this.props;\n        const { players } = this.state;\n        this.setState({\n            columns: [\n                {\n                    header: 'Player',\n                    accessor: 'username',\n                    sort: this.handleSort('username')\n                },\n                {\n                    header: 'K/D',\n                    accessor: 'kd',\n                    sort: this.handleSort('kd')\n                },\n                {\n                    header: 'Win %',\n                    accessor: 'winrate',\n                    sort: this.handleSort('winrate')\n                },\n                {\n                    header: 'Kills',\n                    accessor: 'kills',\n\n                    sort: this.handleSort('kills')\n                },\n                {\n                    header: 'Wins',\n                    accessor: 'placetop1',\n                    sort: this.handleSort('placetop1')\n                }\n            ],\n            players: entries <= 1 ? [...players, initialPlayers] : [...players, ...initialPlayers],\n            entries: entries\n        });\n    }\n\n    addPlayer = async username => {\n        const { players, column, mode, direction } = this.state;\n        const newPlayer = await getProfile(username);\n        let updatedPlayers = [...players, newPlayer];\n\n        // if sorted then sort with added player\n        if (column !== null) {\n            updatedPlayers = this.sortPlayers(updatedPlayers, column, mode, direction);\n        }\n\n        this.setState({ players: updatedPlayers }, () => this.updateURL());\n    };\n\n    removePlayer = index => {\n        const { players } = this.state;\n        const updatedPlayers = players.filter((player, i) => i !== index);\n        this.setState({ players: updatedPlayers }, () => this.updateURL());\n    };\n\n    changeMode = direction => {\n        const { mode } = this.state;\n        let nextMode = '';\n        switch (mode) {\n            case 'solo':\n                nextMode = direction === 'forward' ? 'duo' : 'squad';\n                break;\n            case 'duo':\n                nextMode = direction === 'forward' ? 'squad' : 'solo';\n                break;\n            case 'squad':\n                nextMode = direction === 'forward' ? 'solo' : 'duo';\n                break;\n            default:\n                break;\n        }\n        this.setState({ mode: nextMode });\n    };\n\n    isPlayerSelected = username => {\n        const { players } = this.state;\n        return players.find(player => player.username === username);\n    };\n\n    handleSort = accessor => () => {\n        const { column, players, direction, mode } = this.state;\n        // Reverse order if direction set, else default to desc\n        let sortDirection = direction === 'desc' ? 'asc' : 'desc';\n        let sortedColumn = column;\n        // First click default setting\n        if (column !== accessor) {\n            // Default to desc order, unless username column\n            sortDirection = accessor == 'username' ? 'asc' : 'desc';\n            sortedColumn = accessor; // Set sorted column name\n        }\n        // Sort players\n        const sortedPlayers = this.sortPlayers(players, accessor, mode, sortDirection);\n\n        this.setState(\n            {\n                column: sortedColumn,\n                players: sortedPlayers,\n                direction: sortDirection\n            },\n            () => this.updateURL()\n        );\n    };\n\n    sortPlayers = (players, accessor, mode, direction) => {\n        return accessor == 'username'\n            ? _.orderBy(this.state.players, [o => o.username.getChar(0).toLowerCase()], [direction])\n            : _.orderBy(players, o => o.stats[`${accessor}_${mode}`], [direction]);\n    };\n\n    updateURL = () => {\n        const { router } = this.props;\n        const { players } = this.state;\n        const usernames = players.map(player => player.username);\n        router.push({\n            pathname: '/leaderboard',\n            query: { entries: usernames.length, usernames: usernames },\n            options: { shallow: true }\n        });\n    };\n\n    handleContextRef = contextRef => this.setState({ contextRef });\n\n    render() {\n        const { columns, mode, players, contextRef } = this.state;\n        const { searchResults, fetchByUsername } = this.props;\n        const debouncedfetchByUsername = _.debounce(fetchByUsername, 500, {\n            maxWait: 1000\n        });\n        return (\n            <div ref={this.handleContextRef} style={{ overflow: 'scroll', height: '100%' }}>\n                <Container\n                    text\n                    textAlign=\"center\"\n                    style={{\n                        paddingTop: '200px',\n                        paddingBottom: '100px',\n                        height: '100%'\n                    }}\n                >\n                    <h1>Board</h1>\n                    <Grid columns=\"1\" centered textAlign=\"center\">\n                        <Grid.Column\n                            mobile=\"16\"\n                            computer=\"6\"\n                            largeScreen=\"6\"\n                            tablet=\"6\"\n                            widescreen=\"6\"\n                        >\n                            <Container>\n                                <SearchBar\n                                    checkDuplicateSelect={this.isPlayerSelected}\n                                    handleResultSelect={this.addPlayer}\n                                    fetchByUsername={debouncedfetchByUsername}\n                                    results={searchResults}\n                                />\n                            </Container>\n                            <Icon name=\"share square\" />\n                        </Grid.Column>\n                        <Grid.Column textAlign=\"center\">\n                            <Board\n                                contextRef={contextRef}\n                                columns={columns}\n                                mode={mode}\n                                players={players}\n                                removePlayer={this.removePlayer}\n                                handleModeChange={this.changeMode}\n                            />\n                        </Grid.Column>\n                    </Grid>\n                </Container>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        searchResults: state.search.searchResults\n    };\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators({ fetchByUsername }, dispatch);\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Leaderboard);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;;;;;AAAA;AAAA;AAAA;AACA;;AACA;;;;;;AACA;AACA;;AADA;;;;;;AAEA;AAAA;AAAA;AACA;;AADA;AACA;;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgDA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAjDA;AAAA;AAAA;AAAA;AACA;AADA;AA6DA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAlEA;AAmEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAXA;AACA;AAYA;AAAA;AAAA;AACA;AACA;AArFA;AAsFA;AAEA;AAAA;AAAA;AACA;AACA;AA1FA;AA2FA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAEA;AAtBA;AACA;AA5FA;AAoHA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAxHA;AAyHA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AACA;AAnIA;AAoIA;AAAA;AAAA;AAAA;AACA;AAnIA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AASA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAJA;AAOA;AACA;AACA;AAHA;AAMA;AACA;AA9BA;AAgCA;;;AAwFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AADA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAaA;;;;AAvMA;AACA;AAyMA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;A","sourceRoot":""}
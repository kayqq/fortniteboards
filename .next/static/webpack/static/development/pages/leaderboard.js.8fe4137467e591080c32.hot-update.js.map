{"version":3,"file":"static/webpack/static/development/pages/leaderboard.js.8fe4137467e591080c32.hot-update.js","sources":["webpack:///./pages/leaderboard.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\n\nimport { Container, Grid, Table, Icon, Header } from 'semantic-ui-react';\nimport SearchBar from '../src/components/SearchBar';\nimport { fetchByUsername, getProfile } from '../src/actions';\n\nimport Board from '../src/components/board';\n\n// show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n\nclass Leaderboard extends Component {\n    static async getInitialProps({ store, query, pathname, asPath, req }) {\n        const { usernames, entries } = query;\n        // spread into array for mapping\n        let initialPlayers = [];\n\n        if (!usernames) return { initialPlayers };\n\n        if (entries <= 1) {\n            initialPlayers = await getProfile(usernames);\n        } else {\n            initialPlayers = await Promise.all(usernames.map(username => getProfile(username)));\n        }\n        return { initialPlayers, entries };\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: [],\n            mode: 'solo',\n            columns: [\n                { header: 'Player', accessor: 'username', size: '5' },\n                { header: 'K/D', accessor: 'kd', size: '2' },\n                { header: 'Win %', accessor: 'winrate', size: '2' },\n                { header: 'Kills', accessor: 'kills', size: '2' },\n                { header: 'Wins', accessor: 'placetop1', size: '2' }\n                // { header: 'Matches', accessor: 'matchesplayed', size: '3' }\n            ],\n            activeColumnSort: '#',\n            column: null,\n            direction: null\n        };\n    }\n\n    handleSort = (sortFn, clickedColumn) => () => {\n        const { column, players, direction } = this.state;\n        if (column !== clickedColumn) {\n            this.setState(\n                {\n                    column: clickedColumn,\n                    players: sortFn(),\n                    direction: 'ascending'\n                },\n                () => this.updateURL()\n            );\n\n            return;\n        }\n\n        this.setState(\n            {\n                players: players.reverse(),\n                direction: direction === 'ascending' ? 'descending' : 'ascending'\n            },\n            () => this.updateURL()\n        );\n    };\n\n    componentDidMount() {\n        const { initialPlayers, entries } = this.props;\n        const { players } = this.state;\n        this.setState({\n            players: entries <= 1 ? [...players, initialPlayers] : [...players, ...initialPlayers],\n            entries: entries\n        });\n    }\n\n    addPlayer = async username => {\n        const { players } = this.state;\n\n        const newPlayer = await getProfile(username);\n        const updatedPlayers = [...players, newPlayer];\n        this.setState({ players: updatedPlayers }, () => this.updateURL());\n    };\n\n    removePlayer = index => {\n        const { players } = this.state;\n        const updatedPlayers = players.filter((player, i) => i !== index);\n        this.setState({ players: updatedPlayers }, () => this.updateURL());\n    };\n\n    sortPlayers = columnHeader => {\n        this.setState({ activeColumnSort: columnHeader });\n    };\n\n    changeMode = direction => {\n        const { mode } = this.state;\n        let nextMode = '';\n        switch (mode) {\n            case 'solo':\n                nextMode = direction === 'forward' ? 'duo' : 'squad';\n                break;\n            case 'duo':\n                nextMode = direction === 'forward' ? 'squad' : 'solo';\n                break;\n            case 'squad':\n                nextMode = direction === 'forward' ? 'solo' : 'duo';\n                break;\n            default:\n                break;\n        }\n        this.setState({ mode: nextMode });\n    };\n\n    isPlayerSelected = username => {\n        const { players } = this.state;\n        return players.find(player => player.username === username);\n    };\n\n    updateURL = () => {\n        const { router } = this.props;\n        const { players } = this.state;\n        const usernames = players.map(player => player.username);\n        router.push({\n            pathname: '/leaderboard',\n            query: { entries: usernames.length, usernames: usernames },\n            options: { shallow: true }\n        });\n    };\n\n    render() {\n        const { columns, mode, players, activeColumnSort, column, direction } = this.state;\n        const { searchResults, fetchByUsername } = this.props;\n        const debouncedfetchByUsername = _.debounce(fetchByUsername, 500, {\n            maxWait: 1000\n        });\n        return (\n            <div>\n                <Container\n                    text\n                    textAlign=\"center\"\n                    style={{\n                        paddingTop: '200px',\n                        paddingBottom: '100px',\n                        height: '100%'\n                    }}\n                >\n                    <h1>Board</h1>\n                    <Grid columns=\"1\" centered textAlign=\"center\">\n                        <Grid.Column\n                            mobile=\"16\"\n                            computer=\"6\"\n                            largeScreen=\"6\"\n                            tablet=\"6\"\n                            widescreen=\"6\"\n                        >\n                            <Container>\n                                <SearchBar\n                                    checkDuplicateSelect={this.isPlayerSelected}\n                                    handleResultSelect={this.addPlayer}\n                                    fetchByUsername={debouncedfetchByUsername}\n                                    results={searchResults}\n                                />\n                            </Container>\n                        </Grid.Column>\n                        <Grid.Column textAlign=\"center\">\n                            <Board\n                                columns={columns}\n                                sortPlayers={this.sortPlayers}\n                                activeColumnSort={activeColumnSort}\n                                mode={mode}\n                                players={players}\n                                removePlayer={this.removePlayer}\n                                handleModeChange={this.changeMode}\n                            />\n                        </Grid.Column>\n                        {/*  */}\n                        {/*  */}\n                        {/*  */}\n                        <Grid.Column textAlign=\"center\" />\n                        <Table\n                            sortable\n                            unstackable\n                            compact\n                            fixed\n                            size=\"small\"\n                            style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                        >\n                            <Table.Header>\n                                <Table.Row>\n                                    <Table.HeaderCell\n                                        textAlign=\"center\"\n                                        style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                                    >\n                                        <Header size=\"tiny\">\n                                            <Header.Subheader\n                                                as=\"h6\"\n                                                style={{\n                                                    color: '#92a2bd'\n                                                }}\n                                            >\n                                                #\n                                            </Header.Subheader>\n                                        </Header>{' '}\n                                    </Table.HeaderCell>\n                                    <Table.HeaderCell\n                                        style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                                        // sorted={column === 'username' ? direction : null}\n                                        onClick={this.handleSort(\n                                            () => _.sortBy(players, o => o.username),\n                                            'username'\n                                        )}\n                                    >\n                                        <Header size=\"tiny\">\n                                            <Header.Subheader\n                                                as=\"h6\"\n                                                style={{\n                                                    color: '#92a2bd'\n                                                }}\n                                            >\n                                                Player\n                                            </Header.Subheader>\n                                        </Header>\n                                    </Table.HeaderCell>\n                                    <Table.HeaderCell\n                                        textAlign=\"center\"\n                                        style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                                        // sorted={column === 'kd' ? direction : null}\n                                        onClick={this.handleSort(\n                                            () => _.sortBy(players, o => o.stats[`kd_${mode}`]),\n                                            'kd'\n                                        )}\n                                    >\n                                        <Header size=\"tiny\">\n                                            <Header.Subheader\n                                                as=\"h6\"\n                                                style={{\n                                                    color: '#92a2bd'\n                                                }}\n                                            >\n                                                K/D\n                                            </Header.Subheader>\n                                        </Header>\n                                    </Table.HeaderCell>\n                                    <Table.HeaderCell\n                                        textAlign=\"center\"\n                                        style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                                        // sorted={column === 'winrate' ? direction : null}\n                                        onClick={this.handleSort(\n                                            () =>\n                                                _.sortBy(players, o => o.stats[`winrate_${mode}`]),\n                                            'winrate'\n                                        )}\n                                    >\n                                        <Header size=\"tiny\">\n                                            <Header.Subheader\n                                                as=\"h6\"\n                                                style={{\n                                                    color: '#92a2bd'\n                                                }}\n                                            >\n                                                Win %\n                                            </Header.Subheader>\n                                        </Header>\n                                    </Table.HeaderCell>\n                                    <Table.HeaderCell\n                                        textAlign=\"center\"\n                                        style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                                        // sorted={column === 'kills' ? direction : null}\n                                        onClick={this.handleSort(\n                                            () => _.sortBy(players, o => o.stats[`kills_${mode}`]),\n                                            'kills'\n                                        )}\n                                    >\n                                        <Header size=\"tiny\">\n                                            <Header.Subheader\n                                                as=\"h6\"\n                                                style={{\n                                                    color: '#92a2bd'\n                                                }}\n                                            >\n                                                Kills\n                                            </Header.Subheader>\n                                        </Header>\n                                    </Table.HeaderCell>\n                                    <Table.HeaderCell\n                                        textAlign=\"center\"\n                                        style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                                        // sorted={column === 'wins' ? direction : null}\n                                        onClick={this.handleSort(\n                                            () =>\n                                                _.sortBy(\n                                                    players,\n                                                    o => o.stats[`placetop1_${mode}`]\n                                                ),\n                                            'wins'\n                                        )}\n                                    >\n                                        <Header size=\"tiny\">\n                                            <Header.Subheader\n                                                as=\"h6\"\n                                                style={{\n                                                    color: '#92a2bd'\n                                                }}\n                                            >\n                                                Wins\n                                            </Header.Subheader>\n                                        </Header>\n                                    </Table.HeaderCell>\n                                </Table.Row>\n                            </Table.Header>\n                            <Table.Body>\n                                {_.map(players, (player, index) => (\n                                    <Table.Row key={player.username} verticalAlign=\"top\">\n                                        <Table.Cell>\n                                            <Header as=\"h6\" style={{ color: '#92a2bd' }}>\n                                                {index + 1}\n                                            </Header>\n                                        </Table.Cell>\n                                        <Table.Cell singleLine>\n                                            <Header as=\"h6\" style={{ color: 'white' }}>\n                                                {player.username}\n\n                                                <Header.Subheader\n                                                    size=\"small\"\n                                                    style={{ color: '#92a2bd' }}\n                                                >\n                                                    {player.stats[`matchesplayed_${mode}`]} Matches\n                                                </Header.Subheader>\n                                            </Header>\n                                        </Table.Cell>\n                                        <Table.Cell singleLine textAlign=\"center\">\n                                            <Header as=\"h4\" style={{ color: 'white' }}>\n                                                {player.stats[`kd_${mode}`]}\n                                            </Header>\n                                        </Table.Cell>\n                                        <Table.Cell singleLine textAlign=\"center\">\n                                            <Header as=\"h4\" style={{ color: 'white' }}>\n                                                {player.stats[`winrate_${mode}`]}\n                                            </Header>\n                                        </Table.Cell>\n                                        <Table.Cell singleLine textAlign=\"center\">\n                                            <Header as=\"h4\" style={{ color: 'white' }}>\n                                                {player.stats[`kills_${mode}`]}\n                                            </Header>\n                                        </Table.Cell>\n                                        <Table.Cell collapsing singleLine textAlign=\"center\">\n                                            <Header as=\"h4\" style={{ color: 'white' }}>\n                                                {player.stats[`placetop1_${mode}`]}\n                                            </Header>\n                                        </Table.Cell>\n                                        <Table.Cell\n                                            width=\"1\"\n                                            singleLine\n                                            textAlign=\"center\"\n                                            icon=\"trash alternate outline\"\n                                            style={{\n                                                color: 'red',\n                                                fontSize: '12px',\n                                                paddingLeft: '0px'\n                                            }}\n                                        />\n                                    </Table.Row>\n                                ))}\n                            </Table.Body>\n                        </Table>\n                    </Grid>\n                </Container>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        searchResults: state.search.searchResults\n    };\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators({ fetchByUsername }, dispatch);\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Leaderboard);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAAA;AAAA;AAAA;AACA;;AACA;;;;;;AACA;AACA;;AADA;;;;;;AAEA;AAAA;AAAA;AACA;;AADA;AACA;;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAmBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AAAA;AAEA;AAtBA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoDA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AArDA;AAAA;AAAA;AAAA;AACA;AADA;AA4DA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAjEA;AAmEA;AAAA;AAAA;AACA;AACA;AArEA;AAsEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAXA;AACA;AAYA;AAAA;AAAA;AACA;AACA;AAxFA;AAyFA;AAEA;AAAA;AAAA;AACA;AACA;AA7FA;AA8FA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AACA;AAtGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AAbA;AAFA;AAiBA;AACA;;;AAyBA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;;;AAuDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AADA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AAJA;AAQA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAaaA;AAAA;AAEA;AACA;AACA;AADA;AAFA;AAaA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AALA;AAvCA;AA0DA;;;;AAzWA;AACA;AA2WA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;A","sourceRoot":""}
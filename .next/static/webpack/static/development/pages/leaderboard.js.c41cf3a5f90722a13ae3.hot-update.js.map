{"version":3,"file":"static/webpack/static/development/pages/leaderboard.js.c41cf3a5f90722a13ae3.hot-update.js","sources":["webpack:///./pages/leaderboard.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\n\nimport { Container, Grid, Icon, Table } from 'semantic-ui-react';\nimport SearchBar from '../src/components/SearchBar';\nimport { fetchByUsername, getProfile } from '../src/actions';\n\nimport Board from '../src/components/board';\n\n// show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n\nclass Leaderboard extends Component {\n    static async getInitialProps({ store, query, pathname, asPath, req }) {\n        const { usernames } = query;\n        let initialPlayers = [];\n\n        if (!usernames) return { initialPlayers };\n\n        const players = typeof usernames == 'string' ? [usernames] : usernames;\n        initialPlayers = await Promise.all(players.map(player => getProfile(player)));\n\n        return { initialPlayers };\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: [],\n            mode: 'solo',\n            columns: [],\n            column: null,\n            direction: null\n        };\n    }\n\n    componentDidMount() {\n        const { initialPlayers } = this.props;\n        const { players } = this.state;\n        this.setState({\n            columns: [\n                {\n                    header: 'Player',\n                    accessor: 'username',\n                    sort: this.handleSort('username')\n                },\n                {\n                    header: 'K/D',\n                    accessor: 'kd',\n                    sort: this.handleSort('kd')\n                },\n                {\n                    header: 'Win %',\n                    accessor: 'winrate',\n                    sort: this.handleSort('winrate')\n                },\n                {\n                    header: 'Kills',\n                    accessor: 'kills',\n\n                    sort: this.handleSort('kills')\n                },\n                {\n                    header: 'Wins',\n                    accessor: 'placetop1',\n                    sort: this.handleSort('placetop1')\n                }\n            ],\n            players: [...players, ...initialPlayers]\n        });\n    }\n\n    addPlayer = async username => {\n        const { players, column, mode, direction } = this.state;\n        const newPlayer = await getProfile(username);\n        let updatedPlayers = [...players, newPlayer];\n\n        // if previous sorted then apply sort setting to updated players\n        if (column !== null) {\n            updatedPlayers = this.sortPlayers(updatedPlayers, column, mode, direction);\n        }\n\n        this.setState({ players: updatedPlayers }, () => this.updateURL());\n    };\n\n    removePlayer = index => {\n        const { players } = this.state;\n        const updatedPlayers = players.filter((player, i) => i !== index);\n        this.setState({ players: updatedPlayers }, () => this.updateURL());\n    };\n\n    changeMode = direction => {\n        const { mode } = this.state;\n        let nextMode = '';\n        switch (mode) {\n            case 'solo':\n                nextMode = direction === 'forward' ? 'duo' : 'squad';\n                break;\n            case 'duo':\n                nextMode = direction === 'forward' ? 'squad' : 'solo';\n                break;\n            case 'squad':\n                nextMode = direction === 'forward' ? 'solo' : 'duo';\n                break;\n            default:\n                break;\n        }\n        this.setState({ mode: nextMode });\n    };\n\n    isPlayerSelected = username => {\n        const { players } = this.state;\n        return players.find(player => player.username === username);\n    };\n\n    handleSort = accessor => () => {\n        const { column, players, direction, mode } = this.state;\n        // Reverse order if direction set, else default to desc\n        let sortDirection = direction === 'desc' ? 'asc' : 'desc';\n        let sortedColumn = column;\n        // First click default setting\n        if (column !== accessor) {\n            // Default to desc order, unless username column\n            sortDirection = accessor == 'username' ? 'asc' : 'desc';\n            sortedColumn = accessor; // Set sorted column name\n        }\n        // Sort players\n        const sortedPlayers = this.sortPlayers(players, accessor, mode, sortDirection);\n\n        this.setState(\n            {\n                column: sortedColumn,\n                players: sortedPlayers,\n                direction: sortDirection\n            },\n            () => this.updateURL()\n        );\n    };\n\n    sortPlayers = (players, accessor, mode, direction) => {\n        return accessor == 'username'\n            ? _.orderBy(this.state.players, [o => o.username.toLowerCase()], [direction])\n            : _.orderBy(players, o => o.stats[`${accessor}_${mode}`], [direction]);\n    };\n\n    updateURL = () => {\n        const { router } = this.props;\n        const { players } = this.state;\n        const usernames = players.map(player => player.username);\n        router.push({\n            pathname: '/leaderboard',\n            query: { usernames: usernames },\n            options: { shallow: true }\n        });\n    };\n\n    render() {\n        const { columns, mode, players } = this.state;\n        const { searchResults, fetchByUsername } = this.props;\n        const debouncedfetchByUsername = _.debounce(fetchByUsername, 500, {\n            maxWait: 1000\n        });\n        return (\n            <Container\n                text\n                textAlign=\"center\"\n                style={{\n                    paddingTop: '200px',\n                    paddingBottom: '100px',\n                    height: '100%'\n                }}\n            >\n                <h1>Board</h1>\n                <Grid columns=\"1\" centered textAlign=\"center\">\n                    <Grid.Column mobile=\"16\" computer=\"6\" largeScreen=\"6\" tablet=\"6\" widescreen=\"6\">\n                        <Container>\n                            <SearchBar\n                                checkDuplicateSelect={this.isPlayerSelected}\n                                handleResultSelect={this.addPlayer}\n                                fetchByUsername={debouncedfetchByUsername}\n                                results={searchResults}\n                            />\n                        </Container>\n                        <Icon name=\"share square\" />\n                    </Grid.Column>\n                    <Grid.Column textAlign=\"center\">\n                        <Board\n                            columns={columns}\n                            mode={mode}\n                            players={players}\n                            removePlayer={this.removePlayer}\n                            handleModeChange={this.changeMode}\n                        />\n                        <hr />\n                        <Table\n                            sortable\n                            unstackable\n                            compact\n                            size=\"small\"\n                            style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                        >\n                            <Table.Header>\n                                <Table.Row>\n                                    <Table.HeaderCell\n                                        textAlign=\"center\"\n                                        style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                                    >\n                                        <Header size=\"tiny\">\n                                            <Header.Subheader\n                                                as=\"h6\"\n                                                style={{\n                                                    color: '#92a2bd'\n                                                }}\n                                            >\n                                                #\n                                            </Header.Subheader>\n                                        </Header>{' '}\n                                    </Table.HeaderCell>\n                                    <Table.HeaderCell\n                                        style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                                        // sorted={column === 'username' ? direction : null}\n                                        onClick={this.handleSort(\n                                            () => _.sortBy(players, o => o.username),\n                                            'username'\n                                        )}\n                                    >\n                                        <Header size=\"tiny\">\n                                            <Header.Subheader\n                                                as=\"h6\"\n                                                style={{\n                                                    color: '#92a2bd'\n                                                }}\n                                            >\n                                                Player\n                                            </Header.Subheader>\n                                        </Header>\n                                    </Table.HeaderCell>\n                                    <Table.HeaderCell\n                                        textAlign=\"center\"\n                                        style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                                        // sorted={column === 'kd' ? direction : null}\n                                        onClick={this.handleSort(\n                                            () => _.sortBy(players, o => o.stats[`kd_${mode}`]),\n                                            'kd'\n                                        )}\n                                    >\n                                        <Header size=\"tiny\">\n                                            <Header.Subheader\n                                                as=\"h6\"\n                                                style={{\n                                                    color: '#92a2bd'\n                                                }}\n                                            >\n                                                K/D\n                                            </Header.Subheader>\n                                        </Header>\n                                    </Table.HeaderCell>\n                                    <Table.HeaderCell\n                                        textAlign=\"center\"\n                                        style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                                        // sorted={column === 'winrate' ? direction : null}\n                                        onClick={this.handleSort(\n                                            () =>\n                                                _.sortBy(players, o => o.stats[`winrate_${mode}`]),\n                                            'winrate'\n                                        )}\n                                    >\n                                        <Header size=\"tiny\">\n                                            <Header.Subheader\n                                                as=\"h6\"\n                                                style={{\n                                                    color: '#92a2bd'\n                                                }}\n                                            >\n                                                Win %\n                                            </Header.Subheader>\n                                        </Header>\n                                    </Table.HeaderCell>\n                                    <Table.HeaderCell\n                                        textAlign=\"center\"\n                                        style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                                        // sorted={column === 'kills' ? direction : null}\n                                        onClick={this.handleSort(\n                                            () => _.sortBy(players, o => o.stats[`kills_${mode}`]),\n                                            'kills'\n                                        )}\n                                    >\n                                        <Header size=\"tiny\">\n                                            <Header.Subheader\n                                                as=\"h6\"\n                                                style={{\n                                                    color: '#92a2bd'\n                                                }}\n                                            >\n                                                Kills\n                                            </Header.Subheader>\n                                        </Header>\n                                    </Table.HeaderCell>\n                                    <Table.HeaderCell\n                                        textAlign=\"center\"\n                                        style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                                        // sorted={column === 'wins' ? direction : null}\n                                        onClick={this.handleSort(\n                                            () =>\n                                                _.sortBy(\n                                                    players,\n                                                    o => o.stats[`placetop1_${mode}`]\n                                                ),\n                                            'wins'\n                                        )}\n                                    >\n                                        <Header size=\"tiny\">\n                                            <Header.Subheader\n                                                as=\"h6\"\n                                                style={{\n                                                    color: '#92a2bd'\n                                                }}\n                                            >\n                                                Wins\n                                            </Header.Subheader>\n                                        </Header>\n                                    </Table.HeaderCell>\n                                </Table.Row>\n                            </Table.Header>\n                            <Table.Body>\n                                {_.map(players, (player, index) => (\n                                    <Table.Row key={player.username} verticalAlign=\"top\">\n                                        <Table.Cell>\n                                            <Header as=\"h6\" style={{ color: '#92a2bd' }}>\n                                                {index + 1}\n                                            </Header>\n                                        </Table.Cell>\n                                        <Table.Cell singleLine>\n                                            <Header as=\"h6\" style={{ color: 'white' }}>\n                                                {player.username}\n\n                                                <Header.Subheader\n                                                    size=\"small\"\n                                                    style={{ color: '#92a2bd' }}\n                                                >\n                                                    {player.stats[`matchesplayed_${mode}`]} Matches\n                                                </Header.Subheader>\n                                            </Header>\n                                        </Table.Cell>\n                                        <Table.Cell singleLine textAlign=\"center\">\n                                            <Header as=\"h4\" style={{ color: 'white' }}>\n                                                {player.stats[`kd_${mode}`]}\n                                            </Header>\n                                        </Table.Cell>\n                                        <Table.Cell singleLine textAlign=\"center\">\n                                            <Header as=\"h4\" style={{ color: 'white' }}>\n                                                {player.stats[`winrate_${mode}`]}\n                                            </Header>\n                                        </Table.Cell>\n                                        <Table.Cell singleLine textAlign=\"center\">\n                                            <Header as=\"h4\" style={{ color: 'white' }}>\n                                                {player.stats[`kills_${mode}`]}\n                                            </Header>\n                                        </Table.Cell>\n                                        <Table.Cell collapsing singleLine textAlign=\"center\">\n                                            <Header as=\"h4\" style={{ color: 'white' }}>\n                                                {player.stats[`placetop1_${mode}`]}\n                                            </Header>\n                                        </Table.Cell>\n                                        <Table.Cell\n                                            singleLine\n                                            textAlign=\"center\"\n                                            icon=\"trash alternate outline\"\n                                            style={{\n                                                color: 'red',\n                                                fontSize: '12px',\n                                                paddingLeft: '0px'\n                                            }}\n                                        />\n                                    </Table.Row>\n                                ))}\n                            </Table.Body>\n                        </Table>\n                        ;\n                    </Grid.Column>\n                </Grid>\n            </Container>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        searchResults: state.search.searchResults\n    };\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators({ fetchByUsername }, dispatch);\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Leaderboard);\n"],"mappings":"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","sourceRoot":""}
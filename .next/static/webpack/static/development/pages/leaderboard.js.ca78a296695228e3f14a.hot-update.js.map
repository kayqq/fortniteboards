{"version":3,"file":"static/webpack/static/development/pages/leaderboard.js.ca78a296695228e3f14a.hot-update.js","sources":["webpack:///./pages/leaderboard.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport _ from \"lodash\";\n\nimport SearchBar from \"../src/components/SearchBar\";\nimport { fetchByUsername, getProfile } from \"../src/actions\";\nimport { Container, Grid, Icon, Header } from \"semantic-ui-react\";\n\n// show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n\nconst Board = ({ players, mode, handleModeChange }) => {\n  // const columns = {\n  //   \"K/D\": \"kd\",\n  //   Wins: \"placetop1\",\n  //   Kills: \"kills\",\n  //   \"Win %\": \"winrate\",\n  //   Matches: \"matchesplayed\"\n  // };\n\n  const columns = [\n    { header: \"K/D\", accessor: \"kd\" },\n    { header: \"Wins\", accessor: \"placetop1\" },\n    { header: \"Kills\", accessor: \"kills\" },\n    { header: \"Win %\", accessor: \"winrate\" },\n    { header: \"Matches\", accessor: \"matchesplayed\" }\n  ];\n  let backgroundColor = \"\";\n  let title = \"\";\n  switch (mode) {\n    case \"solo\":\n      backgroundColor = \"#14c8ff\";\n      title = \"Solo\";\n      break;\n    case \"duo\":\n      backgroundColor = \"#f3af19\";\n      title = \"Duo\";\n      break;\n    case \"squad\":\n      backgroundColor = \"#9d4dbb\";\n      title = \"Squad\";\n      break;\n    default:\n      break;\n  }\n  return (\n    <Grid style={{ backgroundColor: \"#2c3c57\", color: \"white\" }}>\n      <Grid.Row\n        columns={columns.length}\n        style={{ backgroundColor: backgroundColor }}\n      >\n        <Grid.Column\n          as=\"span\"\n          floated=\"left\"\n          textAlign=\"left\"\n          onClick={() => handleModeChange(\"reverse\")}\n        >\n          <Icon name=\"angle left\" />\n        </Grid.Column>\n        <Grid.Column as=\"span\" textAlign=\"center\">\n          {title}\n        </Grid.Column>\n        <Grid.Column\n          as=\"span\"\n          floated=\"right\"\n          textAlign=\"right\"\n          onClick={() => handleModeChange(\"forward\")}\n        >\n          <Icon name=\"angle right\" />\n        </Grid.Column>\n      </Grid.Row>\n\n      {/* <BoardHeader /> */}\n      <Grid.Row columns=\"5\" stretched>\n        {columns.map(column => (\n          <Grid.Column textAlign=\"center\" verticalAlign=\"middle\">\n            <Header.Subheader style={{ color: \"#92a2bd\" }}>\n              {column.heade}\n            </Header.Subheader>\n          </Grid.Column>\n        ))}{\" \"}\n      </Grid.Row>\n\n      {players.map(player => (\n        <Grid.Row columns=\"5\" stretched>\n          {columns.map(column => (\n            <Grid.Column textAlign=\"center\" verticalAlign=\"middle\">\n              <Header size=\"medium\" style={{ color: \"white\" }}>\n                {player.stats[`${column.accessor}_${mode}`]}\n              </Header>\n            </Grid.Column>\n          ))}\n        </Grid.Row>\n      ))}\n    </Grid>\n  );\n};\n\nconst BoardHeader = columns => {\n  return (\n    <Grid.Row columns=\"5\" stretched>\n      <Grid.Column textAlign=\"center\" verticalAlign=\"middle\">\n        <Header.Subheader style={{ color: \"#92a2bd\" }}>K/D</Header.Subheader>\n      </Grid.Column>\n      <Grid.Column textAlign=\"center\" verticalAlign=\"middle\">\n        <Header.Subheader style={{ color: \"#92a2bd\" }}>Wins</Header.Subheader>\n      </Grid.Column>\n      <Grid.Column textAlign=\"center\" verticalAlign=\"middle\">\n        <Header.Subheader style={{ color: \"#92a2bd\" }}>Kills</Header.Subheader>\n      </Grid.Column>\n      <Grid.Column textAlign=\"center\" verticalAlign=\"middle\">\n        <Header.Subheader style={{ color: \"#92a2bd\" }}>Win %</Header.Subheader>\n      </Grid.Column>\n      <Grid.Column textAlign=\"center\" verticalAlign=\"middle\">\n        <Header.Subheader style={{ color: \"#92a2bd\" }}>\n          Matches\n        </Header.Subheader>\n      </Grid.Column>\n    </Grid.Row>\n  );\n};\n\nclass Leaderboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { players: [], mode: \"solo\" };\n  }\n\n  handleModeChange = direction => {\n    const { mode } = this.state;\n    let nextMode = \"\";\n    switch (mode) {\n      case \"solo\":\n        nextMode = direction === \"forward\" ? \"duo\" : \"squad\";\n        break;\n      case \"duo\":\n        nextMode = direction === \"forward\" ? \"squad\" : \"solo\";\n        break;\n      case \"squad\":\n        nextMode = direction === \"forward\" ? \"solo\" : \"duo\";\n        break;\n      default:\n        break;\n    }\n    this.setState({ mode: nextMode });\n  };\n\n  isPlayerSelected = (username, players) =>\n    players.find(player => player.username === username);\n\n  handleResultSelect = async (username, resetSearchFn) => {\n    const { players } = this.state;\n\n    // Reset component if username is already in table\n    if (this.isPlayerSelected(username, players)) return resetSearchFn();\n\n    // Get profile of username and add to table\n    const newPlayer = await getProfile(username);\n    this.setState({ players: [...players, newPlayer] }, () => resetSearchFn());\n    console.log(this.state.players);\n  };\n\n  render() {\n    const { searchResults, fetchByUsername } = this.props;\n\n    const debouncedfetchByUsername = _.debounce(fetchByUsername, 500, {\n      maxWait: 1000\n    });\n\n    return (\n      <div>\n        <Container\n          text\n          textAlign=\"center\"\n          style={{\n            paddingTop: \"200px\",\n            paddingBottom: \"100px\",\n            height: \"100%\"\n          }}\n        >\n          <h1>Leaderboard</h1>\n          <Grid columns=\"1\" centered textAlign=\"center\">\n            <Grid.Column\n              mobile=\"16\"\n              computer=\"6\"\n              largeScreen=\"6\"\n              tablet=\"6\"\n              widescreen=\"6\"\n            >\n              <Container>\n                <SearchBar\n                  handleResultSelect={this.handleResultSelect}\n                  fetchByUsername={debouncedfetchByUsername}\n                  results={searchResults}\n                />\n              </Container>\n            </Grid.Column>\n            <Grid.Column textAlign=\"center\">\n              <Board\n                handleModeChange={this.handleModeChange}\n                players={this.state.players}\n                mode={this.state.mode}\n              />\n            </Grid.Column>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchResults: state.search.searchResults\n  };\n};\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators({ fetchByUsername }, dispatch);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Leaderboard);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAdA;AACA;AAeA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AAAA;AAEA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AASA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAFA;AAaA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAMA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAXA;AACA;AAYA;AAAA;AAAA;AACA;AACA;AAxBA;AAyBA;AACA;AAAA;AADA;AACA;AA1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA7BA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAHA;AAIA;AACA;;;AAmCA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AADA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AAHA;AAOA;AAAA;AAEA;AACA;AACA;AAHA;AAUA;;;;AAvFA;AACA;AAyFA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AADA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}
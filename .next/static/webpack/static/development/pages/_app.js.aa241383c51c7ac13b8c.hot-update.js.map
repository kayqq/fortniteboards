{"version":3,"file":"static/webpack/static/development/pages/_app.js.aa241383c51c7ac13b8c.hot-update.js","sources":["webpack:///./src/components/SearchBar.js"],"sourcesContent":["import _ from 'lodash';\nimport React, { Component, useState, useEffect } from 'react';\nimport { Search, Label } from 'semantic-ui-react';\nimport { getUsernames } from '../actions';\n\nconst resultRenderer = ({ uid, username }) => <Label key={uid} content={username} />;\n\n// export default class SearchBar extends Component {\n//     constructor(props) {\n//         super(props);\n\n//         this.state = {\n//             value: '',\n//             isLoading: false\n//         };\n//     }\n\n//     componentWillMount() {\n//         this.resetComponent();\n//     }\n\n//     resetComponent = () => this.setState({ isLoading: false, value: '' });\n\n//     handleResultSelect = async (e, { result }) => {\n//         const { handleResultSelect } = this.props;\n//         this.setState({ value: result.username, isLoading: true });\n//         await handleResultSelect(result.username);\n//         this.resetComponent();\n//     };\n\n//     handleSearchChange = (e, { value }) => {\n//         this.setState({ isLoading: true, value }, () => {\n//             // reset loading if empty\n//             if (this.state.value.length < 1) return this.resetComponent();\n\n//             // fetch users by username\n//             this.props.fetchByUsername(this.state.value, () => {\n//                 this.setState({ isLoading: false });\n//             });\n//         });\n//     };\n\n//     render() {\n//         const { isLoading, value } = this.state;\n//         const { results } = this.props;\n//         return (\n//             <Search\n//                 input={{ fluid: true, icon: 'arrow circle right' }}\n//                 loading={isLoading}\n//                 placeholder={'Enter your Epic username'}\n//                 onResultSelect={this.handleResultSelect}\n//                 onSearchChange={_.debounce(this.handleSearchChange, 500, {\n//                     leading: true\n//                 })}\n//                 results={results}\n//                 resultRenderer={resultRenderer}\n//                 value={value}\n//                 showNoResults={false}\n//             />\n//         );\n//     }\n// }\n\nconst SearchBar = ({ handleResultSelect }) => {\n    console.log('rendering');\n    const [searchTerm, setSearchTerm] = useState('');\n    const [results, setResults] = useState([]);\n    const [isSearching, setIsSearching] = useState(false);\n    const debouncedSearchTerm = useDebounce(searchTerm, 500);\n\n    async function fetch() {\n        const response = await getUsernames(debouncedSearchTerm);\n        const formattedResults = response.map((result, index) => {\n            result.key = index;\n            result.title = result.username;\n            return result;\n        });\n        setResults(formattedResults);\n        return formattedResults;\n    }\n\n    useEffect(\n        () => {\n            if (debouncedSearchTerm) {\n                setIsSearching(true);\n                console.log(isSearching);\n                setResults(fetch());\n                setIsSearching(false);\n                // const results = await getUsernames(debouncedSearchTerm);\n                // const formattedResults = results.map((result, index) => {\n                //     result.key = index;\n                //     result.title = result.username;\n                //     return result;\n                // });\n            } else {\n                setResults([]);\n                // resetComponent();\n            }\n        },\n        [debouncedSearchTerm] // Only call effect if debounced search term changes\n    );\n\n    const resetComponent = () => {\n        setSearchTerm('');\n        setIsSearching(false);\n    };\n\n    const onResultSelect = (e, { result }) => {\n        setSearchTerm(result.username);\n        handleResultSelect(result.username);\n        setSearchTerm('');\n    };\n\n    const onSearchChange = (e, { value }) => {\n        setIsSearching(true);\n        setSearchTerm(value);\n    };\n\n    return (\n        <Search\n            input={{ fluid: true, icon: 'arrow circle right' }}\n            loading={isSearching}\n            placeholder={'Enter your Epic username'}\n            onResultSelect={onResultSelect}\n            onSearchChange={onSearchChange}\n            results={results}\n            resultRenderer={resultRenderer}\n            value={searchTerm}\n            showNoResults={false}\n        />\n    );\n};\n\nexport default SearchBar;\n\n// // //////////////////////////////////////////////////////////\n// // Usage\n// function App() {\n//     const [searchTerm, setSearchTerm] = useState('');\n//     const [results, setResults] = useState([]);\n//     const [isSearching, setIsSearching] = useState(false);\n//     const debouncedSearchTerm = useDebounce(searchTerm, 500);\n\n//     // Effect for API call\n//     useEffect(\n//         () => {\n//             if (debouncedSearchTerm) {\n//                 setIsSearching(true);\n//                 searchCharacters(debouncedSearchTerm).then(results => {\n//                     setIsSearching(false);\n//                     setResults(results);\n//                 });\n//             } else {\n//                 setResults([]);\n//             }\n//         },\n//         [debouncedSearchTerm] // Only call effect if debounced search term changes\n//     );\n\n//     return (\n//         <div>\n//             <input\n//                 placeholder=\"Search Marvel Comics\"\n//                 onChange={e => setSearchTerm(e.target.value)}\n//             />\n\n//             {isSearching && <div>Searching ...</div>}\n\n//             {results.map(result => (\n//                 <div key={result.id}>\n//                     <h4>{result.title}</h4>\n//                     <img\n//                         src={`${result.thumbnail.path}/portrait_incredible.${\n//                             result.thumbnail.extension\n//                         }`}\n//                     />\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// }\n\n// // API search function\n// function searchCharacters(search) {\n//     const apiKey = 'f9dfb1e8d466d36c27850bedd2047687';\n//     return fetch(\n//         `https://gateway.marvel.com/v1/public/comics?apikey=${apiKey}&titleStartsWith=${search}`,\n//         {\n//             method: 'GET'\n//         }\n//     )\n//         .then(r => r.json())\n//         .then(r => r.data.results)\n//         .catch(error => {\n//             console.error(error);\n//             return [];\n//         });\n// }\n\n// // Hook\nfunction useDebounce(value, delay) {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(\n        () => {\n            // Update debounced value after delay\n            const handler = setTimeout(() => {\n                setDebouncedValue(value);\n            }, delay);\n            return () => {\n                clearTimeout(handler);\n            };\n        },\n        [value] // Only re-call effect if value or delay changes\n    );\n\n    return debouncedValue;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AANA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AACA;AAiBA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAjBA;AACA;AAoaA;AACA;;;;A","sourceRoot":""}
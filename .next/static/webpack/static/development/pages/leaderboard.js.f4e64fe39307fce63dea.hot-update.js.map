{"version":3,"file":"static/webpack/static/development/pages/leaderboard.js.f4e64fe39307fce63dea.hot-update.js","sources":["webpack:///./pages/leaderboard.js"],"sourcesContent":["import React, { Component, useState } from 'react';\nimport _ from 'lodash';\nimport copy from 'copy-to-clipboard';\nimport useClipboard from '../src/hooks/useCopyClipboard';\n\nimport {\n    Container,\n    Grid,\n    Icon,\n    Popup,\n    Button,\n    Input,\n    Header,\n    Label,\n    Divider,\n    Card,\n    Menu\n} from 'semantic-ui-react';\nimport SearchBar from '../src/components/SearchBar';\nimport { getProfileByUsername, getProfileByUid } from '../src/actions';\n\nimport Board from '../src/components/Board';\n\n// show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n// share / reset / refresh buttons\n\nconst CopyLinkPopup = ({ children }) => {\n    const [isCopied, setCopied] = useClipboard('Text to copy');\n    const [link, setLink] = useState(location.href);\n    console.log(children);\n    return (\n        <Popup\n            style={{ width: '100%' }}\n            hideOnScroll\n            hoverable\n            wide\n            position=\"top center\"\n            // onClose={() => setCopied('')}\n            content={\n                <Grid textAlign=\"center\">\n                    <Grid.Row textAlign=\"left\">\n                        <Grid.Column textAlign=\"left\">\n                            <Header as=\"h5\" color={isCopied ? 'green' : 'grey'}>\n                                {isCopied ? 'Link copied!' : 'Link to custom leaderboard: '}\n                            </Header>\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row style={{ paddingTop: '0px' }}>\n                        <Grid.Column>\n                            <Input value={link} />\n                            <Button\n                                icon={isCopied ? 'check' : 'linkify'}\n                                color={isCopied ? 'green' : 'grey'}\n                                compact\n                                onClick={() => setCopied(link)}\n                            />\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            }\n            trigger={children}\n        />\n    );\n};\n\nclass Leaderboard extends Component {\n    static async getInitialProps({ query }) {\n        let { usernames } = query;\n        const { mode } = query;\n        if (!usernames) return { usernames: [] };\n        // Format into Array\n        usernames = typeof usernames == 'string' ? [usernames] : usernames;\n        return { usernames, mode };\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: [],\n            mode: props.mode || 'solo',\n            columns: [],\n            column: null,\n            direction: null,\n            loading: null,\n            url: '',\n            isCopied: false\n        };\n    }\n\n    componentDidMount() {\n        this.setState({ url: location.href });\n        this.initColumns();\n\n        const { usernames } = this.props;\n        if (usernames.length) {\n            this.initPlayers(usernames);\n        }\n    }\n\n    handleCopyClipboard = url => {\n        const isCopied = copy(url);\n        this.setState({ isCopied });\n    };\n\n    initColumns = () => {\n        this.setState({\n            columns: [\n                {\n                    header: 'Player',\n                    accessor: 'username',\n                    sort: this.handleSort('username')\n                },\n                {\n                    header: 'K/D',\n                    accessor: 'kd',\n                    sort: this.handleSort('kd')\n                },\n                {\n                    header: 'Win %',\n                    accessor: 'winrate',\n                    sort: this.handleSort('winrate')\n                },\n                {\n                    header: 'Kills',\n                    accessor: 'kills',\n\n                    sort: this.handleSort('kills')\n                },\n                {\n                    header: 'Wins',\n                    accessor: 'placetop1',\n                    sort: this.handleSort('placetop1')\n                }\n            ]\n        });\n    };\n\n    initPlayers = async usernames => {\n        let initialPlayers = [];\n        // Start load player stats\n        this.setState({\n            loading: true,\n            players: new Array(usernames.length).fill(null)\n        });\n\n        initialPlayers = await Promise.all(\n            usernames.map(username => getProfileByUsername(username))\n        );\n\n        // End load player stats\n        this.setState(\n            {\n                players: [...initialPlayers],\n                loading: false\n            },\n            () => this.updateURL()\n        );\n    };\n\n    addPlayer = async player => {\n        const { players, column, mode, direction } = this.state;\n        // Check if already added to board\n        if (this.isPlayerSelected(player.uid)) return;\n        // Not duplicate, get profile and add\n        const newPlayer = await getProfileByUid(player.uid);\n        let updatedPlayers = [...players, newPlayer];\n\n        // if pre-sorted then apply sort setting to updated players\n        if (column !== null) {\n            updatedPlayers = this.sortPlayers(updatedPlayers, column, mode, direction);\n        }\n\n        this.setState({ players: updatedPlayers }, () => this.updateURL());\n    };\n\n    removePlayer = index => {\n        const { players } = this.state;\n        const updatedPlayers = players.filter((player, i) => i !== index);\n        this.setState({ players: updatedPlayers }, () => this.updateURL());\n    };\n\n    changeMode = direction => {\n        const { mode } = this.state;\n        let nextMode = '';\n        switch (mode) {\n            case 'solo':\n                nextMode = direction === 'forward' ? 'duo' : 'squad';\n                break;\n            case 'duo':\n                nextMode = direction === 'forward' ? 'squad' : 'solo';\n                break;\n            case 'squad':\n                nextMode = direction === 'forward' ? 'solo' : 'duo';\n                break;\n            default:\n                break;\n        }\n        this.setState({ mode: nextMode }, () => this.updateURL());\n    };\n\n    handleSort = accessor => () => {\n        const { column, players, direction, mode } = this.state;\n\n        // Reverse order if direction set, else default to desc\n        let sortDirection = direction === 'desc' ? 'asc' : 'desc';\n        let sortedColumn = column;\n\n        // Default to desc order on column switch\n        if (column !== accessor) {\n            // Default to asc order if username column\n            sortDirection = accessor == 'username' ? 'asc' : 'desc';\n            // Set sorted column name\n            sortedColumn = accessor;\n        }\n        // Sort players\n        const sortedPlayers = this.sortPlayers(players, accessor, mode, sortDirection);\n        this.setState(\n            {\n                column: sortedColumn,\n                players: sortedPlayers,\n                direction: sortDirection\n            },\n            () => this.updateURL()\n        );\n    };\n\n    sortPlayers = (players, accessor, mode, direction) => {\n        return accessor == 'username'\n            ? _.orderBy(this.state.players, [o => o.username.toLowerCase()], [direction])\n            : _.orderBy(players, o => o.stats[`${accessor}_${mode}`], [direction]);\n    };\n\n    isPlayerSelected = uid => {\n        const { players } = this.state;\n        return players.find(player => player.uid === uid);\n    };\n\n    updateURL = () => {\n        const { router } = this.props;\n        const { players, mode } = this.state;\n        const usernames = players.map(player => player.username);\n        router.replace({\n            pathname: '/leaderboard',\n            query: { mode: mode, usernames: usernames },\n            options: { shallow: true }\n        });\n        this.setState({ url: location.href });\n    };\n\n    render() {\n        const { columns, mode, players, loading, url, isCopied } = this.state;\n\n        return (\n            <Container\n                text\n                textAlign=\"center\"\n                style={{\n                    paddingTop: '100px',\n                    paddingBottom: '100px'\n                    // height: '100%'\n                }}\n            >\n                <Grid centered textAlign=\"center\">\n                    <Grid.Row>\n                        <h3>Leaderboards</h3>\n                    </Grid.Row>\n                    <Grid.Row columns=\"1\">\n                        <Grid.Column\n                            mobile=\"16\"\n                            computer=\"6\"\n                            largeScreen=\"6\"\n                            tablet=\"6\"\n                            widescreen=\"6\"\n                        >\n                            <SearchBar handleResultSelect={this.addPlayer} />\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row style={{ paddingTop: '0px' }} columns=\"3\" divided>\n                        <Grid.Column textAlign=\"center\" floated=\"right\" className=\"compact\">\n                            <CopyLinkPopup>\n                                <span style={{ textDecoration: 'underline' }}>\n                                    Share <Icon name=\"share\" />\n                                </span>\n                            </CopyLinkPopup>\n                            {/* <Popup\n                                style={{ width: '100%' }}\n                                hideOnScroll\n                                hoverable\n                                wide\n                                position=\"top center\"\n                                onClose={() => this.setState({ isCopied: false })}\n                                content={\n                                    <Grid textAlign=\"center\">\n                                        <Grid.Row textAlign=\"left\">\n                                            <Grid.Column textAlign=\"left\">\n                                                <Header as=\"h5\" color={isCopied ? 'green' : 'grey'}>\n                                                    {isCopied\n                                                        ? 'Link copied!'\n                                                        : 'Link to custom leaderboard: '}\n                                                </Header>\n                                            </Grid.Column>\n                                        </Grid.Row>\n                                        <Grid.Row style={{ paddingTop: '0px' }}>\n                                            <Grid.Column>\n                                                <Input value={url} />\n                                                <Button\n                                                    icon={isCopied ? 'check' : 'linkify'}\n                                                    color={isCopied ? 'green' : 'grey'}\n                                                    compact\n                                                    onClick={() => this.handleCopyClipboard(url)}\n                                                />\n                                            </Grid.Column>\n                                        </Grid.Row>\n                                    </Grid>\n                                }\n                                trigger={\n                                    <span style={{ textDecoration: 'underline' }}>\n                                        Share <Icon name=\"share\" />\n                                    </span>\n                                }\n                            /> */}\n                        </Grid.Column>\n                        <Grid.Column textAlign=\"center\" className=\"compact\">\n                            <span>\n                                Refresh <Icon name=\"sync alternate\" />\n                            </span>\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row>\n                        <Menu>\n                            <Menu.Item as=\"a\">\n                                <Icon name=\"share\" /> Share\n                            </Menu.Item>\n                            <Menu.Item as=\"a\">\n                                <Icon name=\"sync alternate\" /> Refresh\n                            </Menu.Item>\n                        </Menu>\n                    </Grid.Row>\n\n                    <Grid.Row>\n                        <Grid.Column textAlign=\"center\">\n                            <Board\n                                columns={columns}\n                                mode={mode}\n                                players={players}\n                                removePlayer={this.removePlayer}\n                                handleModeChange={this.changeMode}\n                                loading={loading}\n                            />\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Container>\n        );\n    }\n}\n\nexport default Leaderboard;\n"],"mappings":"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","sourceRoot":""}
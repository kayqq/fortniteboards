{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { Container, Grid, Icon, Table, Header, Responsive } from 'semantic-ui-react';\nimport SearchBar from \"../src/components/SearchBar\";\nimport { fetchByUsername, getProfile } from \"../src/actions\";\nimport Board from \"../src/components/board\"; // show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n\nvar Leaderboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Leaderboard, _Component);\n\n  _createClass(Leaderboard, null, [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var store, query, pathname, asPath, req, usernames, initialPlayers, players;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                store = _ref.store, query = _ref.query, pathname = _ref.pathname, asPath = _ref.asPath, req = _ref.req;\n                usernames = query.usernames;\n                initialPlayers = [];\n\n                if (usernames) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  initialPlayers: initialPlayers\n                });\n\n              case 5:\n                players = typeof usernames == 'string' ? [usernames] : usernames;\n                _context.next = 8;\n                return _Promise.all(players.map(function (player) {\n                  return getProfile(player);\n                }));\n\n              case 8:\n                initialPlayers = _context.sent;\n                return _context.abrupt(\"return\", {\n                  initialPlayers: initialPlayers\n                });\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  function Leaderboard(props) {\n    var _this;\n\n    _classCallCheck(this, Leaderboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Leaderboard).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"addPlayer\",\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(username) {\n        var _this$state, players, column, mode, direction, newPlayer, updatedPlayers;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$state = _this.state, players = _this$state.players, column = _this$state.column, mode = _this$state.mode, direction = _this$state.direction;\n                _context2.next = 3;\n                return getProfile(username);\n\n              case 3:\n                newPlayer = _context2.sent;\n                updatedPlayers = [].concat(_toConsumableArray(players), [newPlayer]); // if previous sorted then apply sort setting to updated players\n\n                if (column !== null) {\n                  updatedPlayers = _this.sortPlayers(updatedPlayers, column, mode, direction);\n                }\n\n                _this.setState({\n                  players: updatedPlayers\n                }, function () {\n                  return _this.updateURL();\n                });\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"removePlayer\", function (index) {\n      var players = _this.state.players;\n      var updatedPlayers = players.filter(function (player, i) {\n        return i !== index;\n      });\n\n      _this.setState({\n        players: updatedPlayers\n      }, function () {\n        return _this.updateURL();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"changeMode\", function (direction) {\n      var mode = _this.state.mode;\n      var nextMode = '';\n\n      switch (mode) {\n        case 'solo':\n          nextMode = direction === 'forward' ? 'duo' : 'squad';\n          break;\n\n        case 'duo':\n          nextMode = direction === 'forward' ? 'squad' : 'solo';\n          break;\n\n        case 'squad':\n          nextMode = direction === 'forward' ? 'solo' : 'duo';\n          break;\n\n        default:\n          break;\n      }\n\n      _this.setState({\n        mode: nextMode\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"isPlayerSelected\", function (username) {\n      var players = _this.state.players;\n      return players.find(function (player) {\n        return player.username === username;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleSort\", function (accessor) {\n      return function () {\n        var _this$state2 = _this.state,\n            column = _this$state2.column,\n            players = _this$state2.players,\n            direction = _this$state2.direction,\n            mode = _this$state2.mode; // Reverse order if direction set, else default to desc\n\n        var sortDirection = direction === 'desc' ? 'asc' : 'desc';\n        var sortedColumn = column; // First click default setting\n\n        if (column !== accessor) {\n          // Default to desc order, unless username column\n          sortDirection = accessor == 'username' ? 'asc' : 'desc';\n          sortedColumn = accessor; // Set sorted column name\n        } // Sort players\n\n\n        var sortedPlayers = _this.sortPlayers(players, accessor, mode, sortDirection);\n\n        _this.setState({\n          column: sortedColumn,\n          players: sortedPlayers,\n          direction: sortDirection\n        }, function () {\n          return _this.updateURL();\n        });\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"sortPlayers\", function (players, accessor, mode, direction) {\n      return accessor == 'username' ? _.orderBy(_this.state.players, [function (o) {\n        return o.username.toLowerCase();\n      }], [direction]) : _.orderBy(players, function (o) {\n        return o.stats[\"\".concat(accessor, \"_\").concat(mode)];\n      }, [direction]);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"updateURL\", function () {\n      var router = _this.props.router;\n      var players = _this.state.players;\n      var usernames = players.map(function (player) {\n        return player.username;\n      });\n      router.push({\n        pathname: '/leaderboard',\n        query: {\n          usernames: usernames\n        },\n        options: {\n          shallow: true\n        }\n      });\n    });\n\n    _this.state = {\n      players: [],\n      mode: 'solo',\n      columns: [],\n      column: null,\n      direction: null\n    };\n    return _this;\n  }\n\n  _createClass(Leaderboard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var initialPlayers = this.props.initialPlayers;\n      var players = this.state.players;\n      this.setState({\n        columns: [{\n          header: 'Player',\n          accessor: 'username',\n          sort: this.handleSort('username')\n        }, {\n          header: 'K/D',\n          accessor: 'kd',\n          sort: this.handleSort('kd')\n        }, {\n          header: 'Win %',\n          accessor: 'winrate',\n          sort: this.handleSort('winrate')\n        }, {\n          header: 'Kills',\n          accessor: 'kills',\n          sort: this.handleSort('kills')\n        }, {\n          header: 'Wins',\n          accessor: 'placetop1',\n          sort: this.handleSort('placetop1')\n        }],\n        players: [].concat(_toConsumableArray(players), _toConsumableArray(initialPlayers))\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state3 = this.state,\n          columns = _this$state3.columns,\n          mode = _this$state3.mode,\n          players = _this$state3.players;\n      var _this$props = this.props,\n          searchResults = _this$props.searchResults,\n          fetchByUsername = _this$props.fetchByUsername;\n\n      var debouncedfetchByUsername = _.debounce(fetchByUsername, 500, {\n        maxWait: 1000\n      });\n\n      return React.createElement(Table, {\n        sortable: true,\n        unstackable: true,\n        compact: true,\n        size: \"small\",\n        style: {\n          backgroundColor: '#2c3c57',\n          color: 'white'\n        }\n      }, React.createElement(Table.Header, null, React.createElement(Table.Row, null, React.createElement(Responsive, {\n        as: Table.HeaderCell,\n        minWidth: Responsive.onlyMobile.maxWidth,\n        textAlign: \"center\",\n        mobile: \"1\",\n        style: {\n          backgroundColor: '#2c3c57',\n          color: 'white'\n        }\n      }, React.createElement(Header, {\n        size: \"tiny\"\n      }, React.createElement(Header.Subheader, {\n        as: \"h6\",\n        style: {\n          color: '#92a2bd'\n        }\n      }, \"#\")), ' '), React.createElement(Table.HeaderCell, {\n        style: {\n          backgroundColor: '#2c3c57',\n          color: 'white'\n        } // sorted={column === 'username' ? direction : null}\n        ,\n        onClick: this.handleSort(function () {\n          return _.sortBy(players, function (o) {\n            return o.username;\n          });\n        }, 'username')\n      }, React.createElement(Header, {\n        size: \"tiny\"\n      }, React.createElement(Header.Subheader, {\n        as: \"h6\",\n        style: {\n          color: '#92a2bd'\n        }\n      }, \"Player\"))), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        style: {\n          backgroundColor: '#2c3c57',\n          color: 'white'\n        } // sorted={column === 'kd' ? direction : null}\n        ,\n        onClick: this.handleSort(function () {\n          return _.sortBy(players, function (o) {\n            return o.stats[\"kd_\".concat(mode)];\n          });\n        }, 'kd')\n      }, React.createElement(Header, {\n        size: \"tiny\"\n      }, React.createElement(Header.Subheader, {\n        as: \"h6\",\n        style: {\n          color: '#92a2bd'\n        }\n      }, \"K/D\"))), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        style: {\n          backgroundColor: '#2c3c57',\n          color: 'white'\n        } // sorted={column === 'winrate' ? direction : null}\n        ,\n        onClick: this.handleSort(function () {\n          return _.sortBy(players, function (o) {\n            return o.stats[\"winrate_\".concat(mode)];\n          });\n        }, 'winrate')\n      }, React.createElement(Header, {\n        size: \"tiny\"\n      }, React.createElement(Header.Subheader, {\n        as: \"h6\",\n        style: {\n          color: '#92a2bd'\n        }\n      }, \"Win %\"))), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        style: {\n          backgroundColor: '#2c3c57',\n          color: 'white'\n        } // sorted={column === 'kills' ? direction : null}\n        ,\n        onClick: this.handleSort(function () {\n          return _.sortBy(players, function (o) {\n            return o.stats[\"kills_\".concat(mode)];\n          });\n        }, 'kills')\n      }, React.createElement(Header, {\n        size: \"tiny\"\n      }, React.createElement(Header.Subheader, {\n        as: \"h6\",\n        style: {\n          color: '#92a2bd'\n        }\n      }, \"Kills\"))), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        style: {\n          backgroundColor: '#2c3c57',\n          color: 'white'\n        } // sorted={column === 'wins' ? direction : null}\n        ,\n        onClick: this.handleSort(function () {\n          return _.sortBy(players, function (o) {\n            return o.stats[\"placetop1_\".concat(mode)];\n          });\n        }, 'wins')\n      }, React.createElement(Header, {\n        size: \"tiny\"\n      }, React.createElement(Header.Subheader, {\n        as: \"h6\",\n        style: {\n          color: '#92a2bd'\n        }\n      }, \"Wins\"))))), React.createElement(Table.Body, null, _.map(players, function (player, index) {\n        return React.createElement(Table.Row, {\n          key: player.username,\n          verticalAlign: \"top\"\n        }, React.createElement(Responsive, {\n          as: Table.Cell,\n          minWidth: Responsive.onlyMobile.maxWidth,\n          textAlign: \"center\",\n          mobile: \"1\"\n        }, React.createElement(Header, {\n          as: \"h6\",\n          style: {\n            color: '#92a2bd'\n          }\n        }, index + 1)), React.createElement(Table.Cell, {\n          singleLine: true\n        }, React.createElement(Header, {\n          as: \"h6\",\n          style: {\n            color: 'white'\n          }\n        }, player.username)), React.createElement(Table.Cell, {\n          singleLine: true,\n          textAlign: \"center\"\n        }, React.createElement(Header, {\n          as: \"h5\",\n          style: {\n            color: 'white'\n          }\n        }, player.stats[\"kd_\".concat(mode)])), React.createElement(Table.Cell, {\n          singleLine: true,\n          textAlign: \"center\"\n        }, React.createElement(Header, {\n          as: \"h5\",\n          style: {\n            color: 'white'\n          }\n        }, player.stats[\"winrate_\".concat(mode)])), React.createElement(Table.Cell, {\n          singleLine: true,\n          textAlign: \"center\"\n        }, React.createElement(Header, {\n          as: \"h5\",\n          style: {\n            color: 'white'\n          }\n        }, player.stats[\"kills_\".concat(mode)])), React.createElement(Table.Cell, {\n          collapsing: true,\n          singleLine: true,\n          textAlign: \"center\"\n        }, React.createElement(Header, {\n          as: \"5\",\n          style: {\n            color: 'white'\n          }\n        }, player.stats[\"placetop1_\".concat(mode)])), React.createElement(Table.Cell, {\n          singleLine: true,\n          textAlign: \"center\",\n          icon: \"trash alternate outline\",\n          style: {\n            color: 'red',\n            fontSize: '12px',\n            paddingLeft: '0px'\n          }\n        }));\n      }))) // <Container\n      //     text\n      //     textAlign=\"center\"\n      //     style={{\n      //         paddingTop: '200px',\n      //         paddingBottom: '100px',\n      //         height: '100%'\n      //     }}\n      // >\n      //     <h1>Board</h1>\n      //     <Grid columns=\"1\" centered textAlign=\"center\">\n      //         <Grid.Column mobile=\"16\" computer=\"6\" largeScreen=\"6\" tablet=\"6\" widescreen=\"6\">\n      //             <Container>\n      //                 <SearchBar\n      //                     checkDuplicateSelect={this.isPlayerSelected}\n      //                     handleResultSelect={this.addPlayer}\n      //                     fetchByUsername={debouncedfetchByUsername}\n      //                     results={searchResults}\n      //                 />\n      //             </Container>\n      //             <Icon name=\"share square\" />\n      //         </Grid.Column>\n      //         <Grid.Column textAlign=\"center\">\n      //             <Board\n      //                 columns={columns}\n      //                 mode={mode}\n      //                 players={players}\n      //                 removePlayer={this.removePlayer}\n      //                 handleModeChange={this.changeMode}\n      //             />\n      //             <hr />\n      //         </Grid.Column>\n      //     </Grid>\n      // </Container>\n      ;\n    }\n  }]);\n\n  return Leaderboard;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    searchResults: state.search.searchResults\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    fetchByUsername: fetchByUsername\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Leaderboard);","map":{"version":3,"sources":["/Users/kenny/Documents/GitHub/fortniteboards/pages/leaderboard.js"],"names":["React","Component","bindActionCreators","connect","_","Container","Grid","Icon","Table","Header","Responsive","SearchBar","fetchByUsername","getProfile","Board","Leaderboard","store","query","pathname","asPath","req","usernames","initialPlayers","players","all","map","player","props","username","state","column","mode","direction","newPlayer","updatedPlayers","sortPlayers","setState","updateURL","index","filter","i","nextMode","find","accessor","sortDirection","sortedColumn","sortedPlayers","orderBy","o","toLowerCase","stats","router","push","options","shallow","columns","header","sort","handleSort","searchResults","debouncedfetchByUsername","debounce","maxWait","backgroundColor","color","HeaderCell","onlyMobile","maxWidth","sortBy","Cell","fontSize","paddingLeft","mapStateToProps","search","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\n\nimport { Container, Grid, Icon, Table, Header, Responsive } from 'semantic-ui-react';\nimport SearchBar from '../src/components/SearchBar';\nimport { fetchByUsername, getProfile } from '../src/actions';\n\nimport Board from '../src/components/board';\n\n// show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n\nclass Leaderboard extends Component {\n    static async getInitialProps({ store, query, pathname, asPath, req }) {\n        const { usernames } = query;\n        let initialPlayers = [];\n\n        if (!usernames) return { initialPlayers };\n\n        const players = typeof usernames == 'string' ? [usernames] : usernames;\n        initialPlayers = await Promise.all(players.map(player => getProfile(player)));\n\n        return { initialPlayers };\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: [],\n            mode: 'solo',\n            columns: [],\n            column: null,\n            direction: null\n        };\n    }\n\n    componentDidMount() {\n        const { initialPlayers } = this.props;\n        const { players } = this.state;\n        this.setState({\n            columns: [\n                {\n                    header: 'Player',\n                    accessor: 'username',\n                    sort: this.handleSort('username')\n                },\n                {\n                    header: 'K/D',\n                    accessor: 'kd',\n                    sort: this.handleSort('kd')\n                },\n                {\n                    header: 'Win %',\n                    accessor: 'winrate',\n                    sort: this.handleSort('winrate')\n                },\n                {\n                    header: 'Kills',\n                    accessor: 'kills',\n\n                    sort: this.handleSort('kills')\n                },\n                {\n                    header: 'Wins',\n                    accessor: 'placetop1',\n                    sort: this.handleSort('placetop1')\n                }\n            ],\n            players: [...players, ...initialPlayers]\n        });\n    }\n\n    addPlayer = async username => {\n        const { players, column, mode, direction } = this.state;\n        const newPlayer = await getProfile(username);\n        let updatedPlayers = [...players, newPlayer];\n\n        // if previous sorted then apply sort setting to updated players\n        if (column !== null) {\n            updatedPlayers = this.sortPlayers(updatedPlayers, column, mode, direction);\n        }\n\n        this.setState({ players: updatedPlayers }, () => this.updateURL());\n    };\n\n    removePlayer = index => {\n        const { players } = this.state;\n        const updatedPlayers = players.filter((player, i) => i !== index);\n        this.setState({ players: updatedPlayers }, () => this.updateURL());\n    };\n\n    changeMode = direction => {\n        const { mode } = this.state;\n        let nextMode = '';\n        switch (mode) {\n            case 'solo':\n                nextMode = direction === 'forward' ? 'duo' : 'squad';\n                break;\n            case 'duo':\n                nextMode = direction === 'forward' ? 'squad' : 'solo';\n                break;\n            case 'squad':\n                nextMode = direction === 'forward' ? 'solo' : 'duo';\n                break;\n            default:\n                break;\n        }\n        this.setState({ mode: nextMode });\n    };\n\n    isPlayerSelected = username => {\n        const { players } = this.state;\n        return players.find(player => player.username === username);\n    };\n\n    handleSort = accessor => () => {\n        const { column, players, direction, mode } = this.state;\n        // Reverse order if direction set, else default to desc\n        let sortDirection = direction === 'desc' ? 'asc' : 'desc';\n        let sortedColumn = column;\n        // First click default setting\n        if (column !== accessor) {\n            // Default to desc order, unless username column\n            sortDirection = accessor == 'username' ? 'asc' : 'desc';\n            sortedColumn = accessor; // Set sorted column name\n        }\n        // Sort players\n        const sortedPlayers = this.sortPlayers(players, accessor, mode, sortDirection);\n\n        this.setState(\n            {\n                column: sortedColumn,\n                players: sortedPlayers,\n                direction: sortDirection\n            },\n            () => this.updateURL()\n        );\n    };\n\n    sortPlayers = (players, accessor, mode, direction) => {\n        return accessor == 'username'\n            ? _.orderBy(this.state.players, [o => o.username.toLowerCase()], [direction])\n            : _.orderBy(players, o => o.stats[`${accessor}_${mode}`], [direction]);\n    };\n\n    updateURL = () => {\n        const { router } = this.props;\n        const { players } = this.state;\n        const usernames = players.map(player => player.username);\n        router.push({\n            pathname: '/leaderboard',\n            query: { usernames: usernames },\n            options: { shallow: true }\n        });\n    };\n\n    render() {\n        const { columns, mode, players } = this.state;\n        const { searchResults, fetchByUsername } = this.props;\n        const debouncedfetchByUsername = _.debounce(fetchByUsername, 500, {\n            maxWait: 1000\n        });\n        return (\n            <Table\n                sortable\n                unstackable\n                compact\n                size=\"small\"\n                style={{ backgroundColor: '#2c3c57', color: 'white' }}\n            >\n                <Table.Header>\n                    <Table.Row>\n                        <Responsive\n                            as={Table.HeaderCell}\n                            minWidth={Responsive.onlyMobile.maxWidth}\n                            textAlign=\"center\"\n                            mobile=\"1\"\n                            style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                        >\n                            <Header size=\"tiny\">\n                                <Header.Subheader\n                                    as=\"h6\"\n                                    style={{\n                                        color: '#92a2bd'\n                                    }}\n                                >\n                                    #\n                                </Header.Subheader>\n                            </Header>{' '}\n                        </Responsive>\n                        <Table.HeaderCell\n                            style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                            // sorted={column === 'username' ? direction : null}\n                            onClick={this.handleSort(\n                                () => _.sortBy(players, o => o.username),\n                                'username'\n                            )}\n                        >\n                            <Header size=\"tiny\">\n                                <Header.Subheader\n                                    as=\"h6\"\n                                    style={{\n                                        color: '#92a2bd'\n                                    }}\n                                >\n                                    Player\n                                </Header.Subheader>\n                            </Header>\n                        </Table.HeaderCell>\n                        <Table.HeaderCell\n                            textAlign=\"center\"\n                            style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                            // sorted={column === 'kd' ? direction : null}\n                            onClick={this.handleSort(\n                                () => _.sortBy(players, o => o.stats[`kd_${mode}`]),\n                                'kd'\n                            )}\n                        >\n                            <Header size=\"tiny\">\n                                <Header.Subheader\n                                    as=\"h6\"\n                                    style={{\n                                        color: '#92a2bd'\n                                    }}\n                                >\n                                    K/D\n                                </Header.Subheader>\n                            </Header>\n                        </Table.HeaderCell>\n                        <Table.HeaderCell\n                            textAlign=\"center\"\n                            style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                            // sorted={column === 'winrate' ? direction : null}\n                            onClick={this.handleSort(\n                                () => _.sortBy(players, o => o.stats[`winrate_${mode}`]),\n                                'winrate'\n                            )}\n                        >\n                            <Header size=\"tiny\">\n                                <Header.Subheader\n                                    as=\"h6\"\n                                    style={{\n                                        color: '#92a2bd'\n                                    }}\n                                >\n                                    Win %\n                                </Header.Subheader>\n                            </Header>\n                        </Table.HeaderCell>\n                        <Table.HeaderCell\n                            textAlign=\"center\"\n                            style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                            // sorted={column === 'kills' ? direction : null}\n                            onClick={this.handleSort(\n                                () => _.sortBy(players, o => o.stats[`kills_${mode}`]),\n                                'kills'\n                            )}\n                        >\n                            <Header size=\"tiny\">\n                                <Header.Subheader\n                                    as=\"h6\"\n                                    style={{\n                                        color: '#92a2bd'\n                                    }}\n                                >\n                                    Kills\n                                </Header.Subheader>\n                            </Header>\n                        </Table.HeaderCell>\n                        <Table.HeaderCell\n                            textAlign=\"center\"\n                            style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                            // sorted={column === 'wins' ? direction : null}\n                            onClick={this.handleSort(\n                                () => _.sortBy(players, o => o.stats[`placetop1_${mode}`]),\n                                'wins'\n                            )}\n                        >\n                            <Header size=\"tiny\">\n                                <Header.Subheader\n                                    as=\"h6\"\n                                    style={{\n                                        color: '#92a2bd'\n                                    }}\n                                >\n                                    Wins\n                                </Header.Subheader>\n                            </Header>\n                        </Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {_.map(players, (player, index) => (\n                        <Table.Row key={player.username} verticalAlign=\"top\">\n                            <Responsive\n                                as={Table.Cell}\n                                minWidth={Responsive.onlyMobile.maxWidth}\n                                textAlign=\"center\"\n                                mobile=\"1\"\n                            >\n                                <Header as=\"h6\" style={{ color: '#92a2bd' }}>\n                                    {index + 1}\n                                </Header>\n                            </Responsive>\n                            <Table.Cell singleLine>\n                                <Header as=\"h6\" style={{ color: 'white' }}>\n                                    {player.username}\n\n                                    {/* <Header.Subheader size=\"tiny\" style={{ color: '#92a2bd' }}>\n                                        {player.stats[`matchesplayed_${mode}`]} Matches\n                                    </Header.Subheader> */}\n                                </Header>\n                            </Table.Cell>\n                            <Table.Cell singleLine textAlign=\"center\">\n                                <Header as=\"h5\" style={{ color: 'white' }}>\n                                    {player.stats[`kd_${mode}`]}\n                                </Header>\n                            </Table.Cell>\n                            <Table.Cell singleLine textAlign=\"center\">\n                                <Header as=\"h5\" style={{ color: 'white' }}>\n                                    {player.stats[`winrate_${mode}`]}\n                                </Header>\n                            </Table.Cell>\n                            <Table.Cell singleLine textAlign=\"center\">\n                                <Header as=\"h5\" style={{ color: 'white' }}>\n                                    {player.stats[`kills_${mode}`]}\n                                </Header>\n                            </Table.Cell>\n                            <Table.Cell collapsing singleLine textAlign=\"center\">\n                                <Header as=\"5\" style={{ color: 'white' }}>\n                                    {player.stats[`placetop1_${mode}`]}\n                                </Header>\n                            </Table.Cell>\n                            <Table.Cell\n                                singleLine\n                                textAlign=\"center\"\n                                icon=\"trash alternate outline\"\n                                style={{\n                                    color: 'red',\n                                    fontSize: '12px',\n                                    paddingLeft: '0px'\n                                }}\n                            />\n                        </Table.Row>\n                    ))}\n                </Table.Body>\n            </Table>\n            // <Container\n            //     text\n            //     textAlign=\"center\"\n            //     style={{\n            //         paddingTop: '200px',\n            //         paddingBottom: '100px',\n            //         height: '100%'\n            //     }}\n            // >\n            //     <h1>Board</h1>\n            //     <Grid columns=\"1\" centered textAlign=\"center\">\n            //         <Grid.Column mobile=\"16\" computer=\"6\" largeScreen=\"6\" tablet=\"6\" widescreen=\"6\">\n            //             <Container>\n            //                 <SearchBar\n            //                     checkDuplicateSelect={this.isPlayerSelected}\n            //                     handleResultSelect={this.addPlayer}\n            //                     fetchByUsername={debouncedfetchByUsername}\n            //                     results={searchResults}\n            //                 />\n            //             </Container>\n            //             <Icon name=\"share square\" />\n            //         </Grid.Column>\n            //         <Grid.Column textAlign=\"center\">\n            //             <Board\n            //                 columns={columns}\n            //                 mode={mode}\n            //                 players={players}\n            //                 removePlayer={this.removePlayer}\n            //                 handleModeChange={this.changeMode}\n            //             />\n            //             <hr />\n\n            //         </Grid.Column>\n            //     </Grid>\n            // </Container>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        searchResults: state.search.searchResults\n    };\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators({ fetchByUsername }, dispatch);\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Leaderboard);\n"]},"metadata":{},"sourceType":"module"}
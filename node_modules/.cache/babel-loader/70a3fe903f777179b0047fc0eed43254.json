{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { Container, Grid } from 'semantic-ui-react';\nimport SearchBar from \"../src/components/SearchBar\";\nimport { fetchByUsername, getProfile } from \"../src/actions\";\nimport Board from \"../src/components/board\"; // show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n\nvar Leaderboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Leaderboard, _Component);\n\n  _createClass(Leaderboard, null, [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(_ref) {\n        var store, query, pathname, asPath, req, usernames, profiles;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                store = _ref.store, query = _ref.query, pathname = _ref.pathname, asPath = _ref.asPath, req = _ref.req;\n                // spread into array for mapping\n                usernames = _toConsumableArray(query.usernames);\n                profiles = usernames.map(\n                /*#__PURE__*/\n                function () {\n                  var _ref2 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee(username) {\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return getProfile(username);\n\n                          case 2:\n                            return _context.abrupt(\"return\", _context.sent);\n\n                          case 3:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, this);\n                  }));\n\n                  return function (_x2) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }());\n\n                if (req) {// called on server\n                } else {\n                  // called on client\n                  console.log(this.state);\n                } // const profile = (await getProfile(query.username)) || {};\n                // if (!profile.uid) {\n                //     const err = new Error();\n                //     err.code = 'ENOENT';\n                //     throw err;\n                // }\n                // return { profile };\n                // console.log(profiles);\n\n\n                return _context2.abrupt(\"return\", {\n                  profiles: profiles\n                });\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  function Leaderboard(props) {\n    var _this;\n\n    _classCallCheck(this, Leaderboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Leaderboard).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleResultSelect\",\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(username, resetSearchFn) {\n        var players, router, newPlayer, isPlayerSelected;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                isPlayerSelected = function _ref4(username, players) {\n                  players.find(function (player) {\n                    return player.username === username;\n                  });\n                };\n\n                players = _this.state.players;\n                router = _this.props.router; // Reset component if username is already in table\n\n                if (!isPlayerSelected(username, players)) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", resetSearchFn());\n\n              case 5:\n                _context3.next = 7;\n                return getProfile(username);\n\n              case 7:\n                newPlayer = _context3.sent;\n\n                _this.setState({\n                  players: [].concat(_toConsumableArray(players), [newPlayer])\n                }, function () {\n                  // build list of player usernames currently viewing\n                  var usernames = _this.state.players.map(function (player) {\n                    return player.username;\n                  }); // append list to query params (shallow)\n\n\n                  router.push({\n                    pathname: '/leaderboard',\n                    query: {\n                      usernames: usernames\n                    },\n                    options: {\n                      shallow: true\n                    }\n                  }); // reset search bar\n\n                  resetSearchFn();\n                }); // Helper function\n                // Check if duplicate username selection - Boolean\n\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    _this.state = {\n      players: [],\n      mode: 'solo'\n    };\n    return _this;\n  }\n\n  _createClass(Leaderboard, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          searchResults = _this$props.searchResults,\n          fetchByUsername = _this$props.fetchByUsername;\n\n      var debouncedfetchByUsername = _.debounce(fetchByUsername, 500, {\n        maxWait: 1000\n      });\n\n      return React.createElement(\"div\", null, React.createElement(Container, {\n        text: true,\n        textAlign: \"center\",\n        style: {\n          paddingTop: '200px',\n          paddingBottom: '100px',\n          height: '100%'\n        }\n      }, React.createElement(\"h1\", null, \"Leaderboard\"), React.createElement(Grid, {\n        columns: \"1\",\n        centered: true,\n        textAlign: \"center\"\n      }, React.createElement(Grid.Column, {\n        mobile: \"16\",\n        computer: \"6\",\n        largeScreen: \"6\",\n        tablet: \"6\",\n        widescreen: \"6\"\n      }, React.createElement(Container, null, React.createElement(SearchBar, {\n        handleResultSelect: this.handleResultSelect,\n        fetchByUsername: debouncedfetchByUsername,\n        results: searchResults\n      }))), React.createElement(Grid.Column, {\n        textAlign: \"center\"\n      }, React.createElement(Board, {\n        players: this.state.players\n      })))));\n    }\n  }]);\n\n  return Leaderboard;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    searchResults: state.search.searchResults\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    fetchByUsername: fetchByUsername\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Leaderboard);","map":{"version":3,"sources":["/Users/kenny/Documents/GitHub/fortniteboards/pages/leaderboard.js"],"names":["React","Component","bindActionCreators","connect","_","Container","Grid","SearchBar","fetchByUsername","getProfile","Board","Leaderboard","store","query","pathname","asPath","req","usernames","profiles","map","username","console","log","state","props","resetSearchFn","isPlayerSelected","players","find","player","router","newPlayer","setState","push","options","shallow","mode","searchResults","debouncedfetchByUsername","debounce","maxWait","paddingTop","paddingBottom","height","handleResultSelect","mapStateToProps","search","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\n\nimport { Container, Grid } from 'semantic-ui-react';\nimport SearchBar from '../src/components/SearchBar';\nimport { fetchByUsername, getProfile } from '../src/actions';\n\nimport Board from '../src/components/board';\n\n// show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n\nclass Leaderboard extends Component {\n    static async getInitialProps({ store, query, pathname, asPath, req }) {\n        // spread into array for mapping\n        const usernames = [...query.usernames];\n        const profiles = usernames.map(async username => await getProfile(username));\n\n        if (req) {\n            // called on server\n        } else {\n            // called on client\n            console.log(this.state);\n        }\n\n        // const profile = (await getProfile(query.username)) || {};\n        // if (!profile.uid) {\n        //     const err = new Error();\n        //     err.code = 'ENOENT';\n        //     throw err;\n        // }\n        // return { profile };\n        // console.log(profiles);\n        return { profiles };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = { players: [], mode: 'solo' };\n    }\n\n    handleResultSelect = async (username, resetSearchFn) => {\n        const { players } = this.state;\n        const { router } = this.props;\n\n        // Reset component if username is already in table\n        if (isPlayerSelected(username, players)) return resetSearchFn();\n\n        // Get profile of username and add to table\n        const newPlayer = await getProfile(username);\n        this.setState({ players: [...players, newPlayer] }, () => {\n            // build list of player usernames currently viewing\n            const usernames = this.state.players.map(player => player.username);\n\n            // append list to query params (shallow)\n            router.push({\n                pathname: '/leaderboard',\n                query: { usernames: usernames },\n                options: { shallow: true }\n            });\n\n            // reset search bar\n            resetSearchFn();\n        });\n\n        // Helper function\n        // Check if duplicate username selection - Boolean\n        function isPlayerSelected(username, players) {\n            players.find(player => player.username === username);\n        }\n    };\n\n    render() {\n        const { searchResults, fetchByUsername } = this.props;\n\n        const debouncedfetchByUsername = _.debounce(fetchByUsername, 500, {\n            maxWait: 1000\n        });\n\n        return (\n            <div>\n                <Container\n                    text\n                    textAlign=\"center\"\n                    style={{\n                        paddingTop: '200px',\n                        paddingBottom: '100px',\n                        height: '100%'\n                    }}\n                >\n                    <h1>Leaderboard</h1>\n                    <Grid columns=\"1\" centered textAlign=\"center\">\n                        <Grid.Column\n                            mobile=\"16\"\n                            computer=\"6\"\n                            largeScreen=\"6\"\n                            tablet=\"6\"\n                            widescreen=\"6\"\n                        >\n                            <Container>\n                                <SearchBar\n                                    handleResultSelect={this.handleResultSelect}\n                                    fetchByUsername={debouncedfetchByUsername}\n                                    results={searchResults}\n                                />\n                            </Container>\n                        </Grid.Column>\n                        <Grid.Column textAlign=\"center\">\n                            <Board players={this.state.players} />\n                        </Grid.Column>\n                    </Grid>\n                </Container>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        searchResults: state.search.searchResults\n    };\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators({ fetchByUsername }, dispatch);\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Leaderboard);\n"]},"metadata":{},"sourceType":"module"}
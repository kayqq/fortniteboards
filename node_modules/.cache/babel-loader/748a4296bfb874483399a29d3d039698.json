{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nvar axiosInstance = axios.create({\n  baseURL: \"https://fortnite-public-api.theapinetwork.com/prod09\"\n}); // const onDownloadProgress = {\n//     onDownloadProgress: progressEvent => {\n//         let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n//         console.log(progressEvent.lengthComputable);\n//         console.log(percentCompleted);\n//     }\n// };\n// V1\n\nexport var getUsernames =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(username) {\n    var endPoint, response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            endPoint = \"/users/search?username=\".concat(username);\n            _context.next = 3;\n            return axiosInstance.get(endPoint);\n\n          case 3:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response.data.entries);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function getUsernames(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getStatsByUsername =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(username) {\n    var platform,\n        window,\n        endPoint,\n        response,\n        uid,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            platform = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 'pc';\n            window = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : 'season7';\n            endPoint = \"/users/id?username=\".concat(username, \"&platform=\").concat(platform, \"&window=\").concat(window);\n            _context2.next = 5;\n            return axiosInstance.get(endPoint);\n\n          case 5:\n            response = _context2.sent;\n            uid = response.data.uid;\n            endPoint = \"/users/public/br_stats?user_id=\".concat(uid, \"&platform=\").concat(platform, \"&window=\").concat(window);\n            _context2.next = 10;\n            return axiosInstance.get(endPoint);\n\n          case 10:\n            response = _context2.sent;\n            return _context2.abrupt(\"return\", response.data);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function getStatsByUsername(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getProfileByUsername =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(username) {\n    var platform,\n        window,\n        endPoint,\n        response,\n        uid,\n        responseMatches,\n        responseStats,\n        profile,\n        _args3 = arguments;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            platform = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : 'pc';\n            window = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : 'season7';\n            endPoint = \"/users/id?username=\".concat(username, \"&platform=\").concat(platform, \"&window=\").concat(window);\n            _context3.next = 5;\n            return axiosInstance.get(endPoint);\n\n          case 5:\n            response = _context3.sent;\n            uid = response.data.uid; // Async requests\n\n            responseMatches = getMatchesByUid(uid);\n            responseStats = getProfileByUid(uid); // Await till all promises are resolved\n\n            _context3.next = 11;\n            return responseStats;\n\n          case 11:\n            _context3.t0 = _context3.sent;\n            _context3.next = 14;\n            return responseMatches;\n\n          case 14:\n            _context3.t1 = _context3.sent;\n            profile = {\n              profile: _context3.t0,\n              matches: _context3.t1\n            };\n            return _context3.abrupt(\"return\", profile);\n\n          case 17:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n\n  return function getProfileByUsername(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getProfileByUid =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(uid) {\n    var platform,\n        window,\n        endPoint,\n        response,\n        _args4 = arguments;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            platform = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : 'pc';\n            window = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : 'season7';\n            endPoint = \"/users/public/br_stats?user_id=\".concat(uid, \"&platform=\").concat(platform, \"&window=\").concat(window);\n            _context4.next = 5;\n            return axiosInstance.get(endPoint);\n\n          case 5:\n            response = _context4.sent;\n            return _context4.abrupt(\"return\", response.data);\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, this);\n  }));\n\n  return function getProfileByUid(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var getMatchesByUid =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5(uid) {\n    var endPoint, response;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            endPoint = \"/users/public/matches_v2?user_id=\".concat(uid);\n            _context5.next = 3;\n            return axiosInstance.get(endPoint);\n\n          case 3:\n            response = _context5.sent;\n            return _context5.abrupt(\"return\", response.data);\n\n          case 5:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, this);\n  }));\n\n  return function getMatchesByUid(_x5) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var getNews =\n/*#__PURE__*/\nfunction () {\n  var _ref6 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee6() {\n    var language,\n        endPoint,\n        response,\n        _args6 = arguments;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            language = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : 'en';\n            endPoint = \"/br_motd/get?language=\".concat(language);\n            _context6.next = 4;\n            return axiosInstance.get(endPoint);\n\n          case 4:\n            response = _context6.sent;\n            return _context6.abrupt(\"return\", response.data);\n\n          case 6:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, this);\n  }));\n\n  return function getNews() {\n    return _ref6.apply(this, arguments);\n  };\n}(); // V2","map":{"version":3,"sources":["/Users/kenny/Documents/GitHub/fortniteboards/src/actions/index.js"],"names":["axios","axiosInstance","create","baseURL","getUsernames","username","endPoint","get","response","data","entries","getStatsByUsername","platform","window","uid","getProfileByUsername","responseMatches","getMatchesByUid","responseStats","getProfileByUid","profile","matches","getNews","language"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nconst axiosInstance = axios.create({\n    baseURL: `https://fortnite-public-api.theapinetwork.com/prod09`\n});\n\n// const onDownloadProgress = {\n//     onDownloadProgress: progressEvent => {\n//         let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n//         console.log(progressEvent.lengthComputable);\n//         console.log(percentCompleted);\n//     }\n// };\n\n// V1\n\nexport const getUsernames = async username => {\n    const endPoint = `/users/search?username=${username}`;\n    const response = await axiosInstance.get(endPoint);\n    return response.data.entries;\n};\n\nexport const getStatsByUsername = async (username, platform = 'pc', window = 'season7') => {\n    let endPoint = `/users/id?username=${username}&platform=${platform}&window=${window}`;\n    let response = await axiosInstance.get(endPoint);\n    const { uid } = response.data;\n\n    endPoint = `/users/public/br_stats?user_id=${uid}&platform=${platform}&window=${window}`;\n    response = await axiosInstance.get(endPoint);\n    return response.data;\n};\n\nexport const getProfileByUsername = async (username, platform = 'pc', window = 'season7') => {\n    let endPoint = `/users/id?username=${username}&platform=${platform}&window=${window}`;\n    let response = await axiosInstance.get(endPoint);\n    const { uid } = response.data;\n\n    // Async requests\n    const responseMatches = getMatchesByUid(uid);\n    const responseStats = getProfileByUid(uid);\n\n    // Await till all promises are resolved\n    const profile = { profile: await responseStats, matches: await responseMatches };\n\n    return profile;\n};\n\nexport const getProfileByUid = async (uid, platform = 'pc', window = 'season7') => {\n    const endPoint = `/users/public/br_stats?user_id=${uid}&platform=${platform}&window=${window}`;\n    const response = await axiosInstance.get(endPoint);\n    return response.data;\n};\n\nexport const getMatchesByUid = async uid => {\n    const endPoint = `/users/public/matches_v2?user_id=${uid}`;\n    const response = await axiosInstance.get(endPoint);\n    return response.data;\n};\n\nexport const getNews = async (language = 'en') => {\n    const endPoint = `/br_motd/get?language=${language}`;\n    const response = await axiosInstance.get(endPoint);\n    return response.data;\n};\n\n// V2\n"]},"metadata":{},"sourceType":"module"}
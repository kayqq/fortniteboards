{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _ from 'lodash';\nimport React, { Component, useState, useEffect } from 'react';\nimport { Search, Label } from 'semantic-ui-react';\n\nvar resultRenderer = function resultRenderer(_ref) {\n  var uid = _ref.uid,\n      username = _ref.username;\n  return React.createElement(Label, {\n    key: uid,\n    content: username\n  });\n};\n\nvar SearchBar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SearchBar, _Component);\n\n  function SearchBar(props) {\n    var _this;\n\n    _classCallCheck(this, SearchBar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SearchBar).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"resetComponent\", function () {\n      return _this.setState({\n        isLoading: false,\n        value: ''\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleResultSelect\",\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e, _ref2) {\n        var result, handleResultSelect;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                result = _ref2.result;\n                handleResultSelect = _this.props.handleResultSelect;\n\n                _this.setState({\n                  value: result.username,\n                  isLoading: true\n                });\n\n                _context.next = 5;\n                return handleResultSelect(result.username);\n\n              case 5:\n                _this.resetComponent();\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x, _x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleSearchChange\", function (e, _ref4) {\n      var value = _ref4.value;\n\n      _this.setState({\n        isLoading: true,\n        value: value\n      }, function () {\n        // reset loading if empty\n        if (_this.state.value.length < 1) return _this.resetComponent(); // fetch users by username\n\n        _this.props.fetchByUsername(_this.state.value, function () {\n          _this.setState({\n            isLoading: false\n          });\n        });\n      });\n    });\n\n    _this.state = {\n      value: '',\n      isLoading: false\n    };\n    return _this;\n  }\n\n  _createClass(SearchBar, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.resetComponent();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          value = _this$state.value;\n      var results = this.props.results;\n      return React.createElement(Search, {\n        input: {\n          fluid: true,\n          icon: 'arrow circle right'\n        },\n        loading: isLoading,\n        placeholder: 'Enter your Epic username',\n        onResultSelect: this.handleResultSelect,\n        onSearchChange: _.debounce(this.handleSearchChange, 500, {\n          leading: true\n        }),\n        results: results,\n        resultRenderer: resultRenderer,\n        value: value,\n        showNoResults: false\n      });\n    }\n  }]);\n\n  return SearchBar;\n}(Component); // export const SearchBarr = ({ results, handleResultSelect, fetchByUsername }) => {\n//     const [state, setState] = useState({ value: '', isLoading: false });\n//     useEffect(() => {}, []);\n//     const resetComponent = () => setState({ isLoading: false, value: '' });\n//     const handleResultSelect = async (e, { result }) => {\n//         this.setState({ value: result.username, isLoading: true });\n//         await handleResultSelect(result.username);\n//         this.resetComponent();\n//     };\n//     const handleSearchChange = (e, { value }) => {\n//         setState({ isLoading: true, value }, () => {\n//             // reset loading if empty\n//             if (state.value.length < 1) return resetComponent();\n//             // fetch users by username\n//             fetchByUsername(this.state.value, () => {\n//                 this.setState({ isLoading: false });\n//             });\n//         });\n//     };\n//     return (\n//         <Search\n//             input={{ fluid: true, icon: 'arrow circle right' }}\n//             loading={state.isLoading}\n//             placeholder={'Enter your Epic username'}\n//             onResultSelect={this.handleResultSelect}\n//             onSearchChange={_.debounce(this.handleSearchChange, 500, {\n//                 leading: true\n//             })}\n//             results={results}\n//             resultRenderer={resultRenderer}\n//             value={state.value}\n//             showNoResults={false}\n//         />\n//     );\n// };\n\n\nexport { SearchBar as default };","map":{"version":3,"sources":["/Users/kenny/Documents/GitHub/fortniteboards/src/components/SearchBar.js"],"names":["_","React","Component","useState","useEffect","Search","Label","resultRenderer","uid","username","SearchBar","props","setState","isLoading","value","e","result","handleResultSelect","resetComponent","state","length","fetchByUsername","results","fluid","icon","debounce","handleSearchChange","leading"],"mappings":";;;;;;;;;AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,mBAA9B;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,MAAGC,GAAH,QAAGA,GAAH;AAAA,MAAQC,QAAR,QAAQA,QAAR;AAAA,SAAuB,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAED,GAAZ;AAAiB,IAAA,OAAO,EAAEC;AAA1B,IAAvB;AAAA,CAAvB;;IAEqBC,S;;;;;AACjB,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,mFAAMA,KAAN;;AADe,6FAaF;AAAA,aAAM,MAAKC,QAAL,CAAc;AAAEC,QAAAA,SAAS,EAAE,KAAb;AAAoBC,QAAAA,KAAK,EAAE;AAA3B,OAAd,CAAN;AAAA,KAbE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAeE,iBAAOC,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAYC,gBAAAA,MAAZ,SAAYA,MAAZ;AACTC,gBAAAA,kBADS,GACc,MAAKN,KADnB,CACTM,kBADS;;AAEjB,sBAAKL,QAAL,CAAc;AAAEE,kBAAAA,KAAK,EAAEE,MAAM,CAACP,QAAhB;AAA0BI,kBAAAA,SAAS,EAAE;AAArC,iBAAd;;AAFiB;AAAA,uBAGXI,kBAAkB,CAACD,MAAM,CAACP,QAAR,CAHP;;AAAA;AAIjB,sBAAKS,cAAL;;AAJiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAfF;;AAAA;AAAA;AAAA;AAAA;;AAAA,iGAsBE,UAACH,CAAD,SAAkB;AAAA,UAAZD,KAAY,SAAZA,KAAY;;AACnC,YAAKF,QAAL,CAAc;AAAEC,QAAAA,SAAS,EAAE,IAAb;AAAmBC,QAAAA,KAAK,EAALA;AAAnB,OAAd,EAA0C,YAAM;AAC5C;AACA,YAAI,MAAKK,KAAL,CAAWL,KAAX,CAAiBM,MAAjB,GAA0B,CAA9B,EAAiC,OAAO,MAAKF,cAAL,EAAP,CAFW,CAI5C;;AACA,cAAKP,KAAL,CAAWU,eAAX,CAA2B,MAAKF,KAAL,CAAWL,KAAtC,EAA6C,YAAM;AAC/C,gBAAKF,QAAL,CAAc;AAAEC,YAAAA,SAAS,EAAE;AAAb,WAAd;AACH,SAFD;AAGH,OARD;AASH,KAhCkB;;AAGf,UAAKM,KAAL,GAAa;AACTL,MAAAA,KAAK,EAAE,EADE;AAETD,MAAAA,SAAS,EAAE;AAFF,KAAb;AAHe;AAOlB;;;;yCAEoB;AACjB,WAAKK,cAAL;AACH;;;6BAuBQ;AAAA,wBACwB,KAAKC,KAD7B;AAAA,UACGN,SADH,eACGA,SADH;AAAA,UACcC,KADd,eACcA,KADd;AAAA,UAEGQ,OAFH,GAEe,KAAKX,KAFpB,CAEGW,OAFH;AAGL,aACI,oBAAC,MAAD;AACI,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE,IAAT;AAAeC,UAAAA,IAAI,EAAE;AAArB,SADX;AAEI,QAAA,OAAO,EAAEX,SAFb;AAGI,QAAA,WAAW,EAAE,0BAHjB;AAII,QAAA,cAAc,EAAE,KAAKI,kBAJzB;AAKI,QAAA,cAAc,EAAEjB,CAAC,CAACyB,QAAF,CAAW,KAAKC,kBAAhB,EAAoC,GAApC,EAAyC;AACrDC,UAAAA,OAAO,EAAE;AAD4C,SAAzC,CALpB;AAQI,QAAA,OAAO,EAAEL,OARb;AASI,QAAA,cAAc,EAAEf,cATpB;AAUI,QAAA,KAAK,EAAEO,KAVX;AAWI,QAAA,aAAa,EAAE;AAXnB,QADJ;AAeH;;;;EArDkCZ,S,GAwDvC;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;SAhGqBQ,S","sourcesContent":["import _ from 'lodash';\nimport React, { Component, useState, useEffect } from 'react';\nimport { Search, Label } from 'semantic-ui-react';\n\nconst resultRenderer = ({ uid, username }) => <Label key={uid} content={username} />;\n\nexport default class SearchBar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: '',\n            isLoading: false\n        };\n    }\n\n    componentWillMount() {\n        this.resetComponent();\n    }\n\n    resetComponent = () => this.setState({ isLoading: false, value: '' });\n\n    handleResultSelect = async (e, { result }) => {\n        const { handleResultSelect } = this.props;\n        this.setState({ value: result.username, isLoading: true });\n        await handleResultSelect(result.username);\n        this.resetComponent();\n    };\n\n    handleSearchChange = (e, { value }) => {\n        this.setState({ isLoading: true, value }, () => {\n            // reset loading if empty\n            if (this.state.value.length < 1) return this.resetComponent();\n\n            // fetch users by username\n            this.props.fetchByUsername(this.state.value, () => {\n                this.setState({ isLoading: false });\n            });\n        });\n    };\n\n    render() {\n        const { isLoading, value } = this.state;\n        const { results } = this.props;\n        return (\n            <Search\n                input={{ fluid: true, icon: 'arrow circle right' }}\n                loading={isLoading}\n                placeholder={'Enter your Epic username'}\n                onResultSelect={this.handleResultSelect}\n                onSearchChange={_.debounce(this.handleSearchChange, 500, {\n                    leading: true\n                })}\n                results={results}\n                resultRenderer={resultRenderer}\n                value={value}\n                showNoResults={false}\n            />\n        );\n    }\n}\n\n// export const SearchBarr = ({ results, handleResultSelect, fetchByUsername }) => {\n//     const [state, setState] = useState({ value: '', isLoading: false });\n\n//     useEffect(() => {}, []);\n\n//     const resetComponent = () => setState({ isLoading: false, value: '' });\n\n//     const handleResultSelect = async (e, { result }) => {\n//         this.setState({ value: result.username, isLoading: true });\n//         await handleResultSelect(result.username);\n//         this.resetComponent();\n//     };\n\n//     const handleSearchChange = (e, { value }) => {\n//         setState({ isLoading: true, value }, () => {\n//             // reset loading if empty\n//             if (state.value.length < 1) return resetComponent();\n\n//             // fetch users by username\n//             fetchByUsername(this.state.value, () => {\n//                 this.setState({ isLoading: false });\n//             });\n//         });\n//     };\n\n//     return (\n//         <Search\n//             input={{ fluid: true, icon: 'arrow circle right' }}\n//             loading={state.isLoading}\n//             placeholder={'Enter your Epic username'}\n//             onResultSelect={this.handleResultSelect}\n//             onSearchChange={_.debounce(this.handleSearchChange, 500, {\n//                 leading: true\n//             })}\n//             results={results}\n//             resultRenderer={resultRenderer}\n//             value={state.value}\n//             showNoResults={false}\n//         />\n//     );\n// };\n"]},"metadata":{},"sourceType":"module"}
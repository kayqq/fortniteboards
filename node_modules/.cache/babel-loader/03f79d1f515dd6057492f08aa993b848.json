{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport _ from 'lodash';\nimport { Container, Grid, Icon } from 'semantic-ui-react';\nimport SearchBar from \"../src/components/SearchBar\";\nimport { getProfileByUsername, getProfileByUid } from \"../src/actions\";\nimport Board from \"../src/components/board\"; // show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n// share / reset / refresh buttons\n\nvar Leaderboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Leaderboard, _Component);\n\n  _createClass(Leaderboard, null, [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var query, usernames, mode;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                query = _ref.query;\n                usernames = query.usernames;\n                mode = query.mode;\n\n                if (usernames) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  usernames: []\n                });\n\n              case 5:\n                usernames = typeof usernames == 'string' ? [usernames] : usernames;\n                return _context.abrupt(\"return\", {\n                  usernames: usernames,\n                  mode: mode\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  function Leaderboard(props) {\n    var _this;\n\n    _classCallCheck(this, Leaderboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Leaderboard).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"CapEachFirst\", function (phrase) {\n      var results = '';\n      var word = '';\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _getIterator(phrase.toLowerCase()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var char = _step.value;\n\n          if (char == ' ') {\n            results.concat(word);\n            word = '';\n          } // If new word, capitlize first\n\n\n          if (!word.length) {\n            word.concat(char.toUpperCase());\n          } else {\n            word.concat(char);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return results; // start.map(char => {\n      //     if (char == ' ') {\n      //         words.push(word);\n      //         word = [];\n      //     }\n      //     // If new word, capitlize first\n      //     if (word.length == 0) {\n      //         word.push(char.toUpperCase());\n      //     }\n      //     word.push(char);\n      //     console.log(char);\n      //     console.log(word);\n      //     console.log(words);\n      // });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"addPlayer\",\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(player) {\n        var _this$state, players, column, mode, direction, newPlayer, updatedPlayers;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$state = _this.state, players = _this$state.players, column = _this$state.column, mode = _this$state.mode, direction = _this$state.direction; // Check if already added to board\n\n                if (!_this.isPlayerSelected(player.uid)) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                _context2.next = 5;\n                return getProfileByUid(player.uid);\n\n              case 5:\n                newPlayer = _context2.sent;\n                updatedPlayers = [].concat(_toConsumableArray(players), [newPlayer]); // if pre-sorted then apply sort setting to updated players\n\n                if (column !== null) {\n                  updatedPlayers = _this.sortPlayers(updatedPlayers, column, mode, direction);\n                }\n\n                _this.setState({\n                  players: updatedPlayers\n                }, function () {\n                  return _this.updateURL();\n                });\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"removePlayer\", function (index) {\n      var players = _this.state.players;\n      var updatedPlayers = players.filter(function (player, i) {\n        return i !== index;\n      });\n\n      _this.setState({\n        players: updatedPlayers\n      }, function () {\n        return _this.updateURL();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"changeMode\", function (direction) {\n      var mode = _this.state.mode;\n      var nextMode = '';\n\n      switch (mode) {\n        case 'solo':\n          nextMode = direction === 'forward' ? 'duo' : 'squad';\n          break;\n\n        case 'duo':\n          nextMode = direction === 'forward' ? 'squad' : 'solo';\n          break;\n\n        case 'squad':\n          nextMode = direction === 'forward' ? 'solo' : 'duo';\n          break;\n\n        default:\n          break;\n      }\n\n      _this.setState({\n        mode: nextMode\n      }, function () {\n        return _this.updateURL();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleSort\", function (accessor) {\n      return function () {\n        var _this$state2 = _this.state,\n            column = _this$state2.column,\n            players = _this$state2.players,\n            direction = _this$state2.direction,\n            mode = _this$state2.mode; // Reverse order if direction set, else default to desc\n\n        var sortDirection = direction === 'desc' ? 'asc' : 'desc';\n        var sortedColumn = column; // Default to desc order on column switch\n\n        if (column !== accessor) {\n          // Default to asc order if username column\n          sortDirection = accessor == 'username' ? 'asc' : 'desc'; // Set sorted column name\n\n          sortedColumn = accessor;\n        } // Sort players\n\n\n        var sortedPlayers = _this.sortPlayers(players, accessor, mode, sortDirection);\n\n        _this.setState({\n          column: sortedColumn,\n          players: sortedPlayers,\n          direction: sortDirection\n        }, function () {\n          return _this.updateURL();\n        });\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"sortPlayers\", function (players, accessor, mode, direction) {\n      return accessor == 'username' ? _.orderBy(_this.state.players, [function (o) {\n        return o.username.toLowerCase();\n      }], [direction]) : _.orderBy(players, function (o) {\n        return o.stats[\"\".concat(accessor, \"_\").concat(mode)];\n      }, [direction]);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"isPlayerSelected\", function (uid) {\n      var players = _this.state.players;\n      return players.find(function (player) {\n        return player.uid === uid;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"updateURL\", function () {\n      var router = _this.props.router;\n      var _this$state3 = _this.state,\n          players = _this$state3.players,\n          mode = _this$state3.mode;\n      var usernames = players.map(function (player) {\n        return player.username;\n      });\n      router.replace({\n        pathname: '/leaderboard',\n        query: {\n          mode: mode,\n          usernames: usernames\n        },\n        options: {\n          shallow: true\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"initColumns\", function () {\n      _this.setState({\n        columns: [{\n          header: 'Player',\n          accessor: 'username',\n          sort: _this.handleSort('username')\n        }, {\n          header: 'K/D',\n          accessor: 'kd',\n          sort: _this.handleSort('kd')\n        }, {\n          header: 'Win %',\n          accessor: 'winrate',\n          sort: _this.handleSort('winrate')\n        }, {\n          header: 'Kills',\n          accessor: 'kills',\n          sort: _this.handleSort('kills')\n        }, {\n          header: 'Wins',\n          accessor: 'placetop1',\n          sort: _this.handleSort('placetop1')\n        }]\n      });\n    });\n\n    _this.state = {\n      players: [],\n      mode: props.mode || 'solo',\n      columns: [],\n      column: null,\n      direction: null,\n      loading: null\n    };\n    return _this;\n  }\n\n  _createClass(Leaderboard, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var string, usernames, initialPlayers;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                string = 'strinG strinG';\n                console.log(this.CapEachFirst(string));\n                usernames = this.props.usernames;\n                initialPlayers = []; // Initialize column headers\n\n                this.initColumns(); // Start load player stats\n\n                this.setState({\n                  loading: true,\n                  players: usernames ? new Array(usernames.length).fill(null) : []\n                });\n                _context3.next = 8;\n                return _Promise.all(usernames.map(function (username) {\n                  return getProfileByUsername(username);\n                }));\n\n              case 8:\n                initialPlayers = _context3.sent;\n                // End load player stats\n                this.setState({\n                  players: _toConsumableArray(initialPlayers),\n                  loading: false\n                }, function () {\n                  return _this2.updateURL();\n                });\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state4 = this.state,\n          columns = _this$state4.columns,\n          mode = _this$state4.mode,\n          players = _this$state4.players,\n          loading = _this$state4.loading;\n      return React.createElement(Container, {\n        text: true,\n        textAlign: \"center\",\n        style: {\n          paddingTop: '100px',\n          paddingBottom: '100px',\n          height: '100%'\n        }\n      }, React.createElement(Grid, {\n        centered: true,\n        textAlign: \"center\"\n      }, React.createElement(Grid.Row, null, React.createElement(\"h3\", null, \"Leaderboards\")), React.createElement(Grid.Row, null, React.createElement(Grid.Column, {\n        mobile: \"16\",\n        computer: \"6\",\n        largeScreen: \"6\",\n        tablet: \"6\",\n        widescreen: \"6\"\n      }, React.createElement(SearchBar, {\n        handleResultSelect: this.addPlayer\n      }), React.createElement(Icon, {\n        name: \"share\"\n      }))), React.createElement(Grid.Row, null, React.createElement(Grid.Column, {\n        textAlign: \"center\"\n      }, React.createElement(Board, {\n        columns: columns,\n        mode: mode,\n        players: players,\n        removePlayer: this.removePlayer,\n        handleModeChange: this.changeMode,\n        loading: loading\n      })))));\n    }\n  }]);\n\n  return Leaderboard;\n}(Component);\n\nexport default Leaderboard;","map":{"version":3,"sources":["/Users/kenny/Documents/GitHub/fortniteboards/pages/leaderboard.js"],"names":["React","Component","_","Container","Grid","Icon","SearchBar","getProfileByUsername","getProfileByUid","Board","Leaderboard","query","usernames","mode","props","phrase","results","word","toLowerCase","char","concat","length","toUpperCase","player","state","players","column","direction","isPlayerSelected","uid","newPlayer","updatedPlayers","sortPlayers","setState","updateURL","index","filter","i","nextMode","accessor","sortDirection","sortedColumn","sortedPlayers","orderBy","o","username","stats","find","router","map","replace","pathname","options","shallow","columns","header","sort","handleSort","loading","string","console","log","CapEachFirst","initialPlayers","initColumns","Array","fill","all","paddingTop","paddingBottom","height","addPlayer","removePlayer","changeMode"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport _ from 'lodash';\n\nimport { Container, Grid, Icon } from 'semantic-ui-react';\nimport SearchBar from '../src/components/SearchBar';\nimport { getProfileByUsername, getProfileByUid } from '../src/actions';\n\nimport Board from '../src/components/board';\n\n// show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n// share / reset / refresh buttons\n\nclass Leaderboard extends Component {\n    static async getInitialProps({ query }) {\n        let { usernames } = query;\n        const { mode } = query;\n        if (!usernames) return { usernames: [] };\n        usernames = typeof usernames == 'string' ? [usernames] : usernames;\n        return { usernames, mode };\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: [],\n            mode: props.mode || 'solo',\n            columns: [],\n            column: null,\n            direction: null,\n            loading: null\n        };\n    }\n\n    async componentDidMount() {\n        const string = 'strinG strinG';\n        console.log(this.CapEachFirst(string));\n\n        const { usernames } = this.props;\n        let initialPlayers = [];\n        // Initialize column headers\n        this.initColumns();\n\n        // Start load player stats\n        this.setState({\n            loading: true,\n            players: usernames ? new Array(usernames.length).fill(null) : []\n        });\n\n        initialPlayers = await Promise.all(\n            usernames.map(username => getProfileByUsername(username))\n        );\n\n        // End load player stats\n        this.setState(\n            {\n                players: [...initialPlayers],\n                loading: false\n            },\n            () => this.updateURL()\n        );\n    }\n\n    CapEachFirst = phrase => {\n        let results = '';\n        let word = '';\n\n        for (let char of phrase.toLowerCase()) {\n            if (char == ' ') {\n                results.concat(word);\n                word = '';\n            }\n            // If new word, capitlize first\n            if (!word.length) {\n                word.concat(char.toUpperCase());\n            } else {\n                word.concat(char);\n            }\n        }\n        return results;\n        // start.map(char => {\n        //     if (char == ' ') {\n        //         words.push(word);\n        //         word = [];\n        //     }\n        //     // If new word, capitlize first\n        //     if (word.length == 0) {\n        //         word.push(char.toUpperCase());\n        //     }\n        //     word.push(char);\n        //     console.log(char);\n        //     console.log(word);\n        //     console.log(words);\n        // });\n    };\n\n    addPlayer = async player => {\n        const { players, column, mode, direction } = this.state;\n        // Check if already added to board\n        if (this.isPlayerSelected(player.uid)) return;\n        // Not duplicate, get profile and add\n        const newPlayer = await getProfileByUid(player.uid);\n        let updatedPlayers = [...players, newPlayer];\n\n        // if pre-sorted then apply sort setting to updated players\n        if (column !== null) {\n            updatedPlayers = this.sortPlayers(updatedPlayers, column, mode, direction);\n        }\n\n        this.setState({ players: updatedPlayers }, () => this.updateURL());\n    };\n\n    removePlayer = index => {\n        const { players } = this.state;\n        const updatedPlayers = players.filter((player, i) => i !== index);\n        this.setState({ players: updatedPlayers }, () => this.updateURL());\n    };\n\n    changeMode = direction => {\n        const { mode } = this.state;\n        let nextMode = '';\n        switch (mode) {\n            case 'solo':\n                nextMode = direction === 'forward' ? 'duo' : 'squad';\n                break;\n            case 'duo':\n                nextMode = direction === 'forward' ? 'squad' : 'solo';\n                break;\n            case 'squad':\n                nextMode = direction === 'forward' ? 'solo' : 'duo';\n                break;\n            default:\n                break;\n        }\n        this.setState({ mode: nextMode }, () => this.updateURL());\n    };\n\n    handleSort = accessor => () => {\n        const { column, players, direction, mode } = this.state;\n\n        // Reverse order if direction set, else default to desc\n        let sortDirection = direction === 'desc' ? 'asc' : 'desc';\n        let sortedColumn = column;\n\n        // Default to desc order on column switch\n        if (column !== accessor) {\n            // Default to asc order if username column\n            sortDirection = accessor == 'username' ? 'asc' : 'desc';\n            // Set sorted column name\n            sortedColumn = accessor;\n        }\n        // Sort players\n        const sortedPlayers = this.sortPlayers(players, accessor, mode, sortDirection);\n        this.setState(\n            {\n                column: sortedColumn,\n                players: sortedPlayers,\n                direction: sortDirection\n            },\n            () => this.updateURL()\n        );\n    };\n\n    sortPlayers = (players, accessor, mode, direction) => {\n        return accessor == 'username'\n            ? _.orderBy(this.state.players, [o => o.username.toLowerCase()], [direction])\n            : _.orderBy(players, o => o.stats[`${accessor}_${mode}`], [direction]);\n    };\n\n    isPlayerSelected = uid => {\n        const { players } = this.state;\n        return players.find(player => player.uid === uid);\n    };\n\n    updateURL = () => {\n        const { router } = this.props;\n        const { players, mode } = this.state;\n        const usernames = players.map(player => player.username);\n        router.replace({\n            pathname: '/leaderboard',\n            query: { mode: mode, usernames: usernames },\n            options: { shallow: true }\n        });\n    };\n\n    initColumns = () => {\n        this.setState({\n            columns: [\n                {\n                    header: 'Player',\n                    accessor: 'username',\n                    sort: this.handleSort('username')\n                },\n                {\n                    header: 'K/D',\n                    accessor: 'kd',\n                    sort: this.handleSort('kd')\n                },\n                {\n                    header: 'Win %',\n                    accessor: 'winrate',\n                    sort: this.handleSort('winrate')\n                },\n                {\n                    header: 'Kills',\n                    accessor: 'kills',\n\n                    sort: this.handleSort('kills')\n                },\n                {\n                    header: 'Wins',\n                    accessor: 'placetop1',\n                    sort: this.handleSort('placetop1')\n                }\n            ]\n        });\n    };\n\n    render() {\n        const { columns, mode, players, loading } = this.state;\n\n        return (\n            <Container\n                text\n                textAlign=\"center\"\n                style={{\n                    paddingTop: '100px',\n                    paddingBottom: '100px',\n                    height: '100%'\n                }}\n            >\n                <Grid centered textAlign=\"center\">\n                    <Grid.Row>\n                        <h3>Leaderboards</h3>\n                    </Grid.Row>\n                    <Grid.Row>\n                        <Grid.Column\n                            mobile=\"16\"\n                            computer=\"6\"\n                            largeScreen=\"6\"\n                            tablet=\"6\"\n                            widescreen=\"6\"\n                        >\n                            <SearchBar handleResultSelect={this.addPlayer} />\n                            <Icon name=\"share\" />\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row>\n                        <Grid.Column textAlign=\"center\">\n                            <Board\n                                columns={columns}\n                                mode={mode}\n                                players={players}\n                                removePlayer={this.removePlayer}\n                                handleModeChange={this.changeMode}\n                                loading={loading}\n                            />\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Container>\n        );\n    }\n}\n\nexport default Leaderboard;\n"]},"metadata":{},"sourceType":"module"}
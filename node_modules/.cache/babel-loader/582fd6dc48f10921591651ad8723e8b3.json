{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport { Grid, Rail, Sticky } from 'semantic-ui-react';\nimport ModeHeader from \"./ModeHeader\";\nimport StatsHeader from \"./StatsHeader\";\nimport Player from \"./Player\"; // const index = ({ columns, players, removePlayer, handleModeChange, mode }) => {\n//     return (\n//         <Grid style={{ backgroundColor: '#2c3c57', color: 'white' }}>\n//             <ModeHeader mode={mode} handleModeChange={handleModeChange} />\n//             <StatsHeader columns={columns} />\n//             {players.map((player, index) => (\n//                 <Player\n//                     key={index}\n//                     columns={columns}\n//                     player={player}\n//                     mode={mode}\n//                     boardIndex={index}\n//                     removePlayer={removePlayer}\n//                 />\n//             ))}\n//         </Grid>\n//     );\n// };\n// export default index;\n\nvar index =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(index, _React$Component);\n\n  function index() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, index);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(index)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {});\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleContextRef\", function (contextRef) {\n      return _this.setState({\n        contextRef: contextRef\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(index, [{\n    key: \"render\",\n    value: function render() {\n      var contextRef = this.state.contextRef;\n      var _this$props = this.props,\n          columns = _this$props.columns,\n          players = _this$props.players,\n          removePlayer = _this$props.removePlayer,\n          handleModeChange = _this$props.handleModeChange,\n          mode = _this$props.mode;\n      return React.createElement(\"div\", {\n        ref: this.handleContextRef\n      }, React.createElement(Grid, {\n        ref: this.handleContextRef,\n        style: {\n          backgroundColor: '#2c3c57',\n          color: 'white'\n        }\n      }, React.createElement(Rail, {\n        position: \"left\",\n        internal: true,\n        attached: true,\n        style: {\n          width: '100%',\n          height: '400px'\n        }\n      }, React.createElement(Sticky, {\n        context: contextRef,\n        pushing: true\n      }, React.createElement(Grid, {\n        style: {\n          backgroundColor: '#2c3c57',\n          color: 'white'\n        }\n      }, React.createElement(ModeHeader, {\n        mode: mode,\n        handleModeChange: handleModeChange\n      }), React.createElement(StatsHeader, {\n        columns: columns\n      })))), players.map(function (player, index) {\n        return React.createElement(Player, {\n          key: index,\n          columns: columns,\n          player: player,\n          mode: mode,\n          boardIndex: index,\n          removePlayer: removePlayer\n        });\n      })));\n    }\n  }]);\n\n  return index;\n}(React.Component);\n\nexport { index as default };","map":{"version":3,"sources":["/Users/kenny/Documents/GitHub/fortniteboards/src/components/board/index.js"],"names":["React","Grid","Rail","Sticky","ModeHeader","StatsHeader","Player","index","contextRef","setState","state","props","columns","players","removePlayer","handleModeChange","mode","handleContextRef","backgroundColor","color","width","height","map","player","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,MAArB,QAAmC,mBAAnC;AACA,OAAOC,UAAP;AACA,OAAOC,WAAP;AACA,OAAOC,MAAP,iB,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;IAEqBC,K;;;;;;;;;;;;;;;;;;oFACT,E;;+FAEW,UAAAC,UAAU;AAAA,aAAI,MAAKC,QAAL,CAAc;AAAED,QAAAA,UAAU,EAAVA;AAAF,OAAd,CAAJ;AAAA,K;;;;;;;6BACpB;AAAA,UACGA,UADH,GACkB,KAAKE,KADvB,CACGF,UADH;AAAA,wBAE8D,KAAKG,KAFnE;AAAA,UAEGC,OAFH,eAEGA,OAFH;AAAA,UAEYC,OAFZ,eAEYA,OAFZ;AAAA,UAEqBC,YAFrB,eAEqBA,YAFrB;AAAA,UAEmCC,gBAFnC,eAEmCA,gBAFnC;AAAA,UAEqDC,IAFrD,eAEqDA,IAFrD;AAGL,aACI;AAAK,QAAA,GAAG,EAAE,KAAKC;AAAf,SACI,oBAAC,IAAD;AACI,QAAA,GAAG,EAAE,KAAKA,gBADd;AAEI,QAAA,KAAK,EAAE;AAAEC,UAAAA,eAAe,EAAE,SAAnB;AAA8BC,UAAAA,KAAK,EAAE;AAArC;AAFX,SAII,oBAAC,IAAD;AACI,QAAA,QAAQ,EAAC,MADb;AAEI,QAAA,QAAQ,MAFZ;AAGI,QAAA,QAAQ,MAHZ;AAII,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE,MAAT;AAAiBC,UAAAA,MAAM,EAAE;AAAzB;AAJX,SAMI,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAEb,UAAjB;AAA6B,QAAA,OAAO;AAApC,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEU,UAAAA,eAAe,EAAE,SAAnB;AAA8BC,UAAAA,KAAK,EAAE;AAArC;AAAb,SACI,oBAAC,UAAD;AAAY,QAAA,IAAI,EAAEH,IAAlB;AAAwB,QAAA,gBAAgB,EAAED;AAA1C,QADJ,EAEI,oBAAC,WAAD;AAAa,QAAA,OAAO,EAAEH;AAAtB,QAFJ,CADJ,CANJ,CAJJ,EAkBKC,OAAO,CAACS,GAAR,CAAY,UAACC,MAAD,EAAShB,KAAT;AAAA,eACT,oBAAC,MAAD;AACI,UAAA,GAAG,EAAEA,KADT;AAEI,UAAA,OAAO,EAAEK,OAFb;AAGI,UAAA,MAAM,EAAEW,MAHZ;AAII,UAAA,IAAI,EAAEP,IAJV;AAKI,UAAA,UAAU,EAAET,KALhB;AAMI,UAAA,YAAY,EAAEO;AANlB,UADS;AAAA,OAAZ,CAlBL,CADJ,CADJ;AAiCH;;;;EAxC8Bd,KAAK,CAACwB,S;;SAApBjB,K","sourcesContent":["import React from 'react';\nimport { Grid, Rail, Sticky } from 'semantic-ui-react';\nimport ModeHeader from './ModeHeader';\nimport StatsHeader from './StatsHeader';\nimport Player from './Player';\n\n// const index = ({ columns, players, removePlayer, handleModeChange, mode }) => {\n//     return (\n//         <Grid style={{ backgroundColor: '#2c3c57', color: 'white' }}>\n//             <ModeHeader mode={mode} handleModeChange={handleModeChange} />\n//             <StatsHeader columns={columns} />\n//             {players.map((player, index) => (\n//                 <Player\n//                     key={index}\n//                     columns={columns}\n//                     player={player}\n//                     mode={mode}\n//                     boardIndex={index}\n//                     removePlayer={removePlayer}\n//                 />\n//             ))}\n//         </Grid>\n//     );\n// };\n\n// export default index;\n\nexport default class index extends React.Component {\n    state = {};\n\n    handleContextRef = contextRef => this.setState({ contextRef });\n    render() {\n        const { contextRef } = this.state;\n        const { columns, players, removePlayer, handleModeChange, mode } = this.props;\n        return (\n            <div ref={this.handleContextRef}>\n                <Grid\n                    ref={this.handleContextRef}\n                    style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                >\n                    <Rail\n                        position=\"left\"\n                        internal\n                        attached\n                        style={{ width: '100%', height: '400px' }}\n                    >\n                        <Sticky context={contextRef} pushing>\n                            <Grid style={{ backgroundColor: '#2c3c57', color: 'white' }}>\n                                <ModeHeader mode={mode} handleModeChange={handleModeChange} />\n                                <StatsHeader columns={columns} />\n                            </Grid>\n                        </Sticky>\n                    </Rail>\n\n                    {players.map((player, index) => (\n                        <Player\n                            key={index}\n                            columns={columns}\n                            player={player}\n                            mode={mode}\n                            boardIndex={index}\n                            removePlayer={removePlayer}\n                        />\n                    ))}\n                </Grid>\n            </div>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
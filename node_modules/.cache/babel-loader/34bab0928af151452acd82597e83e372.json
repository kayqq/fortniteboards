{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _ from 'lodash';\nimport React, { Component, useState, useEffect } from 'react';\nimport { Search, Label } from 'semantic-ui-react';\nimport { getUsernames } from \"../actions\";\n\nvar resultRenderer = function resultRenderer(_ref) {\n  var uid = _ref.uid,\n      username = _ref.username;\n  return React.createElement(Label, {\n    key: uid,\n    content: username\n  });\n}; // export default class SearchBar extends Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             value: '',\n//             isLoading: false\n//         };\n//     }\n//     componentWillMount() {\n//         this.resetComponent();\n//     }\n//     resetComponent = () => this.setState({ isLoading: false, value: '' });\n//     handleResultSelect = async (e, { result }) => {\n//         const { handleResultSelect } = this.props;\n//         this.setState({ value: result.username, isLoading: true });\n//         await handleResultSelect(result.username);\n//         this.resetComponent();\n//     };\n//     handleSearchChange = (e, { value }) => {\n//         this.setState({ isLoading: true, value }, () => {\n//             // reset loading if empty\n//             if (this.state.value.length < 1) return this.resetComponent();\n//             // fetch users by username\n//             this.props.fetchByUsername(this.state.value, () => {\n//                 this.setState({ isLoading: false });\n//             });\n//         });\n//     };\n//     render() {\n//         const { isLoading, value } = this.state;\n//         const { results } = this.props;\n//         return (\n//             <Search\n//                 input={{ fluid: true, icon: 'arrow circle right' }}\n//                 loading={isLoading}\n//                 placeholder={'Enter your Epic username'}\n//                 onResultSelect={this.handleResultSelect}\n//                 onSearchChange={_.debounce(this.handleSearchChange, 500, {\n//                     leading: true\n//                 })}\n//                 results={results}\n//                 resultRenderer={resultRenderer}\n//                 value={value}\n//                 showNoResults={false}\n//             />\n//         );\n//     }\n// }\n\n\nvar SearchBar = function SearchBar(_ref2) {\n  var handleResultSelect = _ref2.handleResultSelect;\n\n  var _useState = useState({\n    value: '',\n    isLoading: false\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      results = _useState4[0],\n      setResults = _useState4[1]; // useEffect(() => {\n  //     resetComponent();\n  // }, []);\n\n\n  var resetComponent = function resetComponent() {\n    return setState({\n      isLoading: false,\n      value: ''\n    });\n  };\n\n  var onResultSelect =\n  /*#__PURE__*/\n  function () {\n    var _ref4 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(e, _ref3) {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              result = _ref3.result;\n              setState({\n                value: result.username,\n                isLoading: true\n              });\n              _context.next = 4;\n              return handleResultSelect(result.username);\n\n            case 4:\n              resetComponent();\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function onResultSelect(_x, _x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var onSearchChange =\n  /*#__PURE__*/\n  function () {\n    var _ref6 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(e, _ref5) {\n      var value, results, formattedResults;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              value = _ref5.value;\n              setState({\n                isLoading: true,\n                value: value\n              });\n              _context2.next = 4;\n              return getUsernames(value);\n\n            case 4:\n              results = _context2.sent;\n              formattedResults = results.map(function (result, index) {\n                result.key = index;\n                result.title = result.username;\n                return result;\n              });\n              setResults(formattedResults);\n              setState(_objectSpread({}, state, {\n                isLoading: false\n              }));\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function onSearchChange(_x3, _x4) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  var debouncedSearchChange = _.debounce(onSearchChange, 500, {\n    maxWait: 1000\n  });\n\n  return React.createElement(Search, {\n    input: {\n      fluid: true,\n      icon: 'arrow circle right'\n    },\n    loading: state.isLoading,\n    placeholder: 'Enter your Epic username',\n    onResultSelect: onResultSelect,\n    onSearchChange: debouncedSearchChange,\n    results: results,\n    resultRenderer: resultRenderer,\n    value: state.value,\n    showNoResults: false\n  });\n};\n\nexport default SearchBar;","map":{"version":3,"sources":["/Users/kenny/Documents/GitHub/fortniteboards/src/components/SearchBar.js"],"names":["_","React","Component","useState","useEffect","Search","Label","getUsernames","resultRenderer","uid","username","SearchBar","handleResultSelect","value","isLoading","state","setState","results","setResults","resetComponent","onResultSelect","e","result","onSearchChange","formattedResults","map","index","key","title","debouncedSearchChange","debounce","maxWait","fluid","icon"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport React, { Component, useState, useEffect } from 'react';\nimport { Search, Label } from 'semantic-ui-react';\nimport { getUsernames } from '../actions';\n\nconst resultRenderer = ({ uid, username }) => <Label key={uid} content={username} />;\n\n// export default class SearchBar extends Component {\n//     constructor(props) {\n//         super(props);\n\n//         this.state = {\n//             value: '',\n//             isLoading: false\n//         };\n//     }\n\n//     componentWillMount() {\n//         this.resetComponent();\n//     }\n\n//     resetComponent = () => this.setState({ isLoading: false, value: '' });\n\n//     handleResultSelect = async (e, { result }) => {\n//         const { handleResultSelect } = this.props;\n//         this.setState({ value: result.username, isLoading: true });\n//         await handleResultSelect(result.username);\n//         this.resetComponent();\n//     };\n\n//     handleSearchChange = (e, { value }) => {\n//         this.setState({ isLoading: true, value }, () => {\n//             // reset loading if empty\n//             if (this.state.value.length < 1) return this.resetComponent();\n\n//             // fetch users by username\n//             this.props.fetchByUsername(this.state.value, () => {\n//                 this.setState({ isLoading: false });\n//             });\n//         });\n//     };\n\n//     render() {\n//         const { isLoading, value } = this.state;\n//         const { results } = this.props;\n//         return (\n//             <Search\n//                 input={{ fluid: true, icon: 'arrow circle right' }}\n//                 loading={isLoading}\n//                 placeholder={'Enter your Epic username'}\n//                 onResultSelect={this.handleResultSelect}\n//                 onSearchChange={_.debounce(this.handleSearchChange, 500, {\n//                     leading: true\n//                 })}\n//                 results={results}\n//                 resultRenderer={resultRenderer}\n//                 value={value}\n//                 showNoResults={false}\n//             />\n//         );\n//     }\n// }\n\nconst SearchBar = ({ handleResultSelect }) => {\n    const [state, setState] = useState({ value: '', isLoading: false });\n    const [results, setResults] = useState([]);\n\n    // useEffect(() => {\n    //     resetComponent();\n    // }, []);\n\n    const resetComponent = () => setState({ isLoading: false, value: '' });\n\n    const onResultSelect = async (e, { result }) => {\n        setState({ value: result.username, isLoading: true });\n        await handleResultSelect(result.username);\n        resetComponent();\n    };\n\n    const onSearchChange = async (e, { value }) => {\n        setState({ isLoading: true, value: value });\n\n        const results = await getUsernames(value);\n        const formattedResults = results.map((result, index) => {\n            result.key = index;\n            result.title = result.username;\n            return result;\n        });\n        setResults(formattedResults);\n        setState({ ...state, isLoading: false });\n    };\n\n    const debouncedSearchChange = _.debounce(onSearchChange, 500, {\n        maxWait: 1000\n    });\n\n    return (\n        <Search\n            input={{ fluid: true, icon: 'arrow circle right' }}\n            loading={state.isLoading}\n            placeholder={'Enter your Epic username'}\n            onResultSelect={onResultSelect}\n            onSearchChange={debouncedSearchChange}\n            results={results}\n            resultRenderer={resultRenderer}\n            value={state.value}\n            showNoResults={false}\n        />\n    );\n};\n\nexport default SearchBar;\n"]},"metadata":{},"sourceType":"module"}
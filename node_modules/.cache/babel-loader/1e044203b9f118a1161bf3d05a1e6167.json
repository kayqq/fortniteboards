{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useState } from 'react';\nimport copy from 'copy-to-clipboard';\nimport { Grid, Popup, Button, Input, Header } from 'semantic-ui-react';\n\nvar CopyLinkPopup = function CopyLinkPopup(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isCopied = _useState2[0],\n      setCopied = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      link = _useState4[0],\n      setLink = _useState4[1];\n\n  var handleCopyClipboard = function handleCopyClipboard(link) {\n    var didCopy = copy(link);\n    setCopied(didCopy);\n  };\n\n  return React.createElement(Popup, {\n    style: {\n      width: '100%'\n    },\n    hideOnScroll: true,\n    hoverable: true,\n    on: \"click\",\n    position: \"top center\",\n    onOpen: function onOpen() {\n      return setLink(location.href);\n    },\n    onClose: function onClose() {\n      return setCopied(false);\n    },\n    content: React.createElement(Grid, {\n      textAlign: \"center\"\n    }, React.createElement(Grid.Row, {\n      textAlign: \"left\"\n    }, React.createElement(Grid.Column, {\n      textAlign: \"left\"\n    }, React.createElement(Header, {\n      as: \"h5\",\n      color: isCopied ? 'green' : 'grey'\n    }, isCopied ? 'Link copied!' : 'Link to custom leaderboard: '))), React.createElement(Grid.Row, {\n      style: {\n        paddingTop: '0px'\n      }\n    }, React.createElement(Grid.Column, null, React.createElement(Input, {\n      value: link\n    }), React.createElement(Button, {\n      icon: isCopied ? 'check' : 'linkify',\n      color: isCopied ? 'green' : 'grey',\n      compact: true,\n      onClick: function onClick() {\n        return handleCopyClipboard(link);\n      }\n    })))),\n    trigger: children\n  });\n};\n\nexport default CopyLinkPopup;","map":{"version":3,"sources":["/Users/kenny/Documents/GitHub/fortniteboards/src/components/CopyLinkPopup.js"],"names":["React","useState","copy","Grid","Popup","Button","Input","Header","CopyLinkPopup","children","isCopied","setCopied","link","setLink","handleCopyClipboard","didCopy","width","location","href","paddingTop"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,EAA8BC,KAA9B,EAAqCC,MAArC,QAAmD,mBAAnD;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBACNR,QAAQ,CAAC,KAAD,CADF;AAAA;AAAA,MAC7BS,QAD6B;AAAA,MACnBC,SADmB;;AAAA,mBAEZV,QAAQ,CAAC,EAAD,CAFI;AAAA;AAAA,MAE7BW,IAF6B;AAAA,MAEvBC,OAFuB;;AAIpC,MAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAF,IAAI,EAAI;AAChC,QAAMG,OAAO,GAAGb,IAAI,CAACU,IAAD,CAApB;AACAD,IAAAA,SAAS,CAACI,OAAD,CAAT;AACH,GAHD;;AAKA,SACI,oBAAC,KAAD;AACI,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADX;AAEI,IAAA,YAAY,MAFhB;AAGI,IAAA,SAAS,MAHb;AAII,IAAA,EAAE,EAAC,OAJP;AAKI,IAAA,QAAQ,EAAC,YALb;AAMI,IAAA,MAAM,EAAE;AAAA,aAAMH,OAAO,CAACI,QAAQ,CAACC,IAAV,CAAb;AAAA,KANZ;AAOI,IAAA,OAAO,EAAE;AAAA,aAAMP,SAAS,CAAC,KAAD,CAAf;AAAA,KAPb;AAQI,IAAA,OAAO,EACH,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC;AAAhB,OACI,oBAAC,IAAD,CAAM,GAAN;AAAU,MAAA,SAAS,EAAC;AAApB,OACI,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,SAAS,EAAC;AAAvB,OACI,oBAAC,MAAD;AAAQ,MAAA,EAAE,EAAC,IAAX;AAAgB,MAAA,KAAK,EAAED,QAAQ,GAAG,OAAH,GAAa;AAA5C,OACKA,QAAQ,GAAG,cAAH,GAAoB,8BADjC,CADJ,CADJ,CADJ,EAQI,oBAAC,IAAD,CAAM,GAAN;AAAU,MAAA,KAAK,EAAE;AAAES,QAAAA,UAAU,EAAE;AAAd;AAAjB,OACI,oBAAC,IAAD,CAAM,MAAN,QACI,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAEP;AAAd,MADJ,EAEI,oBAAC,MAAD;AACI,MAAA,IAAI,EAAEF,QAAQ,GAAG,OAAH,GAAa,SAD/B;AAEI,MAAA,KAAK,EAAEA,QAAQ,GAAG,OAAH,GAAa,MAFhC;AAGI,MAAA,OAAO,MAHX;AAII,MAAA,OAAO,EAAE;AAAA,eAAMI,mBAAmB,CAACF,IAAD,CAAzB;AAAA;AAJb,MAFJ,CADJ,CARJ,CATR;AA8BI,IAAA,OAAO,EAAEH;AA9Bb,IADJ;AAkCH,CA3CD;;AA6CA,eAAeD,aAAf","sourcesContent":["import React, { useState } from 'react';\nimport copy from 'copy-to-clipboard';\nimport { Grid, Popup, Button, Input, Header } from 'semantic-ui-react';\n\nconst CopyLinkPopup = ({ children }) => {\n    const [isCopied, setCopied] = useState(false);\n    const [link, setLink] = useState('');\n\n    const handleCopyClipboard = link => {\n        const didCopy = copy(link);\n        setCopied(didCopy);\n    };\n\n    return (\n        <Popup\n            style={{ width: '100%' }}\n            hideOnScroll\n            hoverable\n            on=\"click\"\n            position=\"top center\"\n            onOpen={() => setLink(location.href)}\n            onClose={() => setCopied(false)}\n            content={\n                <Grid textAlign=\"center\">\n                    <Grid.Row textAlign=\"left\">\n                        <Grid.Column textAlign=\"left\">\n                            <Header as=\"h5\" color={isCopied ? 'green' : 'grey'}>\n                                {isCopied ? 'Link copied!' : 'Link to custom leaderboard: '}\n                            </Header>\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row style={{ paddingTop: '0px' }}>\n                        <Grid.Column>\n                            <Input value={link} />\n                            <Button\n                                icon={isCopied ? 'check' : 'linkify'}\n                                color={isCopied ? 'green' : 'grey'}\n                                compact\n                                onClick={() => handleCopyClipboard(link)}\n                            />\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            }\n            trigger={children}\n        />\n    );\n};\n\nexport default CopyLinkPopup;\n"]},"metadata":{},"sourceType":"module"}
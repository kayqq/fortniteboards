{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport _ from 'lodash';\nimport { Container, Grid, Icon } from 'semantic-ui-react';\nimport SearchBar from \"../src/components/SearchBar\";\nimport { getUsernames, getProfile } from \"../src/actions\";\nimport Board from \"../src/components/board\"; // show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n// share / reset / refresh buttons\n\nvar Leaderboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Leaderboard, _Component);\n\n  _createClass(Leaderboard, null, [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var query, usernames, mode;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                query = _ref.query;\n                usernames = query.usernames;\n                mode = query.mode;\n\n                if (usernames) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  usernames: []\n                });\n\n              case 5:\n                usernames = typeof usernames == 'string' ? [usernames] : usernames;\n                return _context.abrupt(\"return\", {\n                  usernames: usernames,\n                  mode: mode\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  function Leaderboard(props) {\n    var _this;\n\n    _classCallCheck(this, Leaderboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Leaderboard).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"addPlayer\",\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(username) {\n        var _this$state, players, column, mode, direction, newPlayer, updatedPlayers;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$state = _this.state, players = _this$state.players, column = _this$state.column, mode = _this$state.mode, direction = _this$state.direction; // Check if already added to board\n\n                if (!_this.isPlayerSelected(username)) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                _context2.next = 5;\n                return getProfile(username);\n\n              case 5:\n                newPlayer = _context2.sent;\n                updatedPlayers = [].concat(_toConsumableArray(players), [newPlayer]); // if pre-sorted then apply sort setting to updated players\n\n                if (column !== null) {\n                  updatedPlayers = _this.sortPlayers(updatedPlayers, column, mode, direction);\n                }\n\n                _this.setState({\n                  players: updatedPlayers\n                }, function () {\n                  return _this.updateURL();\n                });\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"removePlayer\", function (index) {\n      var players = _this.state.players;\n      var updatedPlayers = players.filter(function (player, i) {\n        return i !== index;\n      });\n\n      _this.setState({\n        players: updatedPlayers\n      }, function () {\n        return _this.updateURL();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"changeMode\", function (direction) {\n      var mode = _this.state.mode;\n      var nextMode = '';\n\n      switch (mode) {\n        case 'solo':\n          nextMode = direction === 'forward' ? 'duo' : 'squad';\n          break;\n\n        case 'duo':\n          nextMode = direction === 'forward' ? 'squad' : 'solo';\n          break;\n\n        case 'squad':\n          nextMode = direction === 'forward' ? 'solo' : 'duo';\n          break;\n\n        default:\n          break;\n      }\n\n      _this.setState({\n        mode: nextMode\n      }, function () {\n        return _this.updateURL();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleSort\", function (accessor) {\n      return function () {\n        var _this$state2 = _this.state,\n            column = _this$state2.column,\n            players = _this$state2.players,\n            direction = _this$state2.direction,\n            mode = _this$state2.mode; // Reverse order if direction set, else default to desc\n\n        var sortDirection = direction === 'desc' ? 'asc' : 'desc';\n        var sortedColumn = column; // Default to desc order on column switch\n\n        if (column !== accessor) {\n          // Default to asc order if username column\n          sortDirection = accessor == 'username' ? 'asc' : 'desc'; // Set sorted column name\n\n          sortedColumn = accessor;\n        } // Sort players\n\n\n        var sortedPlayers = _this.sortPlayers(players, accessor, mode, sortDirection);\n\n        _this.setState({\n          column: sortedColumn,\n          players: sortedPlayers,\n          direction: sortDirection\n        }, function () {\n          return _this.updateURL();\n        });\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"sortPlayers\", function (players, accessor, mode, direction) {\n      return accessor == 'username' ? _.orderBy(_this.state.players, [function (o) {\n        return o.username.toLowerCase();\n      }], [direction]) : _.orderBy(players, function (o) {\n        return o.stats[\"\".concat(accessor, \"_\").concat(mode)];\n      }, [direction]);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"isPlayerSelected\", function (username) {\n      var players = _this.state.players;\n      return players.find(function (player) {\n        return player.username === username;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"updateURL\", function () {\n      var router = _this.props.router;\n      var _this$state3 = _this.state,\n          players = _this$state3.players,\n          mode = _this$state3.mode;\n      var usernames = players.map(function (player) {\n        return player.username;\n      });\n      router.replace({\n        pathname: '/leaderboard',\n        query: {\n          mode: mode,\n          usernames: usernames\n        },\n        options: {\n          shallow: true\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleUsernameSearch\",\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(username, callback) {\n        var usernames, formattedResults;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return getUsernames(username);\n\n              case 2:\n                usernames = _context3.sent;\n                // OPTIMIZE:\n                // CHANGE SEARCH RESULTS TO ACCEPT DATA GIVEN WITHOUT HAVING TO PRE-MODIFY THE DATA TO FIT\n                formattedResults = usernames.map(function (result, index) {\n                  result.key = index;\n                  result.title = result.username;\n                  return result;\n                });\n                callback();\n\n                _this.setState({\n                  results: formattedResults\n                });\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"initColumns\", function () {\n      _this.setState({\n        columns: [{\n          header: 'Player',\n          accessor: 'username',\n          sort: _this.handleSort('username')\n        }, {\n          header: 'K/D',\n          accessor: 'kd',\n          sort: _this.handleSort('kd')\n        }, {\n          header: 'Win %',\n          accessor: 'winrate',\n          sort: _this.handleSort('winrate')\n        }, {\n          header: 'Kills',\n          accessor: 'kills',\n          sort: _this.handleSort('kills')\n        }, {\n          header: 'Wins',\n          accessor: 'placetop1',\n          sort: _this.handleSort('placetop1')\n        }]\n      });\n    });\n\n    _this.state = {\n      players: [],\n      mode: props.mode || 'solo',\n      columns: [],\n      column: null,\n      direction: null,\n      loading: null,\n      results: []\n    };\n    return _this;\n  }\n\n  _createClass(Leaderboard, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var _this2 = this;\n\n        var usernames, initialPlayers;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                usernames = this.props.usernames;\n                initialPlayers = []; // Initialize column headers\n\n                this.initColumns(); // Start load player stats\n\n                this.setState({\n                  loading: true,\n                  players: usernames ? new Array(usernames.length).fill(null) : []\n                });\n                _context4.next = 6;\n                return _Promise.all(usernames.map(function (username) {\n                  return getProfile(username);\n                }));\n\n              case 6:\n                initialPlayers = _context4.sent;\n                // End load player stats\n                this.setState({\n                  players: _toConsumableArray(initialPlayers),\n                  loading: false\n                }, function () {\n                  return _this2.updateURL();\n                });\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state4 = this.state,\n          columns = _this$state4.columns,\n          mode = _this$state4.mode,\n          players = _this$state4.players,\n          loading = _this$state4.loading,\n          results = _this$state4.results;\n\n      var debouncedHandleUsernameSearch = _.debounce(this.handleUsernameSearch, 500, {\n        maxWait: 1000\n      });\n\n      return React.createElement(Container, {\n        text: true,\n        textAlign: \"center\",\n        style: {\n          paddingTop: '100px',\n          paddingBottom: '100px',\n          height: '100%'\n        }\n      }, React.createElement(Grid, {\n        centered: true,\n        textAlign: \"center\"\n      }, React.createElement(Grid.Row, null, React.createElement(\"h3\", null, \"Leaderboards\")), React.createElement(Grid.Row, null, React.createElement(Grid.Column, {\n        mobile: \"16\",\n        computer: \"6\",\n        largeScreen: \"6\",\n        tablet: \"6\",\n        widescreen: \"6\"\n      }, React.createElement(SearchBar, {\n        handleResultSelect: this.addPlayer,\n        fetchByUsername: debouncedHandleUsernameSearch,\n        results: results\n      }), React.createElement(Icon, {\n        name: \"share\"\n      }))), React.createElement(Grid.Row, null, React.createElement(Grid.Column, {\n        textAlign: \"center\"\n      }, React.createElement(Board, {\n        columns: columns,\n        mode: mode,\n        players: players,\n        removePlayer: this.removePlayer,\n        handleModeChange: this.changeMode,\n        loading: loading\n      })))));\n    }\n  }]);\n\n  return Leaderboard;\n}(Component);\n\nexport default Leaderboard;","map":{"version":3,"sources":["/Users/kenny/Documents/GitHub/fortniteboards/pages/leaderboard.js"],"names":["React","Component","_","Container","Grid","Icon","SearchBar","getUsernames","getProfile","Board","Leaderboard","query","usernames","mode","props","username","state","players","column","direction","isPlayerSelected","newPlayer","updatedPlayers","sortPlayers","setState","updateURL","index","filter","player","i","nextMode","accessor","sortDirection","sortedColumn","sortedPlayers","orderBy","o","toLowerCase","stats","find","router","map","replace","pathname","options","shallow","callback","formattedResults","result","key","title","results","columns","header","sort","handleSort","loading","initialPlayers","initColumns","Array","length","fill","all","debouncedHandleUsernameSearch","debounce","handleUsernameSearch","maxWait","paddingTop","paddingBottom","height","addPlayer","removePlayer","changeMode"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport _ from 'lodash';\n\nimport { Container, Grid, Icon } from 'semantic-ui-react';\nimport SearchBar from '../src/components/SearchBar';\nimport { getUsernames, getProfile } from '../src/actions';\n\nimport Board from '../src/components/board';\n\n// show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n// share / reset / refresh buttons\n\nclass Leaderboard extends Component {\n    static async getInitialProps({ query }) {\n        let { usernames } = query;\n        const { mode } = query;\n        if (!usernames) return { usernames: [] };\n        usernames = typeof usernames == 'string' ? [usernames] : usernames;\n        return { usernames, mode };\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: [],\n            mode: props.mode || 'solo',\n            columns: [],\n            column: null,\n            direction: null,\n            loading: null,\n            results: []\n        };\n    }\n\n    async componentDidMount() {\n        const { usernames } = this.props;\n        let initialPlayers = [];\n        // Initialize column headers\n        this.initColumns();\n\n        // Start load player stats\n        this.setState({\n            loading: true,\n            players: usernames ? new Array(usernames.length).fill(null) : []\n        });\n\n        initialPlayers = await Promise.all(usernames.map(username => getProfile(username)));\n\n        // End load player stats\n        this.setState(\n            {\n                players: [...initialPlayers],\n                loading: false\n            },\n            () => this.updateURL()\n        );\n    }\n\n    addPlayer = async username => {\n        const { players, column, mode, direction } = this.state;\n        // Check if already added to board\n        if (this.isPlayerSelected(username)) return;\n        // Not duplicate, get profile and add\n        const newPlayer = await getProfile(username);\n        let updatedPlayers = [...players, newPlayer];\n\n        // if pre-sorted then apply sort setting to updated players\n        if (column !== null) {\n            updatedPlayers = this.sortPlayers(updatedPlayers, column, mode, direction);\n        }\n\n        this.setState({ players: updatedPlayers }, () => this.updateURL());\n    };\n\n    removePlayer = index => {\n        const { players } = this.state;\n        const updatedPlayers = players.filter((player, i) => i !== index);\n        this.setState({ players: updatedPlayers }, () => this.updateURL());\n    };\n\n    changeMode = direction => {\n        const { mode } = this.state;\n        let nextMode = '';\n        switch (mode) {\n            case 'solo':\n                nextMode = direction === 'forward' ? 'duo' : 'squad';\n                break;\n            case 'duo':\n                nextMode = direction === 'forward' ? 'squad' : 'solo';\n                break;\n            case 'squad':\n                nextMode = direction === 'forward' ? 'solo' : 'duo';\n                break;\n            default:\n                break;\n        }\n        this.setState({ mode: nextMode }, () => this.updateURL());\n    };\n\n    handleSort = accessor => () => {\n        const { column, players, direction, mode } = this.state;\n\n        // Reverse order if direction set, else default to desc\n        let sortDirection = direction === 'desc' ? 'asc' : 'desc';\n        let sortedColumn = column;\n\n        // Default to desc order on column switch\n        if (column !== accessor) {\n            // Default to asc order if username column\n            sortDirection = accessor == 'username' ? 'asc' : 'desc';\n            // Set sorted column name\n            sortedColumn = accessor;\n        }\n        // Sort players\n        const sortedPlayers = this.sortPlayers(players, accessor, mode, sortDirection);\n        this.setState(\n            {\n                column: sortedColumn,\n                players: sortedPlayers,\n                direction: sortDirection\n            },\n            () => this.updateURL()\n        );\n    };\n\n    sortPlayers = (players, accessor, mode, direction) => {\n        return accessor == 'username'\n            ? _.orderBy(this.state.players, [o => o.username.toLowerCase()], [direction])\n            : _.orderBy(players, o => o.stats[`${accessor}_${mode}`], [direction]);\n    };\n\n    isPlayerSelected = username => {\n        const { players } = this.state;\n        return players.find(player => player.username === username);\n    };\n\n    updateURL = () => {\n        const { router } = this.props;\n        const { players, mode } = this.state;\n        const usernames = players.map(player => player.username);\n        router.replace({\n            pathname: '/leaderboard',\n            query: { mode: mode, usernames: usernames },\n            options: { shallow: true }\n        });\n    };\n\n    handleUsernameSearch = async (username, callback) => {\n        const usernames = await getUsernames(username);\n        // OPTIMIZE:\n        // CHANGE SEARCH RESULTS TO ACCEPT DATA GIVEN WITHOUT HAVING TO PRE-MODIFY THE DATA TO FIT\n        const formattedResults = usernames.map((result, index) => {\n            result.key = index;\n            result.title = result.username;\n            return result;\n        });\n        callback();\n        this.setState({ results: formattedResults });\n    };\n\n    initColumns = () => {\n        this.setState({\n            columns: [\n                {\n                    header: 'Player',\n                    accessor: 'username',\n                    sort: this.handleSort('username')\n                },\n                {\n                    header: 'K/D',\n                    accessor: 'kd',\n                    sort: this.handleSort('kd')\n                },\n                {\n                    header: 'Win %',\n                    accessor: 'winrate',\n                    sort: this.handleSort('winrate')\n                },\n                {\n                    header: 'Kills',\n                    accessor: 'kills',\n\n                    sort: this.handleSort('kills')\n                },\n                {\n                    header: 'Wins',\n                    accessor: 'placetop1',\n                    sort: this.handleSort('placetop1')\n                }\n            ]\n        });\n    };\n\n    render() {\n        const { columns, mode, players, loading, results } = this.state;\n        const debouncedHandleUsernameSearch = _.debounce(this.handleUsernameSearch, 500, {\n            maxWait: 1000\n        });\n        return (\n            <Container\n                text\n                textAlign=\"center\"\n                style={{\n                    paddingTop: '100px',\n                    paddingBottom: '100px',\n                    height: '100%'\n                }}\n            >\n                <Grid centered textAlign=\"center\">\n                    <Grid.Row>\n                        <h3>Leaderboards</h3>\n                    </Grid.Row>\n                    <Grid.Row>\n                        <Grid.Column\n                            mobile=\"16\"\n                            computer=\"6\"\n                            largeScreen=\"6\"\n                            tablet=\"6\"\n                            widescreen=\"6\"\n                        >\n                            <SearchBar\n                                handleResultSelect={this.addPlayer}\n                                fetchByUsername={debouncedHandleUsernameSearch}\n                                results={results}\n                            />\n                            <Icon name=\"share\" />\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row>\n                        <Grid.Column textAlign=\"center\">\n                            <Board\n                                columns={columns}\n                                mode={mode}\n                                players={players}\n                                removePlayer={this.removePlayer}\n                                handleModeChange={this.changeMode}\n                                loading={loading}\n                            />\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Container>\n        );\n    }\n}\n\nexport default Leaderboard;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport { Search, Label, Header } from 'semantic-ui-react';\nimport { getUsernames } from \"../actions\";\nimport { useDebounce } from \"../hooks/useDebounce\";\n\nvar resultRenderer = function resultRenderer(_ref) {\n  var uid = _ref.uid,\n      username = _ref.username;\n  return React.createElement(\"span\", {\n    key: uid,\n    title: username\n  }, username);\n};\n\nvar SearchBar = function SearchBar(_ref2) {\n  var handleResultSelect = _ref2.handleResultSelect;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchTerm = _useState2[0],\n      setSearchTerm = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      results = _useState4[0],\n      setResults = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isSearching = _useState6[0],\n      setIsSearching = _useState6[1];\n\n  var debouncedSearchTerm = useDebounce(searchTerm, 200);\n\n  function fetch() {\n    return _fetch.apply(this, arguments);\n  }\n\n  function _fetch() {\n    _fetch = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return getUsernames(debouncedSearchTerm);\n\n            case 2:\n              response = _context.sent;\n              setResults(response);\n              setIsSearching(false);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n    return _fetch.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    if (debouncedSearchTerm) {\n      setIsSearching(true);\n      fetch();\n    } else {\n      resetComponent();\n    }\n  }, [debouncedSearchTerm]);\n\n  var resetComponent = function resetComponent() {\n    setSearchTerm('');\n    setIsSearching(false);\n    setResults([]);\n  };\n\n  var onResultSelect = function onResultSelect(e, _ref3) {\n    var result = _ref3.result;\n    setSearchTerm(result.username);\n    handleResultSelect(result);\n    resetComponent();\n  };\n\n  var onSearchChange = function onSearchChange(e, _ref4) {\n    var value = _ref4.value;\n    if (!value.length) return resetComponent();\n    setIsSearching(true);\n    setSearchTerm(value);\n  };\n\n  return React.createElement(Search, {\n    input: {\n      fluid: true,\n      icon: 'arrow circle right'\n    },\n    loading: isSearching,\n    placeholder: 'Enter your Epic username',\n    onResultSelect: onResultSelect,\n    onSearchChange: onSearchChange,\n    results: results,\n    resultRenderer: resultRenderer,\n    value: searchTerm,\n    showNoResults: isSearching ? false : true\n  });\n};\n\nexport default SearchBar;","map":{"version":3,"sources":["/Users/kenny/Documents/GitHub/fortniteboards/src/components/SearchBar.js"],"names":["React","useState","useEffect","Search","Label","Header","getUsernames","useDebounce","resultRenderer","uid","username","SearchBar","handleResultSelect","searchTerm","setSearchTerm","results","setResults","isSearching","setIsSearching","debouncedSearchTerm","fetch","response","resetComponent","onResultSelect","e","result","onSearchChange","value","length","fluid","icon"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Search, Label, Header } from 'semantic-ui-react';\nimport { getUsernames } from '../actions';\n\nimport { useDebounce } from '../hooks/useDebounce';\n\nconst resultRenderer = ({ uid, username }) => (\n    <span key={uid} title={username}>\n        {username}\n    </span>\n);\n\nconst SearchBar = ({ handleResultSelect }) => {\n    const [searchTerm, setSearchTerm] = useState('');\n    const [results, setResults] = useState([]);\n    const [isSearching, setIsSearching] = useState(false);\n    const debouncedSearchTerm = useDebounce(searchTerm, 200);\n\n    async function fetch() {\n        const response = await getUsernames(debouncedSearchTerm);\n        setResults(response);\n        setIsSearching(false);\n    }\n\n    useEffect(() => {\n        if (debouncedSearchTerm) {\n            setIsSearching(true);\n            fetch();\n        } else {\n            resetComponent();\n        }\n    }, [debouncedSearchTerm]);\n\n    const resetComponent = () => {\n        setSearchTerm('');\n        setIsSearching(false);\n        setResults([]);\n    };\n\n    const onResultSelect = (e, { result }) => {\n        setSearchTerm(result.username);\n        handleResultSelect(result);\n        resetComponent();\n    };\n\n    const onSearchChange = (e, { value }) => {\n        if (!value.length) return resetComponent();\n        setIsSearching(true);\n        setSearchTerm(value);\n    };\n\n    return (\n        <Search\n            input={{ fluid: true, icon: 'arrow circle right' }}\n            loading={isSearching}\n            placeholder={'Enter your Epic username'}\n            onResultSelect={onResultSelect}\n            onSearchChange={onSearchChange}\n            results={results}\n            resultRenderer={resultRenderer}\n            value={searchTerm}\n            showNoResults={isSearching ? false : true}\n        />\n    );\n};\n\nexport default SearchBar;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { Container, Grid, Table, Icon, Header, TableHeader, TableRow, TableHeaderCell, TableBody, GridRow, TableCell } from 'semantic-ui-react';\nimport SearchBar from \"../src/components/SearchBar\";\nimport { fetchByUsername, getProfile } from \"../src/actions\";\nimport Board from \"../src/components/board\"; // show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n\nvar Leaderboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Leaderboard, _Component);\n\n  _createClass(Leaderboard, null, [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var store, query, pathname, asPath, req, usernames, entries, initialPlayers;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                store = _ref.store, query = _ref.query, pathname = _ref.pathname, asPath = _ref.asPath, req = _ref.req;\n                usernames = query.usernames, entries = query.entries; // spread into array for mapping\n\n                initialPlayers = [];\n\n                if (usernames) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  initialPlayers: initialPlayers\n                });\n\n              case 5:\n                if (!(entries <= 1)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                _context.next = 8;\n                return getProfile(usernames);\n\n              case 8:\n                initialPlayers = _context.sent;\n                _context.next = 14;\n                break;\n\n              case 11:\n                _context.next = 13;\n                return _Promise.all(usernames.map(function (username) {\n                  return getProfile(username);\n                }));\n\n              case 13:\n                initialPlayers = _context.sent;\n\n              case 14:\n                return _context.abrupt(\"return\", {\n                  initialPlayers: initialPlayers,\n                  entries: entries\n                });\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  function Leaderboard(props) {\n    var _this;\n\n    _classCallCheck(this, Leaderboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Leaderboard).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleSort\", function (accessor) {\n      return function () {\n        var _this$state = _this.state,\n            column = _this$state.column,\n            players = _this$state.players,\n            direction = _this$state.direction,\n            mode = _this$state.mode;\n\n        if (column !== accessor) {\n          var sortedPlayers = [];\n\n          if (accessor == 'username') {\n            sortedPlayers = _.sortBy(players, function (o) {\n              return o.stats[\"\".concat(accessor, \"_\").concat(mode)];\n            });\n          } else {\n            sortedPlayers = _.sortBy(_this.state.players, function (o) {\n              return o.username;\n            });\n          }\n\n          _this.setState({\n            column: accessor,\n            players: sortedPlayers,\n            direction: 'ascending'\n          }, function () {\n            return _this.updateURL();\n          });\n\n          return;\n        }\n\n        _this.setState({\n          players: players.reverse(),\n          direction: direction === 'ascending' ? 'descending' : 'ascending'\n        }, function () {\n          return _this.updateURL();\n        });\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"addPlayer\",\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(username) {\n        var players, newPlayer, updatedPlayers;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                players = _this.state.players;\n                _context2.next = 3;\n                return getProfile(username);\n\n              case 3:\n                newPlayer = _context2.sent;\n                updatedPlayers = [].concat(_toConsumableArray(players), [newPlayer]);\n\n                _this.setState({\n                  players: updatedPlayers\n                }, function () {\n                  return _this.updateURL();\n                });\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"removePlayer\", function (index) {\n      var players = _this.state.players;\n      var updatedPlayers = players.filter(function (player, i) {\n        return i !== index;\n      });\n\n      _this.setState({\n        players: updatedPlayers\n      }, function () {\n        return _this.updateURL();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"changeMode\", function (direction) {\n      var mode = _this.state.mode;\n      var nextMode = '';\n\n      switch (mode) {\n        case 'solo':\n          nextMode = direction === 'forward' ? 'duo' : 'squad';\n          break;\n\n        case 'duo':\n          nextMode = direction === 'forward' ? 'squad' : 'solo';\n          break;\n\n        case 'squad':\n          nextMode = direction === 'forward' ? 'solo' : 'duo';\n          break;\n\n        default:\n          break;\n      }\n\n      _this.setState({\n        mode: nextMode\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"isPlayerSelected\", function (username) {\n      var players = _this.state.players;\n      return players.find(function (player) {\n        return player.username === username;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"updateURL\", function () {\n      var router = _this.props.router;\n      var players = _this.state.players;\n      var usernames = players.map(function (player) {\n        return player.username;\n      });\n      router.push({\n        pathname: '/leaderboard',\n        query: {\n          entries: usernames.length,\n          usernames: usernames\n        },\n        options: {\n          shallow: true\n        }\n      });\n    });\n\n    _this.state = {\n      players: [],\n      mode: 'solo',\n      columns: [],\n      column: null,\n      direction: null\n    };\n    return _this;\n  }\n\n  _createClass(Leaderboard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          initialPlayers = _this$props.initialPlayers,\n          entries = _this$props.entries;\n      var players = this.state.players;\n      this.setState({\n        columns: [{\n          header: 'Player',\n          accessor: 'username',\n          size: '5',\n          sort: this.handleSort(function () {\n            return _.sortBy(_this2.state.players, function (o) {\n              return o.username;\n            });\n          }, 'username')\n        }, {\n          header: 'K/D',\n          accessor: 'kd',\n          size: '2',\n          sort: this.handleSort('kills')\n        }, {\n          header: 'Win %',\n          accessor: 'winrate',\n          size: '2',\n          sort: this.handleSort('winrate')\n        }, {\n          header: 'Kills',\n          accessor: 'kills',\n          size: '2',\n          sort: this.handleSort('kills')\n        }, {\n          header: 'Wins',\n          accessor: 'placetop1',\n          size: '2',\n          sort: this.handleSort('placetop1')\n        }],\n        players: entries <= 1 ? [].concat(_toConsumableArray(players), [initialPlayers]) : [].concat(_toConsumableArray(players), _toConsumableArray(initialPlayers)),\n        entries: entries\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          columns = _this$state2.columns,\n          mode = _this$state2.mode,\n          players = _this$state2.players;\n      var _this$props2 = this.props,\n          searchResults = _this$props2.searchResults,\n          fetchByUsername = _this$props2.fetchByUsername;\n\n      var debouncedfetchByUsername = _.debounce(fetchByUsername, 500, {\n        maxWait: 1000\n      });\n\n      return React.createElement(\"div\", null, React.createElement(Container, {\n        text: true,\n        textAlign: \"center\",\n        style: {\n          paddingTop: '200px',\n          paddingBottom: '100px',\n          height: '100%'\n        }\n      }, React.createElement(\"h1\", null, \"Board\"), React.createElement(Grid, {\n        columns: \"1\",\n        centered: true,\n        textAlign: \"center\"\n      }, React.createElement(Grid.Column, {\n        mobile: \"16\",\n        computer: \"6\",\n        largeScreen: \"6\",\n        tablet: \"6\",\n        widescreen: \"6\"\n      }, React.createElement(Container, null, React.createElement(SearchBar, {\n        checkDuplicateSelect: this.isPlayerSelected,\n        handleResultSelect: this.addPlayer,\n        fetchByUsername: debouncedfetchByUsername,\n        results: searchResults\n      }))), React.createElement(Grid.Column, {\n        textAlign: \"center\"\n      }, React.createElement(Board, {\n        columns: columns,\n        mode: mode,\n        players: players,\n        removePlayer: this.removePlayer,\n        handleModeChange: this.changeMode\n      })), React.createElement(Grid.Column, {\n        as: Table,\n        textAlign: \"center\",\n        sortable: true,\n        unstackable: true,\n        compact: true,\n        size: \"small\",\n        style: {\n          backgroundColor: '#2c3c57',\n          color: 'white'\n        }\n      }, React.createElement(Grid.Row, {\n        as: TableHeader\n      }, React.createElement(Grid.Row, {\n        as: TableRow\n      }, React.createElement(Grid.Column, {\n        as: TableHeaderCell\n      }, \"LEFT\"), React.createElement(Grid.Column, {\n        as: TableHeaderCell\n      }, \"SOLO\"), React.createElement(Grid.Column, {\n        as: TableHeaderCell\n      }, \"RIGHT\")), React.createElement(Grid.Row, {\n        as: TableRow\n      }, React.createElement(Grid.Column, {\n        as: TableHeaderCell,\n        style: {\n          backgroundColor: '#2c3c57'\n        },\n        textAlign: \"center\",\n        verticalAlign: \"middle\",\n        mobile: \"1\"\n      }, React.createElement(Header, {\n        size: \"tiny\"\n      }, React.createElement(Header.Subheader, {\n        as: \"h6\",\n        style: {\n          color: '#92a2bd'\n        }\n      }, \"#\"))), React.createElement(Grid.Column, {\n        as: TableHeaderCell,\n        style: {\n          backgroundColor: '#2c3c57'\n        },\n        textAlign: \"left\",\n        verticalAlign: \"middle\",\n        mobile: \"5\"\n      }, React.createElement(Header, {\n        size: \"tiny\"\n      }, React.createElement(Header.Subheader, {\n        as: \"h6\",\n        style: {\n          color: '#92a2bd'\n        }\n      }, \"Player\"))), React.createElement(Grid.Column, {\n        as: TableHeaderCell,\n        style: {\n          backgroundColor: '#2c3c57'\n        },\n        textAlign: \"left\",\n        verticalAlign: \"middle\",\n        mobile: \"2\"\n      }, React.createElement(Header, {\n        size: \"tiny\"\n      }, React.createElement(Header.Subheader, {\n        as: \"h6\",\n        style: {\n          color: '#92a2bd'\n        }\n      }, \"K/D\"))), React.createElement(Grid.Column, {\n        as: TableHeaderCell,\n        style: {\n          backgroundColor: '#2c3c57'\n        },\n        textAlign: \"left\",\n        verticalAlign: \"middle\",\n        mobile: \"2\"\n      }, React.createElement(Header, {\n        size: \"tiny\"\n      }, React.createElement(Header.Subheader, {\n        as: \"h6\",\n        style: {\n          color: '#92a2bd'\n        }\n      }, \"Win %\"))), React.createElement(Grid.Column, {\n        as: TableHeaderCell,\n        style: {\n          backgroundColor: '#2c3c57'\n        },\n        textAlign: \"left\",\n        verticalAlign: \"middle\",\n        mobile: \"2\"\n      }, React.createElement(Header, {\n        size: \"tiny\"\n      }, React.createElement(Header.Subheader, {\n        as: \"h6\",\n        style: {\n          color: '#92a2bd'\n        }\n      }, \"Kills\"))), React.createElement(Grid.Column, {\n        as: TableHeaderCell,\n        style: {\n          backgroundColor: '#2c3c57'\n        },\n        textAlign: \"left\",\n        verticalAlign: \"middle\",\n        mobile: \"2\"\n      }, React.createElement(Header, {\n        size: \"tiny\"\n      }, React.createElement(Header.Subheader, {\n        as: \"h6\",\n        style: {\n          color: '#92a2bd'\n        }\n      }, \"Wins\"))), React.createElement(Grid.Column, {\n        as: TableHeaderCell,\n        style: {\n          backgroundColor: '#2c3c57'\n        },\n        textAlign: \"center\",\n        verticalAlign: \"middle\",\n        mobile: \"1\"\n      }))), React.createElement(Grid.Row, {\n        as: TableBody\n      }, React.createElement(Grid.Row, {\n        as: TableRow\n      }, React.createElement(Grid.Column, {\n        as: TableCell\n      }, \"1\"), React.createElement(Grid.Column, {\n        as: TableCell\n      }, \"Ninja\"), React.createElement(Grid.Column, {\n        as: TableCell\n      }, \"6.93\"), React.createElement(Grid.Column, {\n        as: TableCell\n      }, \"24.13\"), React.createElement(Grid.Column, {\n        as: TableCell\n      }, \"1503\"), React.createElement(Grid.Column, {\n        as: TableCell\n      }, \"69\"), React.createElement(Grid.Column, {\n        as: Icon,\n        name: \"trash alternate outline\"\n      })))))));\n    }\n  }]);\n\n  return Leaderboard;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    searchResults: state.search.searchResults\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    fetchByUsername: fetchByUsername\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Leaderboard);\n{\n  /* <Table\n  sortable\n  unstackable\n  compact\n  size=\"small\"\n  style={{ backgroundColor: '#2c3c57', color: 'white' }}\n  >\n  <Table.Header>\n      <Table.Row>\n          <Table.HeaderCell\n              textAlign=\"center\"\n              style={{ backgroundColor: '#2c3c57', color: 'white' }}\n          >\n              <Header size=\"tiny\">\n                  <Header.Subheader\n                      as=\"h6\"\n                      style={{\n                          color: '#92a2bd'\n                      }}\n                  >\n                      #\n                  </Header.Subheader>\n              </Header>{' '}\n          </Table.HeaderCell>\n          <Table.HeaderCell\n              style={{ backgroundColor: '#2c3c57', color: 'white' }}\n              // sorted={column === 'username' ? direction : null}\n              onClick={this.handleSort(() => _.sortBy(players, o => o.username), 'username')}\n          >\n              <Header size=\"tiny\">\n                  <Header.Subheader\n                      as=\"h6\"\n                      style={{\n                          color: '#92a2bd'\n                      }}\n                  >\n                      Player\n                  </Header.Subheader>\n              </Header>\n          </Table.HeaderCell>\n          <Table.HeaderCell\n              textAlign=\"center\"\n              style={{ backgroundColor: '#2c3c57', color: 'white' }}\n              // sorted={column === 'kd' ? direction : null}\n              onClick={this.handleSort(() => _.sortBy(players, o => o.stats[`kd_${mode}`]), 'kd')}\n          >\n              <Header size=\"tiny\">\n                  <Header.Subheader\n                      as=\"h6\"\n                      style={{\n                          color: '#92a2bd'\n                      }}\n                  >\n                      K/D\n                  </Header.Subheader>\n              </Header>\n          </Table.HeaderCell>\n          <Table.HeaderCell\n              textAlign=\"center\"\n              style={{ backgroundColor: '#2c3c57', color: 'white' }}\n              // sorted={column === 'winrate' ? direction : null}\n              onClick={this.handleSort(\n                  () => _.sortBy(players, o => o.stats[`winrate_${mode}`]),\n                  'winrate'\n              )}\n          >\n              <Header size=\"tiny\">\n                  <Header.Subheader\n                      as=\"h6\"\n                      style={{\n                          color: '#92a2bd'\n                      }}\n                  >\n                      Win %\n                  </Header.Subheader>\n              </Header>\n          </Table.HeaderCell>\n          <Table.HeaderCell\n              textAlign=\"center\"\n              style={{ backgroundColor: '#2c3c57', color: 'white' }}\n              // sorted={column === 'kills' ? direction : null}\n              onClick={this.handleSort(\n                  () => _.sortBy(players, o => o.stats[`kills_${mode}`]),\n                  'kills'\n              )}\n          >\n              <Header size=\"tiny\">\n                  <Header.Subheader\n                      as=\"h6\"\n                      style={{\n                          color: '#92a2bd'\n                      }}\n                  >\n                      Kills\n                  </Header.Subheader>\n              </Header>\n          </Table.HeaderCell>\n          <Table.HeaderCell\n              textAlign=\"center\"\n              style={{ backgroundColor: '#2c3c57', color: 'white' }}\n              // sorted={column === 'wins' ? direction : null}\n              onClick={this.handleSort(\n                  () => _.sortBy(players, o => o.stats[`placetop1_${mode}`]),\n                  'wins'\n              )}\n          >\n              <Header size=\"tiny\">\n                  <Header.Subheader\n                      as=\"h6\"\n                      style={{\n                          color: '#92a2bd'\n                      }}\n                  >\n                      Wins\n                  </Header.Subheader>\n              </Header>\n          </Table.HeaderCell>\n      </Table.Row>\n  </Table.Header>\n  <Table.Body>\n      {_.map(players, (player, index) => (\n          <Table.Row key={player.username} verticalAlign=\"top\">\n              <Table.Cell>\n                  <Header as=\"h6\" style={{ color: '#92a2bd' }}>\n                      {index + 1}\n                  </Header>\n              </Table.Cell>\n              <Table.Cell singleLine>\n                  <Header as=\"h6\" style={{ color: 'white' }}>\n                      {player.username}\n                       <Header.Subheader size=\"small\" style={{ color: '#92a2bd' }}>\n                          {player.stats[`matchesplayed_${mode}`]} Matches\n                      </Header.Subheader>\n                  </Header>\n              </Table.Cell>\n              <Table.Cell singleLine textAlign=\"center\">\n                  <Header as=\"h4\" style={{ color: 'white' }}>\n                      {player.stats[`kd_${mode}`]}\n                  </Header>\n              </Table.Cell>\n              <Table.Cell singleLine textAlign=\"center\">\n                  <Header as=\"h4\" style={{ color: 'white' }}>\n                      {player.stats[`winrate_${mode}`]}\n                  </Header>\n              </Table.Cell>\n              <Table.Cell singleLine textAlign=\"center\">\n                  <Header as=\"h4\" style={{ color: 'white' }}>\n                      {player.stats[`kills_${mode}`]}\n                  </Header>\n              </Table.Cell>\n              <Table.Cell collapsing singleLine textAlign=\"center\">\n                  <Header as=\"h4\" style={{ color: 'white' }}>\n                      {player.stats[`placetop1_${mode}`]}\n                  </Header>\n              </Table.Cell>\n              <Table.Cell\n                  singleLine\n                  textAlign=\"center\"\n                  icon=\"trash alternate outline\"\n                  style={{\n                      color: 'red',\n                      fontSize: '12px',\n                      paddingLeft: '0px'\n                  }}\n              />\n          </Table.Row>\n      ))}\n  </Table.Body>\n  </Table>; */\n}","map":{"version":3,"sources":["/Users/kenny/Documents/GitHub/fortniteboards/pages/leaderboard.js"],"names":["React","Component","bindActionCreators","connect","_","Container","Grid","Table","Icon","Header","TableHeader","TableRow","TableHeaderCell","TableBody","GridRow","TableCell","SearchBar","fetchByUsername","getProfile","Board","Leaderboard","store","query","pathname","asPath","req","usernames","entries","initialPlayers","all","map","username","props","accessor","state","column","players","direction","mode","sortedPlayers","sortBy","o","stats","setState","updateURL","reverse","newPlayer","updatedPlayers","index","filter","player","i","nextMode","find","router","push","length","options","shallow","columns","header","size","sort","handleSort","searchResults","debouncedfetchByUsername","debounce","maxWait","paddingTop","paddingBottom","height","isPlayerSelected","addPlayer","removePlayer","changeMode","backgroundColor","color","mapStateToProps","search","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\n\nimport {\n    Container,\n    Grid,\n    Table,\n    Icon,\n    Header,\n    TableHeader,\n    TableRow,\n    TableHeaderCell,\n    TableBody,\n    GridRow,\n    TableCell\n} from 'semantic-ui-react';\nimport SearchBar from '../src/components/SearchBar';\nimport { fetchByUsername, getProfile } from '../src/actions';\n\nimport Board from '../src/components/board';\n\n// show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n\nclass Leaderboard extends Component {\n    static async getInitialProps({ store, query, pathname, asPath, req }) {\n        const { usernames, entries } = query;\n        // spread into array for mapping\n        let initialPlayers = [];\n\n        if (!usernames) return { initialPlayers };\n\n        if (entries <= 1) {\n            initialPlayers = await getProfile(usernames);\n        } else {\n            initialPlayers = await Promise.all(usernames.map(username => getProfile(username)));\n        }\n        return { initialPlayers, entries };\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: [],\n            mode: 'solo',\n            columns: [],\n            column: null,\n            direction: null\n        };\n    }\n\n    handleSort = accessor => () => {\n        const { column, players, direction, mode } = this.state;\n        if (column !== accessor) {\n            let sortedPlayers = [];\n            if (accessor == 'username') {\n                sortedPlayers = _.sortBy(players, o => o.stats[`${accessor}_${mode}`]);\n            } else {\n                sortedPlayers = _.sortBy(this.state.players, o => o.username);\n            }\n            this.setState(\n                {\n                    column: accessor,\n                    players: sortedPlayers,\n                    direction: 'ascending'\n                },\n                () => this.updateURL()\n            );\n\n            return;\n        }\n\n        this.setState(\n            {\n                players: players.reverse(),\n                direction: direction === 'ascending' ? 'descending' : 'ascending'\n            },\n            () => this.updateURL()\n        );\n    };\n\n    componentDidMount() {\n        const { initialPlayers, entries } = this.props;\n        const { players } = this.state;\n        this.setState({\n            columns: [\n                {\n                    header: 'Player',\n                    accessor: 'username',\n                    size: '5',\n                    sort: this.handleSort(\n                        () => _.sortBy(this.state.players, o => o.username),\n                        'username'\n                    )\n                },\n                {\n                    header: 'K/D',\n                    accessor: 'kd',\n                    size: '2',\n                    sort: this.handleSort('kills')\n                },\n                {\n                    header: 'Win %',\n                    accessor: 'winrate',\n                    size: '2',\n                    sort: this.handleSort('winrate')\n                },\n                {\n                    header: 'Kills',\n                    accessor: 'kills',\n                    size: '2',\n                    sort: this.handleSort('kills')\n                },\n                {\n                    header: 'Wins',\n                    accessor: 'placetop1',\n                    size: '2',\n                    sort: this.handleSort('placetop1')\n                }\n            ],\n            players: entries <= 1 ? [...players, initialPlayers] : [...players, ...initialPlayers],\n            entries: entries\n        });\n    }\n\n    addPlayer = async username => {\n        const { players } = this.state;\n\n        const newPlayer = await getProfile(username);\n        const updatedPlayers = [...players, newPlayer];\n        this.setState({ players: updatedPlayers }, () => this.updateURL());\n    };\n\n    removePlayer = index => {\n        const { players } = this.state;\n        const updatedPlayers = players.filter((player, i) => i !== index);\n        this.setState({ players: updatedPlayers }, () => this.updateURL());\n    };\n\n    changeMode = direction => {\n        const { mode } = this.state;\n        let nextMode = '';\n        switch (mode) {\n            case 'solo':\n                nextMode = direction === 'forward' ? 'duo' : 'squad';\n                break;\n            case 'duo':\n                nextMode = direction === 'forward' ? 'squad' : 'solo';\n                break;\n            case 'squad':\n                nextMode = direction === 'forward' ? 'solo' : 'duo';\n                break;\n            default:\n                break;\n        }\n        this.setState({ mode: nextMode });\n    };\n\n    isPlayerSelected = username => {\n        const { players } = this.state;\n        return players.find(player => player.username === username);\n    };\n\n    updateURL = () => {\n        const { router } = this.props;\n        const { players } = this.state;\n        const usernames = players.map(player => player.username);\n        router.push({\n            pathname: '/leaderboard',\n            query: { entries: usernames.length, usernames: usernames },\n            options: { shallow: true }\n        });\n    };\n\n    render() {\n        const { columns, mode, players } = this.state;\n        const { searchResults, fetchByUsername } = this.props;\n        const debouncedfetchByUsername = _.debounce(fetchByUsername, 500, {\n            maxWait: 1000\n        });\n        return (\n            <div>\n                <Container\n                    text\n                    textAlign=\"center\"\n                    style={{\n                        paddingTop: '200px',\n                        paddingBottom: '100px',\n                        height: '100%'\n                    }}\n                >\n                    <h1>Board</h1>\n                    <Grid columns=\"1\" centered textAlign=\"center\">\n                        <Grid.Column\n                            mobile=\"16\"\n                            computer=\"6\"\n                            largeScreen=\"6\"\n                            tablet=\"6\"\n                            widescreen=\"6\"\n                        >\n                            <Container>\n                                <SearchBar\n                                    checkDuplicateSelect={this.isPlayerSelected}\n                                    handleResultSelect={this.addPlayer}\n                                    fetchByUsername={debouncedfetchByUsername}\n                                    results={searchResults}\n                                />\n                            </Container>\n                        </Grid.Column>\n                        <Grid.Column textAlign=\"center\">\n                            <Board\n                                columns={columns}\n                                mode={mode}\n                                players={players}\n                                removePlayer={this.removePlayer}\n                                handleModeChange={this.changeMode}\n                            />\n                        </Grid.Column>\n                        {/*  */}\n                        {/*  */}\n                        {/*  */}\n                        {/*  */}\n                        {/*  */}\n                        {/*  */}\n                        {/*  */}\n                        {/*  */}\n                        {/*  */}\n                        {/*  */}\n                        {/*  */}\n                        {/*  */}\n                        {/*  */}\n                        {/*  */}\n                        {/*  */}\n                        <Grid.Column\n                            as={Table}\n                            textAlign=\"center\"\n                            sortable\n                            unstackable\n                            compact\n                            size=\"small\"\n                            style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                        >\n                            <Grid.Row as={TableHeader}>\n                                {/* MODE HEADER */}\n                                <Grid.Row as={TableRow}>\n                                    <Grid.Column as={TableHeaderCell}>LEFT</Grid.Column>\n                                    <Grid.Column as={TableHeaderCell}>SOLO</Grid.Column>\n                                    <Grid.Column as={TableHeaderCell}>RIGHT</Grid.Column>\n                                </Grid.Row>\n                                {/* STATS EHADER */}\n                                <Grid.Row as={TableRow}>\n                                    <Grid.Column\n                                        as={TableHeaderCell}\n                                        style={{ backgroundColor: '#2c3c57' }}\n                                        textAlign=\"center\"\n                                        verticalAlign=\"middle\"\n                                        mobile=\"1\"\n                                    >\n                                        <Header size=\"tiny\">\n                                            <Header.Subheader as=\"h6\" style={{ color: '#92a2bd' }}>\n                                                #\n                                            </Header.Subheader>\n                                        </Header>\n                                    </Grid.Column>\n                                    <Grid.Column\n                                        as={TableHeaderCell}\n                                        style={{ backgroundColor: '#2c3c57' }}\n                                        textAlign=\"left\"\n                                        verticalAlign=\"middle\"\n                                        mobile=\"5\"\n                                    >\n                                        <Header size=\"tiny\">\n                                            <Header.Subheader\n                                                as=\"h6\"\n                                                style={{\n                                                    color: '#92a2bd'\n                                                }}\n                                            >\n                                                Player\n                                            </Header.Subheader>\n                                        </Header>\n                                    </Grid.Column>\n                                    <Grid.Column\n                                        as={TableHeaderCell}\n                                        style={{ backgroundColor: '#2c3c57' }}\n                                        textAlign=\"left\"\n                                        verticalAlign=\"middle\"\n                                        mobile=\"2\"\n                                    >\n                                        <Header size=\"tiny\">\n                                            <Header.Subheader\n                                                as=\"h6\"\n                                                style={{\n                                                    color: '#92a2bd'\n                                                }}\n                                            >\n                                                K/D\n                                            </Header.Subheader>\n                                        </Header>\n                                    </Grid.Column>\n                                    <Grid.Column\n                                        as={TableHeaderCell}\n                                        style={{ backgroundColor: '#2c3c57' }}\n                                        textAlign=\"left\"\n                                        verticalAlign=\"middle\"\n                                        mobile=\"2\"\n                                    >\n                                        <Header size=\"tiny\">\n                                            <Header.Subheader\n                                                as=\"h6\"\n                                                style={{\n                                                    color: '#92a2bd'\n                                                }}\n                                            >\n                                                Win %\n                                            </Header.Subheader>\n                                        </Header>\n                                    </Grid.Column>\n                                    <Grid.Column\n                                        as={TableHeaderCell}\n                                        style={{ backgroundColor: '#2c3c57' }}\n                                        textAlign=\"left\"\n                                        verticalAlign=\"middle\"\n                                        mobile=\"2\"\n                                    >\n                                        <Header size=\"tiny\">\n                                            <Header.Subheader\n                                                as=\"h6\"\n                                                style={{\n                                                    color: '#92a2bd'\n                                                }}\n                                            >\n                                                Kills\n                                            </Header.Subheader>\n                                        </Header>\n                                    </Grid.Column>\n                                    <Grid.Column\n                                        as={TableHeaderCell}\n                                        style={{ backgroundColor: '#2c3c57' }}\n                                        textAlign=\"left\"\n                                        verticalAlign=\"middle\"\n                                        mobile=\"2\"\n                                    >\n                                        <Header size=\"tiny\">\n                                            <Header.Subheader\n                                                as=\"h6\"\n                                                style={{\n                                                    color: '#92a2bd'\n                                                }}\n                                            >\n                                                Wins\n                                            </Header.Subheader>\n                                        </Header>\n                                    </Grid.Column>\n                                    <Grid.Column\n                                        as={TableHeaderCell}\n                                        style={{ backgroundColor: '#2c3c57' }}\n                                        textAlign=\"center\"\n                                        verticalAlign=\"middle\"\n                                        mobile=\"1\"\n                                    />\n                                </Grid.Row>\n                            </Grid.Row>\n                            <Grid.Row as={TableBody}>\n                                <Grid.Row as={TableRow}>\n                                    <Grid.Column as={TableCell}>1</Grid.Column>\n                                    <Grid.Column as={TableCell}>Ninja</Grid.Column>\n                                    <Grid.Column as={TableCell}>6.93</Grid.Column>\n                                    <Grid.Column as={TableCell}>24.13</Grid.Column>\n                                    <Grid.Column as={TableCell}>1503</Grid.Column>\n                                    <Grid.Column as={TableCell}>69</Grid.Column>\n                                    <Grid.Column as={Icon} name=\"trash alternate outline\" />\n                                </Grid.Row>\n                            </Grid.Row>\n                        </Grid.Column>\n                    </Grid>\n                </Container>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        searchResults: state.search.searchResults\n    };\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators({ fetchByUsername }, dispatch);\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Leaderboard);\n\n{\n    /* <Table\n    sortable\n    unstackable\n    compact\n    size=\"small\"\n    style={{ backgroundColor: '#2c3c57', color: 'white' }}\n>\n    <Table.Header>\n        <Table.Row>\n            <Table.HeaderCell\n                textAlign=\"center\"\n                style={{ backgroundColor: '#2c3c57', color: 'white' }}\n            >\n                <Header size=\"tiny\">\n                    <Header.Subheader\n                        as=\"h6\"\n                        style={{\n                            color: '#92a2bd'\n                        }}\n                    >\n                        #\n                    </Header.Subheader>\n                </Header>{' '}\n            </Table.HeaderCell>\n            <Table.HeaderCell\n                style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                // sorted={column === 'username' ? direction : null}\n                onClick={this.handleSort(() => _.sortBy(players, o => o.username), 'username')}\n            >\n                <Header size=\"tiny\">\n                    <Header.Subheader\n                        as=\"h6\"\n                        style={{\n                            color: '#92a2bd'\n                        }}\n                    >\n                        Player\n                    </Header.Subheader>\n                </Header>\n            </Table.HeaderCell>\n            <Table.HeaderCell\n                textAlign=\"center\"\n                style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                // sorted={column === 'kd' ? direction : null}\n                onClick={this.handleSort(() => _.sortBy(players, o => o.stats[`kd_${mode}`]), 'kd')}\n            >\n                <Header size=\"tiny\">\n                    <Header.Subheader\n                        as=\"h6\"\n                        style={{\n                            color: '#92a2bd'\n                        }}\n                    >\n                        K/D\n                    </Header.Subheader>\n                </Header>\n            </Table.HeaderCell>\n            <Table.HeaderCell\n                textAlign=\"center\"\n                style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                // sorted={column === 'winrate' ? direction : null}\n                onClick={this.handleSort(\n                    () => _.sortBy(players, o => o.stats[`winrate_${mode}`]),\n                    'winrate'\n                )}\n            >\n                <Header size=\"tiny\">\n                    <Header.Subheader\n                        as=\"h6\"\n                        style={{\n                            color: '#92a2bd'\n                        }}\n                    >\n                        Win %\n                    </Header.Subheader>\n                </Header>\n            </Table.HeaderCell>\n            <Table.HeaderCell\n                textAlign=\"center\"\n                style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                // sorted={column === 'kills' ? direction : null}\n                onClick={this.handleSort(\n                    () => _.sortBy(players, o => o.stats[`kills_${mode}`]),\n                    'kills'\n                )}\n            >\n                <Header size=\"tiny\">\n                    <Header.Subheader\n                        as=\"h6\"\n                        style={{\n                            color: '#92a2bd'\n                        }}\n                    >\n                        Kills\n                    </Header.Subheader>\n                </Header>\n            </Table.HeaderCell>\n            <Table.HeaderCell\n                textAlign=\"center\"\n                style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                // sorted={column === 'wins' ? direction : null}\n                onClick={this.handleSort(\n                    () => _.sortBy(players, o => o.stats[`placetop1_${mode}`]),\n                    'wins'\n                )}\n            >\n                <Header size=\"tiny\">\n                    <Header.Subheader\n                        as=\"h6\"\n                        style={{\n                            color: '#92a2bd'\n                        }}\n                    >\n                        Wins\n                    </Header.Subheader>\n                </Header>\n            </Table.HeaderCell>\n        </Table.Row>\n    </Table.Header>\n    <Table.Body>\n        {_.map(players, (player, index) => (\n            <Table.Row key={player.username} verticalAlign=\"top\">\n                <Table.Cell>\n                    <Header as=\"h6\" style={{ color: '#92a2bd' }}>\n                        {index + 1}\n                    </Header>\n                </Table.Cell>\n                <Table.Cell singleLine>\n                    <Header as=\"h6\" style={{ color: 'white' }}>\n                        {player.username}\n\n                        <Header.Subheader size=\"small\" style={{ color: '#92a2bd' }}>\n                            {player.stats[`matchesplayed_${mode}`]} Matches\n                        </Header.Subheader>\n                    </Header>\n                </Table.Cell>\n                <Table.Cell singleLine textAlign=\"center\">\n                    <Header as=\"h4\" style={{ color: 'white' }}>\n                        {player.stats[`kd_${mode}`]}\n                    </Header>\n                </Table.Cell>\n                <Table.Cell singleLine textAlign=\"center\">\n                    <Header as=\"h4\" style={{ color: 'white' }}>\n                        {player.stats[`winrate_${mode}`]}\n                    </Header>\n                </Table.Cell>\n                <Table.Cell singleLine textAlign=\"center\">\n                    <Header as=\"h4\" style={{ color: 'white' }}>\n                        {player.stats[`kills_${mode}`]}\n                    </Header>\n                </Table.Cell>\n                <Table.Cell collapsing singleLine textAlign=\"center\">\n                    <Header as=\"h4\" style={{ color: 'white' }}>\n                        {player.stats[`placetop1_${mode}`]}\n                    </Header>\n                </Table.Cell>\n                <Table.Cell\n                    singleLine\n                    textAlign=\"center\"\n                    icon=\"trash alternate outline\"\n                    style={{\n                        color: 'red',\n                        fontSize: '12px',\n                        paddingLeft: '0px'\n                    }}\n                />\n            </Table.Row>\n        ))}\n    </Table.Body>\n</Table>; */\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { Container, Grid, Table, Icon, Header } from 'semantic-ui-react';\nimport SearchBar from \"../src/components/SearchBar\";\nimport { fetchByUsername, getProfile } from \"../src/actions\";\nimport Board from \"../src/components/board\"; // show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n\nvar Leaderboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Leaderboard, _Component);\n\n  _createClass(Leaderboard, null, [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var store, query, pathname, asPath, req, usernames, entries, initialPlayers;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                store = _ref.store, query = _ref.query, pathname = _ref.pathname, asPath = _ref.asPath, req = _ref.req;\n                usernames = query.usernames, entries = query.entries; // spread into array for mapping\n\n                initialPlayers = [];\n\n                if (usernames) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  initialPlayers: initialPlayers\n                });\n\n              case 5:\n                if (!(entries <= 1)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                _context.next = 8;\n                return getProfile(usernames);\n\n              case 8:\n                initialPlayers = _context.sent;\n                _context.next = 14;\n                break;\n\n              case 11:\n                _context.next = 13;\n                return _Promise.all(usernames.map(function (username) {\n                  return getProfile(username);\n                }));\n\n              case 13:\n                initialPlayers = _context.sent;\n\n              case 14:\n                return _context.abrupt(\"return\", {\n                  initialPlayers: initialPlayers,\n                  entries: entries\n                });\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  function Leaderboard(props) {\n    var _this;\n\n    _classCallCheck(this, Leaderboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Leaderboard).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleSort\", function (sortFn, clickedColumn) {\n      return function () {\n        var _this$state = _this.state,\n            column = _this$state.column,\n            players = _this$state.players,\n            direction = _this$state.direction;\n\n        if (column !== clickedColumn) {\n          _this.setState({\n            column: clickedColumn,\n            players: sortFn(),\n            direction: 'ascending'\n          }, function () {\n            return _this.updateURL();\n          });\n\n          return;\n        }\n\n        _this.setState({\n          players: players.reverse(),\n          direction: direction === 'ascending' ? 'descending' : 'ascending'\n        }, function () {\n          return _this.updateURL();\n        });\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"addPlayer\",\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(username) {\n        var players, newPlayer, updatedPlayers;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                players = _this.state.players;\n                _context2.next = 3;\n                return getProfile(username);\n\n              case 3:\n                newPlayer = _context2.sent;\n                updatedPlayers = [].concat(_toConsumableArray(players), [newPlayer]);\n\n                _this.setState({\n                  players: updatedPlayers\n                }, function () {\n                  return _this.updateURL();\n                });\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"removePlayer\", function (index) {\n      var players = _this.state.players;\n      var updatedPlayers = players.filter(function (player, i) {\n        return i !== index;\n      });\n\n      _this.setState({\n        players: updatedPlayers\n      }, function () {\n        return _this.updateURL();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"sortPlayers\", function (columnHeader) {\n      _this.setState({\n        activeColumnSort: columnHeader\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"changeMode\", function (direction) {\n      var mode = _this.state.mode;\n      var nextMode = '';\n\n      switch (mode) {\n        case 'solo':\n          nextMode = direction === 'forward' ? 'duo' : 'squad';\n          break;\n\n        case 'duo':\n          nextMode = direction === 'forward' ? 'squad' : 'solo';\n          break;\n\n        case 'squad':\n          nextMode = direction === 'forward' ? 'solo' : 'duo';\n          break;\n\n        default:\n          break;\n      }\n\n      _this.setState({\n        mode: nextMode\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"isPlayerSelected\", function (username) {\n      var players = _this.state.players;\n      return players.find(function (player) {\n        return player.username === username;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"updateURL\", function () {\n      var router = _this.props.router;\n      var players = _this.state.players;\n      var usernames = players.map(function (player) {\n        return player.username;\n      });\n      router.push({\n        pathname: '/leaderboard',\n        query: {\n          entries: usernames.length,\n          usernames: usernames\n        },\n        options: {\n          shallow: true\n        }\n      });\n    });\n\n    _this.state = {\n      players: [],\n      mode: 'solo',\n      columns: [{\n        header: 'Player',\n        accessor: 'username',\n        size: '5'\n      }, {\n        header: 'K/D',\n        accessor: 'kd',\n        size: '2'\n      }, {\n        header: 'Win %',\n        accessor: 'winrate',\n        size: '2'\n      }, {\n        header: 'Kills',\n        accessor: 'kills',\n        size: '2'\n      }, {\n        header: 'Wins',\n        accessor: 'placetop1',\n        size: '2' // { header: 'Matches', accessor: 'matchesplayed', size: '3' }\n\n      }],\n      activeColumnSort: '#',\n      column: null,\n      direction: null\n    };\n    return _this;\n  }\n\n  _createClass(Leaderboard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          initialPlayers = _this$props.initialPlayers,\n          entries = _this$props.entries;\n      var players = this.state.players;\n      this.setState({\n        players: entries <= 1 ? [].concat(_toConsumableArray(players), [initialPlayers]) : [].concat(_toConsumableArray(players), _toConsumableArray(initialPlayers)),\n        entries: entries\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          columns = _this$state2.columns,\n          mode = _this$state2.mode,\n          players = _this$state2.players,\n          activeColumnSort = _this$state2.activeColumnSort,\n          column = _this$state2.column,\n          direction = _this$state2.direction;\n      var _this$props2 = this.props,\n          searchResults = _this$props2.searchResults,\n          fetchByUsername = _this$props2.fetchByUsername;\n\n      var debouncedfetchByUsername = _.debounce(fetchByUsername, 500, {\n        maxWait: 1000\n      });\n\n      return React.createElement(\"div\", null, React.createElement(Container, {\n        text: true,\n        textAlign: \"center\",\n        style: {\n          paddingTop: '200px',\n          paddingBottom: '100px',\n          height: '100%'\n        }\n      }, React.createElement(\"h1\", null, \"Board\"), React.createElement(Grid, {\n        columns: \"1\",\n        centered: true,\n        textAlign: \"center\"\n      }, React.createElement(Grid.Column, {\n        mobile: \"16\",\n        computer: \"6\",\n        largeScreen: \"6\",\n        tablet: \"6\",\n        widescreen: \"6\"\n      }, React.createElement(Container, null, React.createElement(SearchBar, {\n        checkDuplicateSelect: this.isPlayerSelected,\n        handleResultSelect: this.addPlayer,\n        fetchByUsername: debouncedfetchByUsername,\n        results: searchResults\n      }))), React.createElement(Grid.Column, {\n        textAlign: \"center\"\n      }, React.createElement(Board, {\n        columns: columns,\n        sortPlayers: this.sortPlayers,\n        activeColumnSort: activeColumnSort,\n        mode: mode,\n        players: players,\n        removePlayer: this.removePlayer,\n        handleModeChange: this.changeMode\n      })), React.createElement(Grid.Column, {\n        textAlign: \"center\"\n      }), React.createElement(Table, {\n        as: Grid,\n        sortable: true,\n        unstackable: true,\n        compact: true,\n        size: \"small\",\n        style: {\n          backgroundColor: '#2c3c57',\n          color: 'white'\n        }\n      }, React.createElement(Table.Header, null, React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        style: {\n          backgroundColor: '#2c3c57',\n          color: 'white'\n        }\n      }, React.createElement(Header, {\n        size: \"tiny\"\n      }, React.createElement(Header.Subheader, {\n        as: \"h6\",\n        style: {\n          color: '#92a2bd'\n        }\n      }, \"#\")), ' '), React.createElement(Table.HeaderCell, {\n        style: {\n          backgroundColor: '#2c3c57',\n          color: 'white'\n        } // sorted={column === 'username' ? direction : null}\n        ,\n        onClick: this.handleSort(function () {\n          return _.sortBy(players, function (o) {\n            return o.username;\n          });\n        }, 'username')\n      }, React.createElement(Header, {\n        size: \"tiny\"\n      }, React.createElement(Header.Subheader, {\n        as: \"h6\",\n        style: {\n          color: '#92a2bd'\n        }\n      }, \"Player\"))), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        style: {\n          backgroundColor: '#2c3c57',\n          color: 'white'\n        } // sorted={column === 'kd' ? direction : null}\n        ,\n        onClick: this.handleSort(function () {\n          return _.sortBy(players, function (o) {\n            return o.stats[\"kd_\".concat(mode)];\n          });\n        }, 'kd')\n      }, React.createElement(Header, {\n        size: \"tiny\"\n      }, React.createElement(Header.Subheader, {\n        as: \"h6\",\n        style: {\n          color: '#92a2bd'\n        }\n      }, \"K/D\"))), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        style: {\n          backgroundColor: '#2c3c57',\n          color: 'white'\n        } // sorted={column === 'winrate' ? direction : null}\n        ,\n        onClick: this.handleSort(function () {\n          return _.sortBy(players, function (o) {\n            return o.stats[\"winrate_\".concat(mode)];\n          });\n        }, 'winrate')\n      }, React.createElement(Header, {\n        size: \"tiny\"\n      }, React.createElement(Header.Subheader, {\n        as: \"h6\",\n        style: {\n          color: '#92a2bd'\n        }\n      }, \"Win %\"))), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        style: {\n          backgroundColor: '#2c3c57',\n          color: 'white'\n        } // sorted={column === 'kills' ? direction : null}\n        ,\n        onClick: this.handleSort(function () {\n          return _.sortBy(players, function (o) {\n            return o.stats[\"kills_\".concat(mode)];\n          });\n        }, 'kills')\n      }, React.createElement(Header, {\n        size: \"tiny\"\n      }, React.createElement(Header.Subheader, {\n        as: \"h6\",\n        style: {\n          color: '#92a2bd'\n        }\n      }, \"Kills\"))), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        style: {\n          backgroundColor: '#2c3c57',\n          color: 'white'\n        } // sorted={column === 'wins' ? direction : null}\n        ,\n        onClick: this.handleSort(function () {\n          return _.sortBy(players, function (o) {\n            return o.stats[\"placetop1_\".concat(mode)];\n          });\n        }, 'wins')\n      }, React.createElement(Header, {\n        size: \"tiny\"\n      }, React.createElement(Header.Subheader, {\n        as: \"h6\",\n        style: {\n          color: '#92a2bd'\n        }\n      }, \"Wins\"))))), React.createElement(Table.Body, null, _.map(players, function (player, index) {\n        return React.createElement(Table.Row, {\n          key: player.username,\n          verticalAlign: \"top\"\n        }, React.createElement(Table.Cell, null, React.createElement(Header, {\n          as: \"h6\",\n          style: {\n            color: '#92a2bd'\n          }\n        }, index + 1)), React.createElement(Table.Cell, {\n          singleLine: true\n        }, React.createElement(Header, {\n          as: \"h6\",\n          style: {\n            color: 'white'\n          }\n        }, player.username, React.createElement(Header.Subheader, {\n          size: \"small\",\n          style: {\n            color: '#92a2bd'\n          }\n        }, player.stats[\"matchesplayed_\".concat(mode)], \" Matches\"))), React.createElement(Table.Cell, {\n          singleLine: true,\n          textAlign: \"center\"\n        }, React.createElement(Header, {\n          as: \"h4\",\n          style: {\n            color: 'white'\n          }\n        }, player.stats[\"kd_\".concat(mode)])), React.createElement(Table.Cell, {\n          singleLine: true,\n          textAlign: \"center\"\n        }, React.createElement(Header, {\n          as: \"h4\",\n          style: {\n            color: 'white'\n          }\n        }, player.stats[\"winrate_\".concat(mode)])), React.createElement(Table.Cell, {\n          singleLine: true,\n          textAlign: \"center\"\n        }, React.createElement(Header, {\n          as: \"h4\",\n          style: {\n            color: 'white'\n          }\n        }, player.stats[\"kills_\".concat(mode)])), React.createElement(Table.Cell, {\n          collapsing: true,\n          singleLine: true,\n          textAlign: \"center\"\n        }, React.createElement(Header, {\n          as: \"h4\",\n          style: {\n            color: 'white'\n          }\n        }, player.stats[\"placetop1_\".concat(mode)])), React.createElement(Table.Cell, {\n          singleLine: true,\n          textAlign: \"center\",\n          icon: \"trash alternate outline\",\n          style: {\n            color: 'red',\n            fontSize: '12px',\n            paddingLeft: '0px'\n          }\n        }));\n      }))))));\n    }\n  }]);\n\n  return Leaderboard;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    searchResults: state.search.searchResults\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    fetchByUsername: fetchByUsername\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Leaderboard);","map":{"version":3,"sources":["/Users/kenny/Documents/GitHub/fortniteboards/pages/leaderboard.js"],"names":["React","Component","bindActionCreators","connect","_","Container","Grid","Table","Icon","Header","SearchBar","fetchByUsername","getProfile","Board","Leaderboard","store","query","pathname","asPath","req","usernames","entries","initialPlayers","all","map","username","props","sortFn","clickedColumn","state","column","players","direction","setState","updateURL","reverse","newPlayer","updatedPlayers","index","filter","player","i","columnHeader","activeColumnSort","mode","nextMode","find","router","push","length","options","shallow","columns","header","accessor","size","searchResults","debouncedfetchByUsername","debounce","maxWait","paddingTop","paddingBottom","height","isPlayerSelected","addPlayer","sortPlayers","removePlayer","changeMode","backgroundColor","color","handleSort","sortBy","o","stats","fontSize","paddingLeft","mapStateToProps","search","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\n\nimport { Container, Grid, Table, Icon, Header } from 'semantic-ui-react';\nimport SearchBar from '../src/components/SearchBar';\nimport { fetchByUsername, getProfile } from '../src/actions';\n\nimport Board from '../src/components/board';\n\n// show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n\nclass Leaderboard extends Component {\n    static async getInitialProps({ store, query, pathname, asPath, req }) {\n        const { usernames, entries } = query;\n        // spread into array for mapping\n        let initialPlayers = [];\n\n        if (!usernames) return { initialPlayers };\n\n        if (entries <= 1) {\n            initialPlayers = await getProfile(usernames);\n        } else {\n            initialPlayers = await Promise.all(usernames.map(username => getProfile(username)));\n        }\n        return { initialPlayers, entries };\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: [],\n            mode: 'solo',\n            columns: [\n                { header: 'Player', accessor: 'username', size: '5' },\n                { header: 'K/D', accessor: 'kd', size: '2' },\n                { header: 'Win %', accessor: 'winrate', size: '2' },\n                { header: 'Kills', accessor: 'kills', size: '2' },\n                { header: 'Wins', accessor: 'placetop1', size: '2' }\n                // { header: 'Matches', accessor: 'matchesplayed', size: '3' }\n            ],\n            activeColumnSort: '#',\n            column: null,\n            direction: null\n        };\n    }\n\n    handleSort = (sortFn, clickedColumn) => () => {\n        const { column, players, direction } = this.state;\n        if (column !== clickedColumn) {\n            this.setState(\n                {\n                    column: clickedColumn,\n                    players: sortFn(),\n                    direction: 'ascending'\n                },\n                () => this.updateURL()\n            );\n\n            return;\n        }\n\n        this.setState(\n            {\n                players: players.reverse(),\n                direction: direction === 'ascending' ? 'descending' : 'ascending'\n            },\n            () => this.updateURL()\n        );\n    };\n\n    componentDidMount() {\n        const { initialPlayers, entries } = this.props;\n        const { players } = this.state;\n        this.setState({\n            players: entries <= 1 ? [...players, initialPlayers] : [...players, ...initialPlayers],\n            entries: entries\n        });\n    }\n\n    addPlayer = async username => {\n        const { players } = this.state;\n\n        const newPlayer = await getProfile(username);\n        const updatedPlayers = [...players, newPlayer];\n        this.setState({ players: updatedPlayers }, () => this.updateURL());\n    };\n\n    removePlayer = index => {\n        const { players } = this.state;\n        const updatedPlayers = players.filter((player, i) => i !== index);\n        this.setState({ players: updatedPlayers }, () => this.updateURL());\n    };\n\n    sortPlayers = columnHeader => {\n        this.setState({ activeColumnSort: columnHeader });\n    };\n\n    changeMode = direction => {\n        const { mode } = this.state;\n        let nextMode = '';\n        switch (mode) {\n            case 'solo':\n                nextMode = direction === 'forward' ? 'duo' : 'squad';\n                break;\n            case 'duo':\n                nextMode = direction === 'forward' ? 'squad' : 'solo';\n                break;\n            case 'squad':\n                nextMode = direction === 'forward' ? 'solo' : 'duo';\n                break;\n            default:\n                break;\n        }\n        this.setState({ mode: nextMode });\n    };\n\n    isPlayerSelected = username => {\n        const { players } = this.state;\n        return players.find(player => player.username === username);\n    };\n\n    updateURL = () => {\n        const { router } = this.props;\n        const { players } = this.state;\n        const usernames = players.map(player => player.username);\n        router.push({\n            pathname: '/leaderboard',\n            query: { entries: usernames.length, usernames: usernames },\n            options: { shallow: true }\n        });\n    };\n\n    render() {\n        const { columns, mode, players, activeColumnSort, column, direction } = this.state;\n        const { searchResults, fetchByUsername } = this.props;\n        const debouncedfetchByUsername = _.debounce(fetchByUsername, 500, {\n            maxWait: 1000\n        });\n        return (\n            <div>\n                <Container\n                    text\n                    textAlign=\"center\"\n                    style={{\n                        paddingTop: '200px',\n                        paddingBottom: '100px',\n                        height: '100%'\n                    }}\n                >\n                    <h1>Board</h1>\n                    <Grid columns=\"1\" centered textAlign=\"center\">\n                        <Grid.Column\n                            mobile=\"16\"\n                            computer=\"6\"\n                            largeScreen=\"6\"\n                            tablet=\"6\"\n                            widescreen=\"6\"\n                        >\n                            <Container>\n                                <SearchBar\n                                    checkDuplicateSelect={this.isPlayerSelected}\n                                    handleResultSelect={this.addPlayer}\n                                    fetchByUsername={debouncedfetchByUsername}\n                                    results={searchResults}\n                                />\n                            </Container>\n                        </Grid.Column>\n                        <Grid.Column textAlign=\"center\">\n                            <Board\n                                columns={columns}\n                                sortPlayers={this.sortPlayers}\n                                activeColumnSort={activeColumnSort}\n                                mode={mode}\n                                players={players}\n                                removePlayer={this.removePlayer}\n                                handleModeChange={this.changeMode}\n                            />\n                        </Grid.Column>\n                        {/*  */}\n                        {/*  */}\n                        {/*  */}\n                        <Grid.Column textAlign=\"center\" />\n                        <Table\n                            as={Grid}\n                            sortable\n                            unstackable\n                            compact\n                            size=\"small\"\n                            style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                        >\n                            <Table.Header>\n                                <Table.Row>\n                                    <Table.HeaderCell\n                                        textAlign=\"center\"\n                                        style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                                    >\n                                        <Header size=\"tiny\">\n                                            <Header.Subheader\n                                                as=\"h6\"\n                                                style={{\n                                                    color: '#92a2bd'\n                                                }}\n                                            >\n                                                #\n                                            </Header.Subheader>\n                                        </Header>{' '}\n                                    </Table.HeaderCell>\n                                    <Table.HeaderCell\n                                        style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                                        // sorted={column === 'username' ? direction : null}\n                                        onClick={this.handleSort(\n                                            () => _.sortBy(players, o => o.username),\n                                            'username'\n                                        )}\n                                    >\n                                        <Header size=\"tiny\">\n                                            <Header.Subheader\n                                                as=\"h6\"\n                                                style={{\n                                                    color: '#92a2bd'\n                                                }}\n                                            >\n                                                Player\n                                            </Header.Subheader>\n                                        </Header>\n                                    </Table.HeaderCell>\n                                    <Table.HeaderCell\n                                        textAlign=\"center\"\n                                        style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                                        // sorted={column === 'kd' ? direction : null}\n                                        onClick={this.handleSort(\n                                            () => _.sortBy(players, o => o.stats[`kd_${mode}`]),\n                                            'kd'\n                                        )}\n                                    >\n                                        <Header size=\"tiny\">\n                                            <Header.Subheader\n                                                as=\"h6\"\n                                                style={{\n                                                    color: '#92a2bd'\n                                                }}\n                                            >\n                                                K/D\n                                            </Header.Subheader>\n                                        </Header>\n                                    </Table.HeaderCell>\n                                    <Table.HeaderCell\n                                        textAlign=\"center\"\n                                        style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                                        // sorted={column === 'winrate' ? direction : null}\n                                        onClick={this.handleSort(\n                                            () =>\n                                                _.sortBy(players, o => o.stats[`winrate_${mode}`]),\n                                            'winrate'\n                                        )}\n                                    >\n                                        <Header size=\"tiny\">\n                                            <Header.Subheader\n                                                as=\"h6\"\n                                                style={{\n                                                    color: '#92a2bd'\n                                                }}\n                                            >\n                                                Win %\n                                            </Header.Subheader>\n                                        </Header>\n                                    </Table.HeaderCell>\n                                    <Table.HeaderCell\n                                        textAlign=\"center\"\n                                        style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                                        // sorted={column === 'kills' ? direction : null}\n                                        onClick={this.handleSort(\n                                            () => _.sortBy(players, o => o.stats[`kills_${mode}`]),\n                                            'kills'\n                                        )}\n                                    >\n                                        <Header size=\"tiny\">\n                                            <Header.Subheader\n                                                as=\"h6\"\n                                                style={{\n                                                    color: '#92a2bd'\n                                                }}\n                                            >\n                                                Kills\n                                            </Header.Subheader>\n                                        </Header>\n                                    </Table.HeaderCell>\n                                    <Table.HeaderCell\n                                        textAlign=\"center\"\n                                        style={{ backgroundColor: '#2c3c57', color: 'white' }}\n                                        // sorted={column === 'wins' ? direction : null}\n                                        onClick={this.handleSort(\n                                            () =>\n                                                _.sortBy(\n                                                    players,\n                                                    o => o.stats[`placetop1_${mode}`]\n                                                ),\n                                            'wins'\n                                        )}\n                                    >\n                                        <Header size=\"tiny\">\n                                            <Header.Subheader\n                                                as=\"h6\"\n                                                style={{\n                                                    color: '#92a2bd'\n                                                }}\n                                            >\n                                                Wins\n                                            </Header.Subheader>\n                                        </Header>\n                                    </Table.HeaderCell>\n                                </Table.Row>\n                            </Table.Header>\n                            <Table.Body>\n                                {_.map(players, (player, index) => (\n                                    <Table.Row key={player.username} verticalAlign=\"top\">\n                                        <Table.Cell>\n                                            <Header as=\"h6\" style={{ color: '#92a2bd' }}>\n                                                {index + 1}\n                                            </Header>\n                                        </Table.Cell>\n                                        <Table.Cell singleLine>\n                                            <Header as=\"h6\" style={{ color: 'white' }}>\n                                                {player.username}\n\n                                                <Header.Subheader\n                                                    size=\"small\"\n                                                    style={{ color: '#92a2bd' }}\n                                                >\n                                                    {player.stats[`matchesplayed_${mode}`]} Matches\n                                                </Header.Subheader>\n                                            </Header>\n                                        </Table.Cell>\n                                        <Table.Cell singleLine textAlign=\"center\">\n                                            <Header as=\"h4\" style={{ color: 'white' }}>\n                                                {player.stats[`kd_${mode}`]}\n                                            </Header>\n                                        </Table.Cell>\n                                        <Table.Cell singleLine textAlign=\"center\">\n                                            <Header as=\"h4\" style={{ color: 'white' }}>\n                                                {player.stats[`winrate_${mode}`]}\n                                            </Header>\n                                        </Table.Cell>\n                                        <Table.Cell singleLine textAlign=\"center\">\n                                            <Header as=\"h4\" style={{ color: 'white' }}>\n                                                {player.stats[`kills_${mode}`]}\n                                            </Header>\n                                        </Table.Cell>\n                                        <Table.Cell collapsing singleLine textAlign=\"center\">\n                                            <Header as=\"h4\" style={{ color: 'white' }}>\n                                                {player.stats[`placetop1_${mode}`]}\n                                            </Header>\n                                        </Table.Cell>\n                                        <Table.Cell\n                                            singleLine\n                                            textAlign=\"center\"\n                                            icon=\"trash alternate outline\"\n                                            style={{\n                                                color: 'red',\n                                                fontSize: '12px',\n                                                paddingLeft: '0px'\n                                            }}\n                                        />\n                                    </Table.Row>\n                                ))}\n                            </Table.Body>\n                        </Table>\n                    </Grid>\n                </Container>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        searchResults: state.search.searchResults\n    };\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators({ fetchByUsername }, dispatch);\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Leaderboard);\n"]},"metadata":{},"sourceType":"module"}
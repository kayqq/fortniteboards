{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { Container, Grid, Card } from 'semantic-ui-react';\nimport SearchBar from \"../src/components/SearchBar\";\nimport NewsCard from \"../src/components/NewsCard\";\nimport { fetchByUsername, getNews, getUsernames } from \"../src/actions\";\n\nvar Index =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Index, _Component);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleResultSelect\", function (username) {\n      _this.props.router.push(\"/profile/\".concat(username));\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"prefetchRoute\", function (username) {\n      _this.props.router.prefetch(\"/profile/\".concat(username));\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleUsernameSearch\",\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(username, callback) {\n        var usernames, formattedResults;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getUsernames(username);\n\n              case 2:\n                usernames = _context.sent;\n                formattedResults = usernames.map(function (result, index) {\n                  result.key = index;\n                  result.title = result.username;\n                  return result;\n                });\n                callback();\n\n                _this.setState({\n                  results: formattedResults\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _this.state = {\n      results: [],\n      news: []\n    };\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return getNews();\n\n              case 2:\n                data = _context2.sent;\n                this.setState({\n                  news: data.entries.slice(0, 3)\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          searchResults = _this$props.searchResults,\n          fetchByUsername = _this$props.fetchByUsername;\n      var results = this.state.results; // debounced fetch\n\n      var debouncedfetchByUsername = _.debounce(this.handleUsernameSearch, 500, {\n        maxWait: 1000\n      });\n\n      return React.createElement(Container, {\n        textAlign: \"center\",\n        style: {\n          paddingTop: '100px',\n          paddingBottom: '100px',\n          height: '100%'\n        }\n      }, React.createElement(Grid, {\n        centered: true,\n        textAlign: \"center\"\n      }, React.createElement(Grid.Row, null, React.createElement(\"h3\", null, \"Fortnite Boards\")), React.createElement(Grid.Row, null, React.createElement(\"h4\", null, \"Welcome to Fortnite Boards! Search player stats by battle tag or build your own Leaderboard and share to your friends!\")), React.createElement(Grid.Row, {\n        style: {\n          backgroundColor: 'grey'\n        }\n      }, React.createElement(Grid.Column, {\n        mobile: \"16\",\n        computer: \"6\",\n        largeScreen: \"6\",\n        tablet: \"6\",\n        widescreen: \"6\"\n      }, React.createElement(SearchBar, {\n        handleResultSelect: this.handleResultSelect,\n        prefetchRoute: this.prefetchRoute,\n        fetchByUsername: debouncedfetchByUsername,\n        results: results\n      }))), React.createElement(Grid.Row, {\n        style: {\n          backgroundColor: 'green'\n        }\n      }, React.createElement(\"h3\", null, \"News\")), React.createElement(Grid.Row, null, React.createElement(Grid.Column, null, React.createElement(Card.Group, {\n        stackable: true,\n        itemsPerRow: 3\n      }, this.state.news.map(function (article) {\n        return React.createElement(NewsCard, {\n          key: article.title,\n          imagesrc: article.image,\n          title: article.title,\n          description: article.body,\n          date: article.time\n        });\n      }))))));\n    }\n  }]);\n\n  return Index;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    searchResults: state.search.searchResults\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    fetchByUsername: fetchByUsername\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Index);","map":{"version":3,"sources":["/Users/kenny/Documents/GitHub/fortniteboards/pages/index.js"],"names":["React","Component","bindActionCreators","connect","_","Container","Grid","Card","SearchBar","NewsCard","fetchByUsername","getNews","getUsernames","Index","props","username","router","push","prefetch","callback","usernames","formattedResults","map","result","index","key","title","setState","results","state","news","data","entries","slice","searchResults","debouncedfetchByUsername","debounce","handleUsernameSearch","maxWait","paddingTop","paddingBottom","height","backgroundColor","handleResultSelect","prefetchRoute","article","image","body","time","mapStateToProps","search","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { connect } from 'react-redux';\r\nimport _ from 'lodash';\r\nimport { Container, Grid, Card } from 'semantic-ui-react';\r\nimport SearchBar from '../src/components/SearchBar';\r\nimport NewsCard from '../src/components/NewsCard';\r\n\r\nimport { fetchByUsername, getNews, getUsernames } from '../src/actions';\r\n\r\nclass Index extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            results: [],\r\n            news: []\r\n        };\r\n    }\r\n    async componentDidMount() {\r\n        const data = await getNews();\r\n        this.setState({ news: data.entries.slice(0, 3) });\r\n    }\r\n\r\n    handleResultSelect = username => {\r\n        this.props.router.push(`/profile/${username}`);\r\n    };\r\n\r\n    prefetchRoute = username => {\r\n        this.props.router.prefetch(`/profile/${username}`);\r\n    };\r\n\r\n    handleUsernameSearch = async (username, callback) => {\r\n        const usernames = await getUsernames(username);\r\n        const formattedResults = usernames.map((result, index) => {\r\n            result.key = index;\r\n            result.title = result.username;\r\n            return result;\r\n        });\r\n        callback();\r\n        this.setState({ results: formattedResults });\r\n    };\r\n\r\n    render() {\r\n        const { searchResults, fetchByUsername } = this.props;\r\n        const { results } = this.state;\r\n\r\n        // debounced fetch\r\n        const debouncedfetchByUsername = _.debounce(this.handleUsernameSearch, 500, {\r\n            maxWait: 1000\r\n        });\r\n\r\n        return (\r\n            <Container\r\n                textAlign=\"center\"\r\n                style={{\r\n                    paddingTop: '100px',\r\n                    paddingBottom: '100px',\r\n                    height: '100%'\r\n                }}\r\n            >\r\n                <Grid centered textAlign=\"center\">\r\n                    <Grid.Row>\r\n                        <h3>Fortnite Boards</h3>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <h4>\r\n                            Welcome to Fortnite Boards! Search player stats by battle tag or build\r\n                            your own Leaderboard and share to your friends!\r\n                        </h4>\r\n                    </Grid.Row>\r\n                    <Grid.Row style={{ backgroundColor: 'grey' }}>\r\n                        <Grid.Column\r\n                            mobile=\"16\"\r\n                            computer=\"6\"\r\n                            largeScreen=\"6\"\r\n                            tablet=\"6\"\r\n                            widescreen=\"6\"\r\n                        >\r\n                            <SearchBar\r\n                                handleResultSelect={this.handleResultSelect}\r\n                                prefetchRoute={this.prefetchRoute}\r\n                                fetchByUsername={debouncedfetchByUsername}\r\n                                results={results}\r\n                            />\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n\r\n                    <Grid.Row style={{ backgroundColor: 'green' }}>\r\n                        <h3>News</h3>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Card.Group stackable itemsPerRow={3}>\r\n                                {this.state.news.map(article => (\r\n                                    <NewsCard\r\n                                        key={article.title}\r\n                                        imagesrc={article.image}\r\n                                        title={article.title}\r\n                                        description={article.body}\r\n                                        date={article.time}\r\n                                    />\r\n                                ))}\r\n                            </Card.Group>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchResults: state.search.searchResults\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({ fetchByUsername }, dispatch);\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Index);\r\n"]},"metadata":{},"sourceType":"module"}
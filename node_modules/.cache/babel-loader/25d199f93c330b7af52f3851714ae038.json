{"ast":null,"code":"import React from 'react';\nimport { Grid, Header, Icon } from 'semantic-ui-react';\n\nvar Player = function Player(_ref) {\n  var columns = _ref.columns,\n      mode = _ref.mode,\n      player = _ref.player,\n      boardIndex = _ref.boardIndex,\n      removePlayer = _ref.removePlayer;\n  return React.createElement(Grid.Row, {\n    columns: columns.length,\n    stretched: true\n  }, React.createElement(Grid.Column, {\n    textAlign: \"center\" // verticalAlign=\"middle\"\n    ,\n    mobile: \"1\"\n  }, React.createElement(Header, {\n    as: \"h5\",\n    style: {\n      color: '#92a2bd'\n    }\n  }, boardIndex + 1)), columns.map(function (column, columnIndex) {\n    var columnContent = columnIndex === 0 // if first column\n    ? player.username // get username\n    : player.stats[\"\".concat(column.accessor, \"_\").concat(mode)]; // else get stats\n\n    return React.createElement(Grid.Column, {\n      style: {\n        backgroundColor: 'darkGreen'\n      } // dev\n      ,\n      className: columnIndex == 0 ? '' : 'compact',\n      key: columnIndex,\n      textAlign: columnIndex == 0 ? 'left' : 'center' // verticalAlign=\"middle\"\n      ,\n      floated: columnIndex == 1 ? 'right' : '',\n      mobile: column.size\n    }, React.createElement(Header, {\n      as: columnIndex == 0 ? 'h6' : 'h4' // size=\"tiny\"\n      ,\n      style: {\n        color: 'white'\n      }\n    }, columnContent, columnIndex == 0 ? React.createElement(Header.Subheader, {\n      size: \"small\",\n      style: {\n        color: '#92a2bd'\n      }\n    }, player.stats[\"matchesplayed_\".concat(mode)], \" Matches\") : null));\n  }), React.createElement(Grid.Column, {\n    width: \"1\",\n    style: {\n      backgroundColor: 'green'\n    } // dev\n    ,\n    textAlign: \"center\" // verticalAlign=\"middle\"\n    ,\n    mobile: \"1\",\n    onClick: function onClick() {\n      removePlayer(boardIndex);\n    }\n  }, React.createElement(Icon, {\n    size: \"small\",\n    color: \"red\",\n    name: \"trash alternate outline\"\n  })));\n};\n\nexport default Player;","map":{"version":3,"sources":["/Users/kenny/Documents/GitHub/fortniteboards/src/components/board/Player.js"],"names":["React","Grid","Header","Icon","Player","columns","mode","player","boardIndex","removePlayer","length","color","map","column","columnIndex","columnContent","username","stats","accessor","backgroundColor","size"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,IAAvB,QAAmC,mBAAnC;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAAyD;AAAA,MAAtDC,OAAsD,QAAtDA,OAAsD;AAAA,MAA7CC,IAA6C,QAA7CA,IAA6C;AAAA,MAAvCC,MAAuC,QAAvCA,MAAuC;AAAA,MAA/BC,UAA+B,QAA/BA,UAA+B;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;AACpE,SACI,oBAAC,IAAD,CAAM,GAAN;AAAU,IAAA,OAAO,EAAEJ,OAAO,CAACK,MAA3B;AAAmC,IAAA,SAAS;AAA5C,KAEI,oBAAC,IAAD,CAAM,MAAN;AACI,IAAA,SAAS,EAAC,QADd,CAEI;AAFJ;AAGI,IAAA,MAAM,EAAC;AAHX,KAKI,oBAAC,MAAD;AAAQ,IAAA,EAAE,EAAC,IAAX;AAAgB,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT;AAAvB,KACKH,UAAU,GAAG,CADlB,CALJ,CAFJ,EAaKH,OAAO,CAACO,GAAR,CAAY,UAACC,MAAD,EAASC,WAAT,EAAyB;AAClC,QAAMC,aAAa,GACfD,WAAW,KAAK,CAAhB,CAAkB;AAAlB,MACMP,MAAM,CAACS,QADb,CACsB;AADtB,MAEMT,MAAM,CAACU,KAAP,WAAgBJ,MAAM,CAACK,QAAvB,cAAmCZ,IAAnC,EAHV,CADkC,CAIoB;;AACtD,WACI,oBAAC,IAAD,CAAM,MAAN;AACI,MAAA,KAAK,EAAE;AAAEa,QAAAA,eAAe,EAAE;AAAnB,OADX,CAC6C;AAD7C;AAEI,MAAA,SAAS,EAAEL,WAAW,IAAI,CAAf,GAAmB,EAAnB,GAAwB,SAFvC;AAGI,MAAA,GAAG,EAAEA,WAHT;AAII,MAAA,SAAS,EAAEA,WAAW,IAAI,CAAf,GAAmB,MAAnB,GAA4B,QAJ3C,CAKI;AALJ;AAMI,MAAA,OAAO,EAAEA,WAAW,IAAI,CAAf,GAAmB,OAAnB,GAA6B,EAN1C;AAOI,MAAA,MAAM,EAAED,MAAM,CAACO;AAPnB,OASI,oBAAC,MAAD;AACI,MAAA,EAAE,EAAEN,WAAW,IAAI,CAAf,GAAmB,IAAnB,GAA0B,IADlC,CAEI;AAFJ;AAGI,MAAA,KAAK,EAAE;AAAEH,QAAAA,KAAK,EAAE;AAAT;AAHX,OAKKI,aALL,EAQKD,WAAW,IAAI,CAAf,GACG,oBAAC,MAAD,CAAQ,SAAR;AAAkB,MAAA,IAAI,EAAC,OAAvB;AAA+B,MAAA,KAAK,EAAE;AAAEH,QAAAA,KAAK,EAAE;AAAT;AAAtC,OACKJ,MAAM,CAACU,KAAP,yBAA8BX,IAA9B,EADL,aADH,GAIG,IAZR,CATJ,CADJ;AA0BH,GA/BA,CAbL,EA+CI,oBAAC,IAAD,CAAM,MAAN;AACI,IAAA,KAAK,EAAC,GADV;AAEI,IAAA,KAAK,EAAE;AAAEa,MAAAA,eAAe,EAAE;AAAnB,KAFX,CAEyC;AAFzC;AAGI,IAAA,SAAS,EAAC,QAHd,CAII;AAJJ;AAKI,IAAA,MAAM,EAAC,GALX;AAMI,IAAA,OAAO,EAAE,mBAAM;AACXV,MAAAA,YAAY,CAACD,UAAD,CAAZ;AACH;AARL,KAUI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,OAAX;AAAmB,IAAA,KAAK,EAAC,KAAzB;AAA+B,IAAA,IAAI,EAAC;AAApC,IAVJ,CA/CJ,CADJ;AA8DH,CA/DD;;AAiEA,eAAeJ,MAAf","sourcesContent":["import React from 'react';\nimport { Grid, Header, Icon } from 'semantic-ui-react';\n\nconst Player = ({ columns, mode, player, boardIndex, removePlayer }) => {\n    return (\n        <Grid.Row columns={columns.length} stretched>\n            {/* Rank column */}\n            <Grid.Column\n                textAlign=\"center\"\n                // verticalAlign=\"middle\"\n                mobile=\"1\"\n            >\n                <Header as=\"h5\" style={{ color: '#92a2bd' }}>\n                    {boardIndex + 1}\n                </Header>\n            </Grid.Column>\n\n            {/* Player - K/D - Winrate - Kills - Wins columns */}\n            {columns.map((column, columnIndex) => {\n                const columnContent =\n                    columnIndex === 0 // if first column\n                        ? player.username // get username\n                        : player.stats[`${column.accessor}_${mode}`]; // else get stats\n                return (\n                    <Grid.Column\n                        style={{ backgroundColor: 'darkGreen' }} // dev\n                        className={columnIndex == 0 ? '' : 'compact'}\n                        key={columnIndex}\n                        textAlign={columnIndex == 0 ? 'left' : 'center'}\n                        // verticalAlign=\"middle\"\n                        floated={columnIndex == 1 ? 'right' : ''}\n                        mobile={column.size}\n                    >\n                        <Header\n                            as={columnIndex == 0 ? 'h6' : 'h4'}\n                            // size=\"tiny\"\n                            style={{ color: 'white' }}\n                        >\n                            {columnContent}\n\n                            {/* if Player column, add matches count */}\n                            {columnIndex == 0 ? (\n                                <Header.Subheader size=\"small\" style={{ color: '#92a2bd' }}>\n                                    {player.stats[`matchesplayed_${mode}`]} Matches\n                                </Header.Subheader>\n                            ) : null}\n                        </Header>\n                    </Grid.Column>\n                );\n            })}\n\n            {/* Delete icon column */}\n            <Grid.Column\n                width=\"1\"\n                style={{ backgroundColor: 'green' }} // dev\n                textAlign=\"center\"\n                // verticalAlign=\"middle\"\n                mobile=\"1\"\n                onClick={() => {\n                    removePlayer(boardIndex);\n                }}\n            >\n                <Icon size=\"small\" color=\"red\" name=\"trash alternate outline\" />\n            </Grid.Column>\n        </Grid.Row>\n    );\n};\n\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}
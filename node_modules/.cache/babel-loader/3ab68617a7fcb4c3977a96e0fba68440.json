{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { Container, Grid } from 'semantic-ui-react';\nimport SearchBar from \"../src/components/SearchBar\";\nimport { fetchByUsername, getProfile } from \"../src/actions\";\nimport Board from \"../src/components/board\"; // show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n\nvar Leaderboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Leaderboard, _Component);\n\n  _createClass(Leaderboard, null, [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var store, query, pathname, asPath, req, usernames, entries, initialPlayers;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                store = _ref.store, query = _ref.query, pathname = _ref.pathname, asPath = _ref.asPath, req = _ref.req;\n                usernames = query.usernames, entries = query.entries; // spread into array for mapping\n\n                initialPlayers = [];\n\n                if (usernames) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  initialPlayers: initialPlayers\n                });\n\n              case 5:\n                if (!(entries <= 1)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                _context.next = 8;\n                return getProfile(usernames);\n\n              case 8:\n                initialPlayers = _context.sent;\n                _context.next = 14;\n                break;\n\n              case 11:\n                _context.next = 13;\n                return _Promise.all(usernames.map(function (username) {\n                  return getProfile(username);\n                }));\n\n              case 13:\n                initialPlayers = _context.sent;\n\n              case 14:\n                return _context.abrupt(\"return\", {\n                  initialPlayers: initialPlayers,\n                  entries: entries\n                });\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  function Leaderboard(props) {\n    var _this;\n\n    _classCallCheck(this, Leaderboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Leaderboard).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"addPlayer\",\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(username, resetSearchFn) {\n        var players, router, newPlayer, isPlayerSelected;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                isPlayerSelected = function _ref3(username, players) {\n                  players.find(function (player) {\n                    return player.username === username;\n                  });\n                };\n\n                players = _this.state.players;\n                router = _this.props.router; // Reset component if username is already in table\n\n                if (!isPlayerSelected(username, players)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", resetSearchFn());\n\n              case 5:\n                _context2.next = 7;\n                return getProfile(username);\n\n              case 7:\n                newPlayer = _context2.sent;\n\n                _this.setState({\n                  players: [].concat(_toConsumableArray(players), [newPlayer])\n                }, function () {\n                  _this.updateURL();\n\n                  resetSearchFn();\n                });\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2, _x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"removePlayer\", function (index) {\n      _this.setState({\n        players: _this.state.players.filter(function (player, i) {\n          return i !== index;\n        })\n      }, function () {\n        _this.updateURL();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"updateURL\", function () {\n      var router = _this.props.router;\n      var players = _this.state.players;\n\n      var usernames = _toConsumableArray(players.map(function (player) {\n        return player.username;\n      }));\n\n      router.push({\n        pathname: '/leaderboard',\n        query: {\n          usernames: usernames,\n          entries: usernames.length\n        },\n        options: {\n          shallow: true\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleModeChange\", function (direction) {\n      var mode = _this.state.mode;\n      var nextMode = '';\n\n      switch (mode) {\n        case 'solo':\n          nextMode = direction === 'forward' ? 'duo' : 'squad';\n          break;\n\n        case 'duo':\n          nextMode = direction === 'forward' ? 'squad' : 'solo';\n          break;\n\n        case 'squad':\n          nextMode = direction === 'forward' ? 'solo' : 'duo';\n          break;\n\n        default:\n          break;\n      }\n\n      _this.setState({\n        mode: nextMode\n      });\n    });\n\n    _this.state = {\n      players: [],\n      mode: 'solo'\n    };\n    return _this;\n  }\n\n  _createClass(Leaderboard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          initialPlayers = _this$props.initialPlayers,\n          entries = _this$props.entries;\n      var players = this.state.players;\n      this.setState({\n        players: entries <= 1 ? [].concat(_toConsumableArray(players), [initialPlayers]) : [].concat(_toConsumableArray(players), _toConsumableArray(initialPlayers)),\n        entries: entries\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // console.log(this.props.profiles);\n      var _this$props2 = this.props,\n          searchResults = _this$props2.searchResults,\n          fetchByUsername = _this$props2.fetchByUsername;\n\n      var debouncedfetchByUsername = _.debounce(fetchByUsername, 500, {\n        maxWait: 1000\n      });\n\n      var columns = [{\n        header: 'Player',\n        accessor: 'username',\n        size: '5'\n      }, {\n        header: 'K/D',\n        accessor: 'kd',\n        size: '2'\n      }, {\n        header: 'Win %',\n        accessor: 'winrate',\n        size: '2'\n      }, {\n        header: 'Kills',\n        accessor: 'kills',\n        size: '2'\n      }, {\n        header: 'Wins',\n        accessor: 'placetop1',\n        size: '2' // { header: 'Matches', accessor: 'matchesplayed', size: '3' }\n\n      }];\n      return React.createElement(\"div\", null, React.createElement(Container, {\n        text: true,\n        textAlign: \"center\",\n        style: {\n          paddingTop: '200px',\n          paddingBottom: '100px',\n          height: '100%'\n        }\n      }, React.createElement(\"h1\", null, \"Leaderboard\"), React.createElement(Grid, {\n        columns: \"1\",\n        centered: true,\n        textAlign: \"center\"\n      }, React.createElement(Grid.Column, {\n        mobile: \"16\",\n        computer: \"6\",\n        largeScreen: \"6\",\n        tablet: \"6\",\n        widescreen: \"6\"\n      }, React.createElement(Container, null, React.createElement(SearchBar, {\n        handleResultSelect: this.addPlayer,\n        fetchByUsername: debouncedfetchByUsername,\n        results: searchResults\n      }))), React.createElement(Grid.Column, {\n        textAlign: \"center\"\n      }, React.createElement(Board, {\n        columns: columns,\n        mode: this.state.mode,\n        players: this.state.players,\n        removePlayer: this.removePlayer,\n        handleModeChange: this.handleModeChange\n      })))));\n    }\n  }]);\n\n  return Leaderboard;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    searchResults: state.search.searchResults\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    fetchByUsername: fetchByUsername\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Leaderboard);","map":{"version":3,"sources":["/Users/kenny/Documents/GitHub/fortniteboards/pages/leaderboard.js"],"names":["React","Component","bindActionCreators","connect","_","Container","Grid","SearchBar","fetchByUsername","getProfile","Board","Leaderboard","store","query","pathname","asPath","req","usernames","entries","initialPlayers","all","map","username","props","resetSearchFn","isPlayerSelected","players","find","player","state","router","newPlayer","setState","updateURL","index","filter","i","push","length","options","shallow","direction","mode","nextMode","searchResults","debouncedfetchByUsername","debounce","maxWait","columns","header","accessor","size","paddingTop","paddingBottom","height","addPlayer","removePlayer","handleModeChange","mapStateToProps","search","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\n\nimport { Container, Grid } from 'semantic-ui-react';\nimport SearchBar from '../src/components/SearchBar';\nimport { fetchByUsername, getProfile } from '../src/actions';\n\nimport Board from '../src/components/board';\n\n// show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n\nclass Leaderboard extends Component {\n    static async getInitialProps({ store, query, pathname, asPath, req }) {\n        const { usernames, entries } = query;\n        // spread into array for mapping\n        let initialPlayers = [];\n\n        if (!usernames) return { initialPlayers };\n\n        if (entries <= 1) {\n            initialPlayers = await getProfile(usernames);\n        } else {\n            initialPlayers = await Promise.all(usernames.map(username => getProfile(username)));\n        }\n        return { initialPlayers, entries };\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = { players: [], mode: 'solo' };\n    }\n\n    componentDidMount() {\n        const { initialPlayers, entries } = this.props;\n        const { players } = this.state;\n        this.setState({\n            players: entries <= 1 ? [...players, initialPlayers] : [...players, ...initialPlayers],\n            entries: entries\n        });\n    }\n\n    addPlayer = async (username, resetSearchFn) => {\n        const { players } = this.state;\n        const { router } = this.props;\n\n        // Reset component if username is already in table\n        if (isPlayerSelected(username, players)) return resetSearchFn();\n\n        // Get profile of username and add to table\n        const newPlayer = await getProfile(username);\n        this.setState({ players: [...players, newPlayer] }, () => {\n            this.updateURL();\n            resetSearchFn();\n        });\n\n        function isPlayerSelected(username, players) {\n            players.find(player => player.username === username);\n        }\n    };\n\n    removePlayer = index => {\n        this.setState(\n            {\n                players: this.state.players.filter((player, i) => i !== index)\n            },\n            () => {\n                this.updateURL();\n            }\n        );\n    };\n\n    updateURL = () => {\n        const { router } = this.props;\n        const { players } = this.state;\n        const usernames = [...players.map(player => player.username)];\n        router.push({\n            pathname: '/leaderboard',\n            query: { usernames: usernames, entries: usernames.length },\n            options: { shallow: true }\n        });\n    };\n\n    handleModeChange = direction => {\n        const { mode } = this.state;\n        let nextMode = '';\n        switch (mode) {\n            case 'solo':\n                nextMode = direction === 'forward' ? 'duo' : 'squad';\n                break;\n            case 'duo':\n                nextMode = direction === 'forward' ? 'squad' : 'solo';\n                break;\n            case 'squad':\n                nextMode = direction === 'forward' ? 'solo' : 'duo';\n                break;\n            default:\n                break;\n        }\n        this.setState({ mode: nextMode });\n    };\n\n    render() {\n        // console.log(this.props.profiles);\n        const { searchResults, fetchByUsername } = this.props;\n        const debouncedfetchByUsername = _.debounce(fetchByUsername, 500, {\n            maxWait: 1000\n        });\n        const columns = [\n            { header: 'Player', accessor: 'username', size: '5' },\n            { header: 'K/D', accessor: 'kd', size: '2' },\n            { header: 'Win %', accessor: 'winrate', size: '2' },\n            { header: 'Kills', accessor: 'kills', size: '2' },\n            { header: 'Wins', accessor: 'placetop1', size: '2' }\n            // { header: 'Matches', accessor: 'matchesplayed', size: '3' }\n        ];\n\n        return (\n            <div>\n                <Container\n                    text\n                    textAlign=\"center\"\n                    style={{\n                        paddingTop: '200px',\n                        paddingBottom: '100px',\n                        height: '100%'\n                    }}\n                >\n                    <h1>Leaderboard</h1>\n                    <Grid columns=\"1\" centered textAlign=\"center\">\n                        <Grid.Column\n                            mobile=\"16\"\n                            computer=\"6\"\n                            largeScreen=\"6\"\n                            tablet=\"6\"\n                            widescreen=\"6\"\n                        >\n                            <Container>\n                                <SearchBar\n                                    handleResultSelect={this.addPlayer}\n                                    fetchByUsername={debouncedfetchByUsername}\n                                    results={searchResults}\n                                />\n                            </Container>\n                        </Grid.Column>\n                        <Grid.Column textAlign=\"center\">\n                            <Board\n                                columns={columns}\n                                mode={this.state.mode}\n                                players={this.state.players}\n                                removePlayer={this.removePlayer}\n                                handleModeChange={this.handleModeChange}\n                            />\n                        </Grid.Column>\n                    </Grid>\n                </Container>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        searchResults: state.search.searchResults\n    };\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators({ fetchByUsername }, dispatch);\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Leaderboard);\n"]},"metadata":{},"sourceType":"module"}
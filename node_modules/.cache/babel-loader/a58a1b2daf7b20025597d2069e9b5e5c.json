{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useState } from 'react';\nimport { Grid, Dimmer, Loader, Container, Dropdown, Icon, Menu, Visibility, Rail, Sticky } from 'semantic-ui-react';\nimport ModeHeader from \"./ModeHeader\";\nimport StatsHeader from \"./StatsHeader\";\nimport Player from \"./Player\";\nvar menuStyle = {\n  backgroundColor: '#2c3c57',\n  color: 'white',\n  border: 'none',\n  borderRadius: 0,\n  boxShadow: 'none',\n  marginBottom: '1em',\n  transition: 'box-shadow 0.5s ease, padding 0.5s ease'\n};\nvar fixedMenuStyle = {\n  backgroundColor: '#2c3c57',\n  color: 'white',\n  boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)'\n};\n\nvar Index = function Index(_ref) {\n  var columns = _ref.columns,\n      players = _ref.players,\n      removePlayer = _ref.removePlayer,\n      handleModeChange = _ref.handleModeChange,\n      mode = _ref.mode,\n      loading = _ref.loading;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      menuFixed = _useState2[0],\n      setMenuFixed = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      contextRef = _useState4[0],\n      setContextRef = _useState4[1];\n\n  var stickTopMenu = function stickTopMenu() {\n    return setMenuFixed(true);\n  };\n\n  var unStickTopMenu = function unStickTopMenu() {\n    return setMenuFixed(false);\n  };\n\n  var handleContextRef = function handleContextRef(contextRef) {\n    return setContextRef(contextRef);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Sticky, {\n    context: contextRef\n  }, React.createElement(ModeHeader, {\n    mode: mode,\n    handleModeChange: handleModeChange\n  }), React.createElement(StatsHeader, {\n    columns: columns\n  })), React.createElement(Visibility, {\n    as: Grid,\n    onBottomPassed: stickTopMenu,\n    onBottomVisible: unStickTopMenu,\n    once: false\n  }, React.createElement(Menu, {\n    as: Grid,\n    borderless: true,\n    fixed: menuFixed ? 'top' : undefined,\n    style: menuFixed ? fixedMenuStyle : menuStyle\n  }, React.createElement(ModeHeader, {\n    mode: mode,\n    handleModeChange: handleModeChange\n  }), React.createElement(StatsHeader, {\n    columns: columns\n  }))), React.createElement(Dimmer.Dimmable, {\n    as: Grid,\n    ref: handleContextRef,\n    dimmed: loading,\n    style: {\n      backgroundColor: '#2c3c57',\n      color: 'white'\n    }\n  }, React.createElement(Dimmer, {\n    active: loading\n  }, React.createElement(Loader, null, \"Loading...\")), players.map(function (player, index) {\n    return React.createElement(Player, {\n      key: index,\n      columns: columns,\n      player: player,\n      mode: mode,\n      boardIndex: index,\n      removePlayer: removePlayer\n    });\n  })));\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/kenny/Documents/GitHub/fortniteboards/src/components/board/index.js"],"names":["React","useState","Grid","Dimmer","Loader","Container","Dropdown","Icon","Menu","Visibility","Rail","Sticky","ModeHeader","StatsHeader","Player","menuStyle","backgroundColor","color","border","borderRadius","boxShadow","marginBottom","transition","fixedMenuStyle","Index","columns","players","removePlayer","handleModeChange","mode","loading","menuFixed","setMenuFixed","contextRef","setContextRef","stickTopMenu","unStickTopMenu","handleContextRef","undefined","map","player","index"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {\n    Grid,\n    Dimmer,\n    Loader,\n    Container,\n    Dropdown,\n    Icon,\n    Menu,\n    Visibility,\n    Rail,\n    Sticky\n} from 'semantic-ui-react';\nimport ModeHeader from './ModeHeader';\nimport StatsHeader from './StatsHeader';\nimport Player from './Player';\n\nconst menuStyle = {\n    backgroundColor: '#2c3c57',\n    color: 'white',\n    border: 'none',\n    borderRadius: 0,\n    boxShadow: 'none',\n    marginBottom: '1em',\n    transition: 'box-shadow 0.5s ease, padding 0.5s ease'\n};\n\nconst fixedMenuStyle = {\n    backgroundColor: '#2c3c57',\n    color: 'white',\n    boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)'\n};\n\nconst Index = ({ columns, players, removePlayer, handleModeChange, mode, loading }) => {\n    const [menuFixed, setMenuFixed] = useState(false);\n    const [contextRef, setContextRef] = useState(null);\n    const stickTopMenu = () => setMenuFixed(true);\n\n    const unStickTopMenu = () => setMenuFixed(false);\n    const handleContextRef = contextRef => setContextRef(contextRef);\n\n    return (\n        <React.Fragment>\n            {/* <Grid style={{ backgroundColor: '#2c3c57', color: 'white' }}>\n                <ModeHeader mode={mode} handleModeChange={handleModeChange} />\n                <StatsHeader columns={columns} />\n            </Grid> */}\n            {/* ******************************** */}\n            <Sticky context={contextRef}>\n                <ModeHeader mode={mode} handleModeChange={handleModeChange} />\n                <StatsHeader columns={columns} />\n            </Sticky>\n            <Visibility\n                as={Grid}\n                onBottomPassed={stickTopMenu}\n                onBottomVisible={unStickTopMenu}\n                once={false}\n            >\n                <Menu\n                    as={Grid}\n                    borderless\n                    fixed={menuFixed ? 'top' : undefined}\n                    style={menuFixed ? fixedMenuStyle : menuStyle}\n                >\n                    <ModeHeader mode={mode} handleModeChange={handleModeChange} />\n                    <StatsHeader columns={columns} />\n                </Menu>\n            </Visibility>\n\n            {/* ******************************** */}\n\n            <Dimmer.Dimmable\n                as={Grid}\n                ref={handleContextRef}\n                dimmed={loading}\n                style={{ backgroundColor: '#2c3c57', color: 'white' }}\n            >\n                <Dimmer active={loading}>\n                    <Loader>Loading...</Loader>\n                </Dimmer>\n\n                {players.map((player, index) => (\n                    <Player\n                        key={index}\n                        columns={columns}\n                        player={player}\n                        mode={mode}\n                        boardIndex={index}\n                        removePlayer={removePlayer}\n                    />\n                ))}\n            </Dimmer.Dimmable>\n        </React.Fragment>\n    );\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}
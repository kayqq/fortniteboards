{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _ from 'lodash';\nimport React, { Component, useState, useEffect } from 'react';\nimport { Search, Label } from 'semantic-ui-react';\nimport { getUsernames } from \"../actions\";\n\nvar resultRenderer = function resultRenderer(_ref) {\n  var uid = _ref.uid,\n      username = _ref.username;\n  return React.createElement(Label, {\n    key: uid,\n    content: username\n  });\n}; // export default class SearchBar extends Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             value: '',\n//             isLoading: false\n//         };\n//     }\n//     componentWillMount() {\n//         this.resetComponent();\n//     }\n//     resetComponent = () => this.setState({ isLoading: false, value: '' });\n//     handleResultSelect = async (e, { result }) => {\n//         const { handleResultSelect } = this.props;\n//         this.setState({ value: result.username, isLoading: true });\n//         await handleResultSelect(result.username);\n//         this.resetComponent();\n//     };\n//     handleSearchChange = (e, { value }) => {\n//         this.setState({ isLoading: true, value }, () => {\n//             // reset loading if empty\n//             if (this.state.value.length < 1) return this.resetComponent();\n//             // fetch users by username\n//             this.props.fetchByUsername(this.state.value, () => {\n//                 this.setState({ isLoading: false });\n//             });\n//         });\n//     };\n//     render() {\n//         const { isLoading, value } = this.state;\n//         const { results } = this.props;\n//         return (\n//             <Search\n//                 input={{ fluid: true, icon: 'arrow circle right' }}\n//                 loading={isLoading}\n//                 placeholder={'Enter your Epic username'}\n//                 onResultSelect={this.handleResultSelect}\n//                 onSearchChange={_.debounce(this.handleSearchChange, 500, {\n//                     leading: true\n//                 })}\n//                 results={results}\n//                 resultRenderer={resultRenderer}\n//                 value={value}\n//                 showNoResults={false}\n//             />\n//         );\n//     }\n// }\n\n\nvar SearchBar = function SearchBar(_ref2) {\n  var handleResultSelect = _ref2.handleResultSelect;\n  console.log('rendering');\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchTerm = _useState2[0],\n      setSearchTerm = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      results = _useState4[0],\n      setResults = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isSearching = _useState6[0],\n      setIsSearching = _useState6[1];\n\n  var debouncedSearchTerm = useDebounce(searchTerm, 500);\n  useEffect(\n  /*#__PURE__*/\n  _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var _results, formattedResults;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!debouncedSearchTerm) {\n              _context.next = 10;\n              break;\n            }\n\n            setIsSearching(true);\n            _context.next = 4;\n            return getUsernames(searchTerm);\n\n          case 4:\n            _results = _context.sent;\n            formattedResults = _results.map(function (result, index) {\n              result.key = index;\n              result.title = result.username;\n              return result;\n            });\n            setIsSearching(false);\n            setResults(formattedResults);\n            _context.next = 11;\n            break;\n\n          case 10:\n            setResults([]); // resetComponent();\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  })), [debouncedSearchTerm] // Only call effect if debounced search term changes\n  );\n\n  var resetComponent = function resetComponent() {\n    setSearchTerm('');\n    setIsSearching(false);\n  };\n\n  var onResultSelect = function onResultSelect(e, _ref4) {\n    var result = _ref4.result;\n    setSearchTerm(result.username);\n    handleResultSelect(result.username); // resetComponent();\n  };\n\n  var onSearchChange =\n  /*#__PURE__*/\n  function () {\n    var _ref6 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(e, _ref5) {\n      var value;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              value = _ref5.value;\n              setSearchTerm(value);\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function onSearchChange(_x, _x2) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  return React.createElement(Search, {\n    input: {\n      fluid: true,\n      icon: 'arrow circle right'\n    },\n    loading: isSearching,\n    placeholder: 'Enter your Epic username',\n    onResultSelect: onResultSelect,\n    onSearchChange: onSearchChange,\n    results: results,\n    resultRenderer: resultRenderer,\n    value: searchTerm,\n    showNoResults: false\n  });\n};\n\nexport default SearchBar; // //////////////////////////////////////////////////////////\n// Usage\n\nfunction App() {\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      searchTerm = _useState8[0],\n      setSearchTerm = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      results = _useState10[0],\n      setResults = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      isSearching = _useState12[0],\n      setIsSearching = _useState12[1];\n\n  var debouncedSearchTerm = useDebounce(searchTerm, 500); // Effect for API call\n\n  useEffect(function () {\n    if (debouncedSearchTerm) {\n      setIsSearching(true);\n      searchCharacters(debouncedSearchTerm).then(function (results) {\n        setIsSearching(false);\n        setResults(results);\n      });\n    } else {\n      setResults([]);\n    }\n  }, [debouncedSearchTerm] // Only call effect if debounced search term changes\n  );\n  return React.createElement(\"div\", null, React.createElement(\"input\", {\n    placeholder: \"Search Marvel Comics\",\n    onChange: function onChange(e) {\n      return setSearchTerm(e.target.value);\n    }\n  }), isSearching && React.createElement(\"div\", null, \"Searching ...\"), results.map(function (result) {\n    return React.createElement(\"div\", {\n      key: result.id\n    }, React.createElement(\"h4\", null, result.title), React.createElement(\"img\", {\n      src: \"\".concat(result.thumbnail.path, \"/portrait_incredible.\").concat(result.thumbnail.extension)\n    }));\n  }));\n} // API search function\n\n\nfunction searchCharacters(search) {\n  var apiKey = 'f9dfb1e8d466d36c27850bedd2047687';\n  return fetch(\"https://gateway.marvel.com/v1/public/comics?apikey=\".concat(apiKey, \"&titleStartsWith=\").concat(search), {\n    method: 'GET'\n  }).then(function (r) {\n    return r.json();\n  }).then(function (r) {\n    return r.data.results;\n  }).catch(function (error) {\n    console.error(error);\n    return [];\n  });\n} // Hook\n\n\nfunction useDebounce(value, delay) {\n  // State and setters for debounced value\n  var _useState13 = useState(value),\n      _useState14 = _slicedToArray(_useState13, 2),\n      debouncedValue = _useState14[0],\n      setDebouncedValue = _useState14[1];\n\n  useEffect(function () {\n    // Update debounced value after delay\n    var handler = _.debounce(setDebouncedValue(value), delay, {\n      maxWait: 1000\n    });\n  }, [value] // Only re-call effect if value or delay changes\n  );\n  return debouncedValue;\n}","map":{"version":3,"sources":["/Users/kenny/Documents/GitHub/fortniteboards/src/components/SearchBar.js"],"names":["_","React","Component","useState","useEffect","Search","Label","getUsernames","resultRenderer","uid","username","SearchBar","handleResultSelect","console","log","searchTerm","setSearchTerm","results","setResults","isSearching","setIsSearching","debouncedSearchTerm","useDebounce","formattedResults","map","result","index","key","title","resetComponent","onResultSelect","e","onSearchChange","value","fluid","icon","App","searchCharacters","then","target","id","thumbnail","path","extension","search","apiKey","fetch","method","r","json","data","catch","error","delay","debouncedValue","setDebouncedValue","handler","debounce","maxWait"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport React, { Component, useState, useEffect } from 'react';\nimport { Search, Label } from 'semantic-ui-react';\nimport { getUsernames } from '../actions';\n\nconst resultRenderer = ({ uid, username }) => <Label key={uid} content={username} />;\n\n// export default class SearchBar extends Component {\n//     constructor(props) {\n//         super(props);\n\n//         this.state = {\n//             value: '',\n//             isLoading: false\n//         };\n//     }\n\n//     componentWillMount() {\n//         this.resetComponent();\n//     }\n\n//     resetComponent = () => this.setState({ isLoading: false, value: '' });\n\n//     handleResultSelect = async (e, { result }) => {\n//         const { handleResultSelect } = this.props;\n//         this.setState({ value: result.username, isLoading: true });\n//         await handleResultSelect(result.username);\n//         this.resetComponent();\n//     };\n\n//     handleSearchChange = (e, { value }) => {\n//         this.setState({ isLoading: true, value }, () => {\n//             // reset loading if empty\n//             if (this.state.value.length < 1) return this.resetComponent();\n\n//             // fetch users by username\n//             this.props.fetchByUsername(this.state.value, () => {\n//                 this.setState({ isLoading: false });\n//             });\n//         });\n//     };\n\n//     render() {\n//         const { isLoading, value } = this.state;\n//         const { results } = this.props;\n//         return (\n//             <Search\n//                 input={{ fluid: true, icon: 'arrow circle right' }}\n//                 loading={isLoading}\n//                 placeholder={'Enter your Epic username'}\n//                 onResultSelect={this.handleResultSelect}\n//                 onSearchChange={_.debounce(this.handleSearchChange, 500, {\n//                     leading: true\n//                 })}\n//                 results={results}\n//                 resultRenderer={resultRenderer}\n//                 value={value}\n//                 showNoResults={false}\n//             />\n//         );\n//     }\n// }\n\nconst SearchBar = ({ handleResultSelect }) => {\n    console.log('rendering');\n    const [searchTerm, setSearchTerm] = useState('');\n    const [results, setResults] = useState([]);\n    const [isSearching, setIsSearching] = useState(false);\n    const debouncedSearchTerm = useDebounce(searchTerm, 500);\n\n    useEffect(\n        async () => {\n            if (debouncedSearchTerm) {\n                setIsSearching(true);\n                const results = await getUsernames(searchTerm);\n                const formattedResults = results.map((result, index) => {\n                    result.key = index;\n                    result.title = result.username;\n                    return result;\n                });\n                setIsSearching(false);\n                setResults(formattedResults);\n            } else {\n                setResults([]);\n                // resetComponent();\n            }\n        },\n        [debouncedSearchTerm] // Only call effect if debounced search term changes\n    );\n\n    const resetComponent = () => {\n        setSearchTerm('');\n        setIsSearching(false);\n    };\n\n    const onResultSelect = (e, { result }) => {\n        setSearchTerm(result.username);\n        handleResultSelect(result.username);\n        // resetComponent();\n    };\n\n    const onSearchChange = async (e, { value }) => {\n        setSearchTerm(value);\n    };\n\n    return (\n        <Search\n            input={{ fluid: true, icon: 'arrow circle right' }}\n            loading={isSearching}\n            placeholder={'Enter your Epic username'}\n            onResultSelect={onResultSelect}\n            onSearchChange={onSearchChange}\n            results={results}\n            resultRenderer={resultRenderer}\n            value={searchTerm}\n            showNoResults={false}\n        />\n    );\n};\n\nexport default SearchBar;\n\n// //////////////////////////////////////////////////////////\n// Usage\nfunction App() {\n    const [searchTerm, setSearchTerm] = useState('');\n    const [results, setResults] = useState([]);\n    const [isSearching, setIsSearching] = useState(false);\n    const debouncedSearchTerm = useDebounce(searchTerm, 500);\n\n    // Effect for API call\n    useEffect(\n        () => {\n            if (debouncedSearchTerm) {\n                setIsSearching(true);\n                searchCharacters(debouncedSearchTerm).then(results => {\n                    setIsSearching(false);\n                    setResults(results);\n                });\n            } else {\n                setResults([]);\n            }\n        },\n        [debouncedSearchTerm] // Only call effect if debounced search term changes\n    );\n\n    return (\n        <div>\n            <input\n                placeholder=\"Search Marvel Comics\"\n                onChange={e => setSearchTerm(e.target.value)}\n            />\n\n            {isSearching && <div>Searching ...</div>}\n\n            {results.map(result => (\n                <div key={result.id}>\n                    <h4>{result.title}</h4>\n                    <img\n                        src={`${result.thumbnail.path}/portrait_incredible.${\n                            result.thumbnail.extension\n                        }`}\n                    />\n                </div>\n            ))}\n        </div>\n    );\n}\n\n// API search function\nfunction searchCharacters(search) {\n    const apiKey = 'f9dfb1e8d466d36c27850bedd2047687';\n    return fetch(\n        `https://gateway.marvel.com/v1/public/comics?apikey=${apiKey}&titleStartsWith=${search}`,\n        {\n            method: 'GET'\n        }\n    )\n        .then(r => r.json())\n        .then(r => r.data.results)\n        .catch(error => {\n            console.error(error);\n            return [];\n        });\n}\n\n// Hook\nfunction useDebounce(value, delay) {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(\n        () => {\n            // Update debounced value after delay\n            const handler = _.debounce(setDebouncedValue(value), delay, {\n                maxWait: 1000\n            });\n        },\n        [value] // Only re-call effect if value or delay changes\n    );\n\n    return debouncedValue;\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { Container, Grid, Icon, Dimmer, Loader } from 'semantic-ui-react';\nimport SearchBar from \"../src/components/SearchBar\";\nimport { fetchByUsername, getProfile } from \"../src/actions\";\nimport Board from \"../src/components/board\"; // show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n\nvar Leaderboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Leaderboard, _Component);\n\n  _createClass(Leaderboard, null, [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var query, usernames, mode;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                query = _ref.query;\n                usernames = query.usernames;\n                mode = query.mode;\n\n                if (usernames) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  usernames: []\n                });\n\n              case 5:\n                usernames = typeof usernames == 'string' ? [usernames] : usernames;\n                return _context.abrupt(\"return\", {\n                  usernames: usernames,\n                  mode: mode\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  function Leaderboard(props) {\n    var _this;\n\n    _classCallCheck(this, Leaderboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Leaderboard).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"addPlayer\",\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(username) {\n        var _this$state, players, column, mode, direction, newPlayer, updatedPlayers;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$state = _this.state, players = _this$state.players, column = _this$state.column, mode = _this$state.mode, direction = _this$state.direction;\n                _context2.next = 3;\n                return getProfile(username);\n\n              case 3:\n                newPlayer = _context2.sent;\n                updatedPlayers = [].concat(_toConsumableArray(players), [newPlayer]); // if pre-sorted then apply sort setting to updated players\n\n                if (column !== null) {\n                  updatedPlayers = _this.sortPlayers(updatedPlayers, column, mode, direction);\n                }\n\n                _this.setState({\n                  players: updatedPlayers\n                }, function () {\n                  return _this.updateURL();\n                });\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"removePlayer\", function (index) {\n      var players = _this.state.players;\n      var updatedPlayers = players.filter(function (player, i) {\n        return i !== index;\n      });\n\n      _this.setState({\n        players: updatedPlayers\n      }, function () {\n        return _this.updateURL();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"changeMode\", function (direction) {\n      var mode = _this.state.mode;\n      var nextMode = '';\n\n      switch (mode) {\n        case 'solo':\n          nextMode = direction === 'forward' ? 'duo' : 'squad';\n          break;\n\n        case 'duo':\n          nextMode = direction === 'forward' ? 'squad' : 'solo';\n          break;\n\n        case 'squad':\n          nextMode = direction === 'forward' ? 'solo' : 'duo';\n          break;\n\n        default:\n          break;\n      }\n\n      _this.setState({\n        mode: nextMode\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleSort\", function (accessor) {\n      return function () {\n        var _this$state2 = _this.state,\n            column = _this$state2.column,\n            players = _this$state2.players,\n            direction = _this$state2.direction,\n            mode = _this$state2.mode; // Reverse order if direction set, else default to desc\n\n        var sortDirection = direction === 'desc' ? 'asc' : 'desc';\n        var sortedColumn = column; // Default to desc order on column switch\n\n        if (column !== accessor) {\n          // Default to asc order if username column\n          sortDirection = accessor == 'username' ? 'asc' : 'desc'; // Set sorted column name\n\n          sortedColumn = accessor;\n        } // Sort players\n\n\n        var sortedPlayers = _this.sortPlayers(players, accessor, mode, sortDirection);\n\n        _this.setState({\n          column: sortedColumn,\n          players: sortedPlayers,\n          direction: sortDirection\n        }, function () {\n          return _this.updateURL();\n        });\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"sortPlayers\", function (players, accessor, mode, direction) {\n      return accessor == 'username' ? _.orderBy(_this.state.players, [function (o) {\n        return o.username.toLowerCase();\n      }], [direction]) : _.orderBy(players, function (o) {\n        return o.stats[\"\".concat(accessor, \"_\").concat(mode)];\n      }, [direction]);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"isPlayerSelected\", function (username) {\n      var players = _this.state.players;\n      return players.find(function (player) {\n        return player.username === username;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"updateURL\", function () {\n      var router = _this.props.router;\n      var _this$state3 = _this.state,\n          players = _this$state3.players,\n          mode = _this$state3.mode;\n      var usernames = players.map(function (player) {\n        return player.username;\n      });\n      router.replace({\n        pathname: '/leaderboard',\n        query: {\n          mode: mode,\n          usernames: usernames\n        },\n        options: {\n          shallow: true\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"initColumns\", function () {\n      _this.setState({\n        columns: [{\n          header: 'Player',\n          accessor: 'username',\n          sort: _this.handleSort('username')\n        }, {\n          header: 'K/D',\n          accessor: 'kd',\n          sort: _this.handleSort('kd')\n        }, {\n          header: 'Win %',\n          accessor: 'winrate',\n          sort: _this.handleSort('winrate')\n        }, {\n          header: 'Kills',\n          accessor: 'kills',\n          sort: _this.handleSort('kills')\n        }, {\n          header: 'Wins',\n          accessor: 'placetop1',\n          sort: _this.handleSort('placetop1')\n        }]\n      });\n    });\n\n    _this.state = {\n      players: props.usernames ? new Array(props.usernames.length).fill(null) : [],\n      mode: props.mode || 'solo',\n      columns: [],\n      column: null,\n      direction: null,\n      loading: null\n    };\n    return _this;\n  }\n\n  _createClass(Leaderboard, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var usernames, players, initialPlayers;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                usernames = this.props.usernames;\n                players = this.state.players;\n                initialPlayers = new Array(usernames.length).fill(null); // Initialize column headers\n\n                this.initColumns();\n                _context3.prev = 4;\n                // Initialize table size\n                this.setState({\n                  loading: true,\n                  players: initialPlayers\n                });\n                _context3.next = 8;\n                return _Promise.all(usernames.map(function (username) {\n                  return getProfile(username);\n                }));\n\n              case 8:\n                initialPlayers = _context3.sent;\n                _context3.next = 14;\n                break;\n\n              case 11:\n                _context3.prev = 11;\n                _context3.t0 = _context3[\"catch\"](4);\n                console.log(_context3.t0);\n\n              case 14:\n                this.setState({\n                  players: [].concat(_toConsumableArray(players), _toConsumableArray(initialPlayers)),\n                  loading: false\n                });\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[4, 11]]);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state4 = this.state,\n          columns = _this$state4.columns,\n          mode = _this$state4.mode,\n          players = _this$state4.players,\n          loading = _this$state4.loading;\n      var _this$props = this.props,\n          searchResults = _this$props.searchResults,\n          fetchByUsername = _this$props.fetchByUsername;\n\n      var debouncedfetchByUsername = _.debounce(fetchByUsername, 500, {\n        maxWait: 1000\n      });\n\n      return React.createElement(Container, {\n        text: true,\n        textAlign: \"center\",\n        style: {\n          paddingTop: '100px',\n          paddingBottom: '100px',\n          height: '100%'\n        }\n      }, React.createElement(\"h1\", null, \"Board\"), React.createElement(Grid, {\n        columns: \"1\",\n        centered: true,\n        textAlign: \"center\"\n      }, React.createElement(Grid.Column, {\n        mobile: \"16\",\n        computer: \"6\",\n        largeScreen: \"6\",\n        tablet: \"6\",\n        widescreen: \"6\"\n      }, React.createElement(Container, null, React.createElement(SearchBar, {\n        checkDuplicateSelect: this.isPlayerSelected,\n        handleResultSelect: this.addPlayer,\n        fetchByUsername: debouncedfetchByUsername,\n        results: searchResults\n      })), React.createElement(Icon, {\n        name: \"share\"\n      })), React.createElement(Grid.Column, {\n        textAlign: \"center\"\n      }, React.createElement(Board, {\n        columns: columns,\n        mode: mode,\n        players: players,\n        removePlayer: this.removePlayer,\n        handleModeChange: this.changeMode,\n        loading: loading\n      }))));\n    }\n  }]);\n\n  return Leaderboard;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    searchResults: state.search.searchResults\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    fetchByUsername: fetchByUsername\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Leaderboard);","map":{"version":3,"sources":["/Users/kenny/Documents/GitHub/fortniteboards/pages/leaderboard.js"],"names":["React","Component","bindActionCreators","connect","_","Container","Grid","Icon","Dimmer","Loader","SearchBar","fetchByUsername","getProfile","Board","Leaderboard","query","usernames","mode","props","username","state","players","column","direction","newPlayer","updatedPlayers","sortPlayers","setState","updateURL","index","filter","player","i","nextMode","accessor","sortDirection","sortedColumn","sortedPlayers","orderBy","o","toLowerCase","stats","find","router","map","replace","pathname","options","shallow","columns","header","sort","handleSort","Array","length","fill","loading","initialPlayers","initColumns","all","console","log","searchResults","debouncedfetchByUsername","debounce","maxWait","paddingTop","paddingBottom","height","isPlayerSelected","addPlayer","removePlayer","changeMode","mapStateToProps","search","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\n\nimport { Container, Grid, Icon, Dimmer, Loader } from 'semantic-ui-react';\nimport SearchBar from '../src/components/SearchBar';\nimport { fetchByUsername, getProfile } from '../src/actions';\n\nimport Board from '../src/components/board';\n\n// show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n\nclass Leaderboard extends Component {\n    static async getInitialProps({ query }) {\n        let { usernames } = query;\n        const { mode } = query;\n        if (!usernames) return { usernames: [] };\n        usernames = typeof usernames == 'string' ? [usernames] : usernames;\n        return { usernames, mode };\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: props.usernames ? new Array(props.usernames.length).fill(null) : [],\n            mode: props.mode || 'solo',\n            columns: [],\n            column: null,\n            direction: null,\n            loading: null\n        };\n    }\n\n    async componentDidMount() {\n        const { usernames } = this.props;\n        const { players } = this.state;\n        let initialPlayers = new Array(usernames.length).fill(null);\n        // Initialize column headers\n        this.initColumns();\n\n        try {\n            // Initialize table size\n            this.setState({ loading: true, players: initialPlayers });\n            initialPlayers = await Promise.all(usernames.map(username => getProfile(username)));\n        } catch (error) {\n            console.log(error);\n        }\n\n        this.setState({\n            players: [...players, ...initialPlayers],\n            loading: false\n        });\n    }\n\n    addPlayer = async username => {\n        const { players, column, mode, direction } = this.state;\n        const newPlayer = await getProfile(username);\n        let updatedPlayers = [...players, newPlayer];\n\n        // if pre-sorted then apply sort setting to updated players\n        if (column !== null) {\n            updatedPlayers = this.sortPlayers(updatedPlayers, column, mode, direction);\n        }\n\n        this.setState({ players: updatedPlayers }, () => this.updateURL());\n    };\n\n    removePlayer = index => {\n        const { players } = this.state;\n        const updatedPlayers = players.filter((player, i) => i !== index);\n        this.setState({ players: updatedPlayers }, () => this.updateURL());\n    };\n\n    changeMode = direction => {\n        const { mode } = this.state;\n        let nextMode = '';\n        switch (mode) {\n            case 'solo':\n                nextMode = direction === 'forward' ? 'duo' : 'squad';\n                break;\n            case 'duo':\n                nextMode = direction === 'forward' ? 'squad' : 'solo';\n                break;\n            case 'squad':\n                nextMode = direction === 'forward' ? 'solo' : 'duo';\n                break;\n            default:\n                break;\n        }\n        this.setState({ mode: nextMode });\n    };\n\n    handleSort = accessor => () => {\n        const { column, players, direction, mode } = this.state;\n\n        // Reverse order if direction set, else default to desc\n        let sortDirection = direction === 'desc' ? 'asc' : 'desc';\n        let sortedColumn = column;\n\n        // Default to desc order on column switch\n        if (column !== accessor) {\n            // Default to asc order if username column\n            sortDirection = accessor == 'username' ? 'asc' : 'desc';\n            // Set sorted column name\n            sortedColumn = accessor;\n        }\n        // Sort players\n        const sortedPlayers = this.sortPlayers(players, accessor, mode, sortDirection);\n        this.setState(\n            {\n                column: sortedColumn,\n                players: sortedPlayers,\n                direction: sortDirection\n            },\n            () => this.updateURL()\n        );\n    };\n\n    sortPlayers = (players, accessor, mode, direction) => {\n        return accessor == 'username'\n            ? _.orderBy(this.state.players, [o => o.username.toLowerCase()], [direction])\n            : _.orderBy(players, o => o.stats[`${accessor}_${mode}`], [direction]);\n    };\n\n    isPlayerSelected = username => {\n        const { players } = this.state;\n        return players.find(player => player.username === username);\n    };\n\n    updateURL = () => {\n        const { router } = this.props;\n        const { players, mode } = this.state;\n        const usernames = players.map(player => player.username);\n        router.replace({\n            pathname: '/leaderboard',\n            query: { mode: mode, usernames: usernames },\n            options: { shallow: true }\n        });\n    };\n\n    initColumns = () => {\n        this.setState({\n            columns: [\n                {\n                    header: 'Player',\n                    accessor: 'username',\n                    sort: this.handleSort('username')\n                },\n                {\n                    header: 'K/D',\n                    accessor: 'kd',\n                    sort: this.handleSort('kd')\n                },\n                {\n                    header: 'Win %',\n                    accessor: 'winrate',\n                    sort: this.handleSort('winrate')\n                },\n                {\n                    header: 'Kills',\n                    accessor: 'kills',\n\n                    sort: this.handleSort('kills')\n                },\n                {\n                    header: 'Wins',\n                    accessor: 'placetop1',\n                    sort: this.handleSort('placetop1')\n                }\n            ]\n        });\n    };\n\n    render() {\n        const { columns, mode, players, loading } = this.state;\n        const { searchResults, fetchByUsername } = this.props;\n        const debouncedfetchByUsername = _.debounce(fetchByUsername, 500, {\n            maxWait: 1000\n        });\n        return (\n            <Container\n                text\n                textAlign=\"center\"\n                style={{\n                    paddingTop: '100px',\n                    paddingBottom: '100px',\n                    height: '100%'\n                }}\n            >\n                <h1>Board</h1>\n                <Grid columns=\"1\" centered textAlign=\"center\">\n                    <Grid.Column mobile=\"16\" computer=\"6\" largeScreen=\"6\" tablet=\"6\" widescreen=\"6\">\n                        <Container>\n                            <SearchBar\n                                checkDuplicateSelect={this.isPlayerSelected}\n                                handleResultSelect={this.addPlayer}\n                                fetchByUsername={debouncedfetchByUsername}\n                                results={searchResults}\n                            />\n                        </Container>\n                        <Icon name=\"share\" />\n                    </Grid.Column>\n                    <Grid.Column textAlign=\"center\">\n                        <Board\n                            columns={columns}\n                            mode={mode}\n                            players={players}\n                            removePlayer={this.removePlayer}\n                            handleModeChange={this.changeMode}\n                            loading={loading}\n                        />\n                    </Grid.Column>\n                </Grid>\n            </Container>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        searchResults: state.search.searchResults\n    };\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators({ fetchByUsername }, dispatch);\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Leaderboard);\n"]},"metadata":{},"sourceType":"module"}
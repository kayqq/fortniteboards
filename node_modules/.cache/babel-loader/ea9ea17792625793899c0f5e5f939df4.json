{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { Container, Grid, Icon, Header } from 'semantic-ui-react';\nimport SearchBar from \"../src/components/SearchBar\";\nimport { fetchByUsername, getProfile } from \"../src/actions\";\nimport Board from \"../src/components/board\"; // show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n// const Board = ({ players, mode, handleModeChange }) => {\n//     const columns = [\n//         { header: 'Player', accessor: 'username' },\n//         { header: 'K/D', accessor: 'kd' },\n//         { header: 'Wins', accessor: 'placetop1' },\n//         { header: 'Kills', accessor: 'kills' },\n//         { header: 'Win %', accessor: 'winrate' },\n//         { header: 'Matches', accessor: 'matchesplayed' }\n//     ];\n//     let backgroundColor = '';\n//     let title = '';\n//     switch (mode) {\n//         case 'solo':\n//             backgroundColor = '#14c8ff';\n//             title = 'Solo';\n//             break;\n//         case 'duo':\n//             backgroundColor = '#f3af19';\n//             title = 'Duo';\n//             break;\n//         case 'squad':\n//             backgroundColor = '#9d4dbb';\n//             title = 'Squad';\n//             break;\n//         default:\n//             break;\n//     }\n//     return (\n//         <Grid style={{ backgroundColor: '#2c3c57', color: 'white' }}>\n//             {/* Render Mode Header / Selector */}\n//             <Grid.Row columns=\"3\" style={{ backgroundColor }}>\n//                 <Grid.Column\n//                     as=\"span\"\n//                     floated=\"left\"\n//                     textAlign=\"left\"\n//                     onClick={() => handleModeChange('reverse')}\n//                 >\n//                     <Icon name=\"angle left\" />\n//                 </Grid.Column>\n//                 <Grid.Column as=\"span\" textAlign=\"center\">\n//                     {title}\n//                 </Grid.Column>\n//                 <Grid.Column\n//                     as=\"span\"\n//                     floated=\"right\"\n//                     textAlign=\"right\"\n//                     onClick={() => handleModeChange('forward')}\n//                 >\n//                     <Icon name=\"angle right\" />\n//                 </Grid.Column>\n//             </Grid.Row>\n//             {/* Render Column Header */}\n//             <Grid.Row columns={columns.length} stretched>\n//                 {columns.map((column, key) => (\n//                     // Render Column\n//                     <Grid.Column key={key} textAlign=\"center\" verticalAlign=\"middle\">\n//                         <Header size=\"tiny\">\n//                             <Header.Subheader style={{ color: '#92a2bd' }}>\n//                                 {column.header}\n//                             </Header.Subheader>\n//                         </Header>\n//                     </Grid.Column>\n//                 ))}\n//             </Grid.Row>\n//             {/* Render Player stats */}\n//             {players.map((player, key) => (\n//                 // Render Player\n//                 <Grid.Row key={key} columns={columns.length} stretched>\n//                     {columns.map((column, key) => {\n//                         // Handle special case, username is in parent tree and not a sibling within current branch\n//                         const columnContent =\n//                             key === 0\n//                                 ? player.username\n//                                 : player.stats[`${column.accessor}_${mode}`];\n//                         return (\n//                             <Grid.Column key={key} textAlign=\"center\" verticalAlign=\"middle\">\n//                                 <Header size=\"medium\" style={{ color: 'white' }}>\n//                                     {columnContent}\n//                                 </Header>\n//                             </Grid.Column>\n//                         );\n//                     })}\n//                 </Grid.Row>\n//             ))}\n//         </Grid>\n//     );\n// };\n\nvar Leaderboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Leaderboard, _Component);\n\n  function Leaderboard(props) {\n    var _this;\n\n    _classCallCheck(this, Leaderboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Leaderboard).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleModeChange\", function (direction) {\n      var mode = _this.state.mode;\n      var nextMode = '';\n\n      switch (mode) {\n        case 'solo':\n          nextMode = direction === 'forward' ? 'duo' : 'squad';\n          break;\n\n        case 'duo':\n          nextMode = direction === 'forward' ? 'squad' : 'solo';\n          break;\n\n        case 'squad':\n          nextMode = direction === 'forward' ? 'solo' : 'duo';\n          break;\n\n        default:\n          break;\n      }\n\n      _this.setState({\n        mode: nextMode\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"isPlayerSelected\", function (username, players) {\n      return players.find(function (player) {\n        return player.username === username;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleResultSelect\",\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(username, resetSearchFn) {\n        var players, newPlayer;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                players = _this.state.players; // Reset component if username is already in table\n\n                if (!_this.isPlayerSelected(username, players)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", resetSearchFn());\n\n              case 3:\n                _context.next = 5;\n                return getProfile(username);\n\n              case 5:\n                newPlayer = _context.sent;\n\n                _this.setState({\n                  players: [].concat(_toConsumableArray(players), [newPlayer])\n                }, function () {\n                  return resetSearchFn();\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _this.state = {\n      players: [],\n      mode: 'solo'\n    };\n    return _this;\n  }\n\n  _createClass(Leaderboard, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          searchResults = _this$props.searchResults,\n          fetchByUsername = _this$props.fetchByUsername;\n\n      var debouncedfetchByUsername = _.debounce(fetchByUsername, 500, {\n        maxWait: 1000\n      });\n\n      return React.createElement(\"div\", null, React.createElement(Container, {\n        text: true,\n        textAlign: \"center\",\n        style: {\n          paddingTop: '200px',\n          paddingBottom: '100px',\n          height: '100%'\n        }\n      }, React.createElement(\"h1\", null, \"Leaderboard\"), React.createElement(Grid, {\n        columns: \"1\",\n        centered: true,\n        textAlign: \"center\"\n      }, React.createElement(Grid.Column, {\n        mobile: \"16\",\n        computer: \"6\",\n        largeScreen: \"6\",\n        tablet: \"6\",\n        widescreen: \"6\"\n      }, React.createElement(Container, null, React.createElement(SearchBar, {\n        handleResultSelect: this.handleResultSelect,\n        fetchByUsername: debouncedfetchByUsername,\n        results: searchResults\n      }))), React.createElement(Grid.Column, {\n        textAlign: \"center\"\n      }, React.createElement(Board, {\n        players: this.state.players\n      })))));\n    }\n  }]);\n\n  return Leaderboard;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    searchResults: state.search.searchResults\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    fetchByUsername: fetchByUsername\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Leaderboard);","map":{"version":3,"sources":["/Users/kenny/Documents/GitHub/fortniteboards/pages/leaderboard.js"],"names":["React","Component","bindActionCreators","connect","_","Container","Grid","Icon","Header","SearchBar","fetchByUsername","getProfile","Board","Leaderboard","props","direction","mode","state","nextMode","setState","username","players","find","player","resetSearchFn","isPlayerSelected","newPlayer","searchResults","debouncedfetchByUsername","debounce","maxWait","paddingTop","paddingBottom","height","handleResultSelect","mapStateToProps","search","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\n\nimport { Container, Grid, Icon, Header } from 'semantic-ui-react';\nimport SearchBar from '../src/components/SearchBar';\nimport { fetchByUsername, getProfile } from '../src/actions';\n\nimport Board from '../src/components/board';\n\n// show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n\n// const Board = ({ players, mode, handleModeChange }) => {\n//     const columns = [\n//         { header: 'Player', accessor: 'username' },\n//         { header: 'K/D', accessor: 'kd' },\n//         { header: 'Wins', accessor: 'placetop1' },\n//         { header: 'Kills', accessor: 'kills' },\n//         { header: 'Win %', accessor: 'winrate' },\n//         { header: 'Matches', accessor: 'matchesplayed' }\n//     ];\n//     let backgroundColor = '';\n//     let title = '';\n//     switch (mode) {\n//         case 'solo':\n//             backgroundColor = '#14c8ff';\n//             title = 'Solo';\n//             break;\n//         case 'duo':\n//             backgroundColor = '#f3af19';\n//             title = 'Duo';\n//             break;\n//         case 'squad':\n//             backgroundColor = '#9d4dbb';\n//             title = 'Squad';\n//             break;\n//         default:\n//             break;\n//     }\n//     return (\n//         <Grid style={{ backgroundColor: '#2c3c57', color: 'white' }}>\n//             {/* Render Mode Header / Selector */}\n//             <Grid.Row columns=\"3\" style={{ backgroundColor }}>\n//                 <Grid.Column\n//                     as=\"span\"\n//                     floated=\"left\"\n//                     textAlign=\"left\"\n//                     onClick={() => handleModeChange('reverse')}\n//                 >\n//                     <Icon name=\"angle left\" />\n//                 </Grid.Column>\n//                 <Grid.Column as=\"span\" textAlign=\"center\">\n//                     {title}\n//                 </Grid.Column>\n//                 <Grid.Column\n//                     as=\"span\"\n//                     floated=\"right\"\n//                     textAlign=\"right\"\n//                     onClick={() => handleModeChange('forward')}\n//                 >\n//                     <Icon name=\"angle right\" />\n//                 </Grid.Column>\n//             </Grid.Row>\n\n//             {/* Render Column Header */}\n//             <Grid.Row columns={columns.length} stretched>\n//                 {columns.map((column, key) => (\n//                     // Render Column\n//                     <Grid.Column key={key} textAlign=\"center\" verticalAlign=\"middle\">\n//                         <Header size=\"tiny\">\n//                             <Header.Subheader style={{ color: '#92a2bd' }}>\n//                                 {column.header}\n//                             </Header.Subheader>\n//                         </Header>\n//                     </Grid.Column>\n//                 ))}\n//             </Grid.Row>\n\n//             {/* Render Player stats */}\n//             {players.map((player, key) => (\n//                 // Render Player\n//                 <Grid.Row key={key} columns={columns.length} stretched>\n//                     {columns.map((column, key) => {\n//                         // Handle special case, username is in parent tree and not a sibling within current branch\n//                         const columnContent =\n//                             key === 0\n//                                 ? player.username\n//                                 : player.stats[`${column.accessor}_${mode}`];\n//                         return (\n//                             <Grid.Column key={key} textAlign=\"center\" verticalAlign=\"middle\">\n//                                 <Header size=\"medium\" style={{ color: 'white' }}>\n//                                     {columnContent}\n//                                 </Header>\n//                             </Grid.Column>\n//                         );\n//                     })}\n//                 </Grid.Row>\n//             ))}\n//         </Grid>\n//     );\n// };\n\nclass Leaderboard extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { players: [], mode: 'solo' };\n    }\n\n    handleModeChange = direction => {\n        const { mode } = this.state;\n        let nextMode = '';\n        switch (mode) {\n            case 'solo':\n                nextMode = direction === 'forward' ? 'duo' : 'squad';\n                break;\n            case 'duo':\n                nextMode = direction === 'forward' ? 'squad' : 'solo';\n                break;\n            case 'squad':\n                nextMode = direction === 'forward' ? 'solo' : 'duo';\n                break;\n            default:\n                break;\n        }\n        this.setState({ mode: nextMode });\n    };\n\n    isPlayerSelected = (username, players) => players.find(player => player.username === username);\n\n    handleResultSelect = async (username, resetSearchFn) => {\n        const { players } = this.state;\n\n        // Reset component if username is already in table\n        if (this.isPlayerSelected(username, players)) return resetSearchFn();\n\n        // Get profile of username and add to table\n        const newPlayer = await getProfile(username);\n        this.setState({ players: [...players, newPlayer] }, () => resetSearchFn());\n    };\n\n    render() {\n        const { searchResults, fetchByUsername } = this.props;\n\n        const debouncedfetchByUsername = _.debounce(fetchByUsername, 500, {\n            maxWait: 1000\n        });\n\n        return (\n            <div>\n                <Container\n                    text\n                    textAlign=\"center\"\n                    style={{\n                        paddingTop: '200px',\n                        paddingBottom: '100px',\n                        height: '100%'\n                    }}\n                >\n                    <h1>Leaderboard</h1>\n                    <Grid columns=\"1\" centered textAlign=\"center\">\n                        <Grid.Column\n                            mobile=\"16\"\n                            computer=\"6\"\n                            largeScreen=\"6\"\n                            tablet=\"6\"\n                            widescreen=\"6\"\n                        >\n                            <Container>\n                                <SearchBar\n                                    handleResultSelect={this.handleResultSelect}\n                                    fetchByUsername={debouncedfetchByUsername}\n                                    results={searchResults}\n                                />\n                            </Container>\n                        </Grid.Column>\n                        <Grid.Column textAlign=\"center\">\n                            <Board players={this.state.players} />\n                            {/* <Board\n                                handleModeChange={this.handleModeChange}\n                                players={this.state.players}\n                                mode={this.state.mode}\n                            /> */}\n                        </Grid.Column>\n                    </Grid>\n                </Container>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        searchResults: state.search.searchResults\n    };\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators({ fetchByUsername }, dispatch);\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Leaderboard);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport ModeHeader from \"./ModeHeader\";\nimport StatsHeader from \"./StatsHeader\";\nimport Player from \"./Player\";\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleModeChange\", function (direction) {\n      var mode = _this.state.mode;\n      var nextMode = '';\n\n      switch (mode) {\n        case 'solo':\n          nextMode = direction === 'forward' ? 'duo' : 'squad';\n          break;\n\n        case 'duo':\n          nextMode = direction === 'forward' ? 'squad' : 'solo';\n          break;\n\n        case 'squad':\n          nextMode = direction === 'forward' ? 'solo' : 'duo';\n          break;\n\n        default:\n          break;\n      }\n\n      _this.setState({\n        mode: nextMode\n      });\n    });\n\n    _this.state = {\n      mode: 'solo'\n    };\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"render\",\n    value: function render() {\n      var players = this.props.players;\n      var mode = this.state.mode;\n      var columns = [{\n        header: 'Player',\n        accessor: 'username',\n        size: '6'\n      }, {\n        header: 'K/D',\n        accessor: 'kd',\n        size: '2'\n      }, {\n        header: 'Win %',\n        accessor: 'winrate',\n        size: '2'\n      }, {\n        header: 'Kills',\n        accessor: 'kills',\n        size: '2'\n      }, {\n        header: 'Wins',\n        accessor: 'placetop1',\n        size: '2' // { header: 'Matches', accessor: 'matchesplayed', size: '3' }\n\n      }];\n      return React.createElement(Grid, {\n        style: {\n          backgroundColor: '#2c3c57',\n          color: 'white'\n        }\n      }, React.createElement(ModeHeader, {\n        mode: mode,\n        handleModeChange: this.handleModeChange\n      }), React.createElement(StatsHeader, {\n        columns: columns\n      }), players.map(function (player, index) {\n        return React.createElement(Player, {\n          columns: columns,\n          player: player,\n          key: index,\n          mode: mode\n        });\n      }));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nexport { Board as default };","map":{"version":3,"sources":["/Users/kenny/Documents/GitHub/fortniteboards/src/components/board/index.js"],"names":["React","Component","Grid","ModeHeader","StatsHeader","Player","Board","props","direction","mode","state","nextMode","setState","players","columns","header","accessor","size","backgroundColor","color","handleModeChange","map","player","index"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,UAAP;AACA,OAAOC,WAAP;AACA,OAAOC,MAAP;;IAEqBC,K;;;;;AACjB,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,+EAAMA,KAAN;;AADe,+FAMA,UAAAC,SAAS,EAAI;AAAA,UACpBC,IADoB,GACX,MAAKC,KADM,CACpBD,IADoB;AAE5B,UAAIE,QAAQ,GAAG,EAAf;;AACA,cAAQF,IAAR;AACI,aAAK,MAAL;AACIE,UAAAA,QAAQ,GAAGH,SAAS,KAAK,SAAd,GAA0B,KAA1B,GAAkC,OAA7C;AACA;;AACJ,aAAK,KAAL;AACIG,UAAAA,QAAQ,GAAGH,SAAS,KAAK,SAAd,GAA0B,OAA1B,GAAoC,MAA/C;AACA;;AACJ,aAAK,OAAL;AACIG,UAAAA,QAAQ,GAAGH,SAAS,KAAK,SAAd,GAA0B,MAA1B,GAAmC,KAA9C;AACA;;AACJ;AACI;AAXR;;AAaA,YAAKI,QAAL,CAAc;AAAEH,QAAAA,IAAI,EAAEE;AAAR,OAAd;AACH,KAvBkB;;AAGf,UAAKD,KAAL,GAAa;AAAED,MAAAA,IAAI,EAAE;AAAR,KAAb;AAHe;AAIlB;;;;6BAqBQ;AAAA,UACGI,OADH,GACe,KAAKN,KADpB,CACGM,OADH;AAAA,UAEGJ,IAFH,GAEY,KAAKC,KAFjB,CAEGD,IAFH;AAGL,UAAMK,OAAO,GAAG,CACZ;AAAEC,QAAAA,MAAM,EAAE,QAAV;AAAoBC,QAAAA,QAAQ,EAAE,UAA9B;AAA0CC,QAAAA,IAAI,EAAE;AAAhD,OADY,EAEZ;AAAEF,QAAAA,MAAM,EAAE,KAAV;AAAiBC,QAAAA,QAAQ,EAAE,IAA3B;AAAiCC,QAAAA,IAAI,EAAE;AAAvC,OAFY,EAGZ;AAAEF,QAAAA,MAAM,EAAE,OAAV;AAAmBC,QAAAA,QAAQ,EAAE,SAA7B;AAAwCC,QAAAA,IAAI,EAAE;AAA9C,OAHY,EAIZ;AAAEF,QAAAA,MAAM,EAAE,OAAV;AAAmBC,QAAAA,QAAQ,EAAE,OAA7B;AAAsCC,QAAAA,IAAI,EAAE;AAA5C,OAJY,EAKZ;AAAEF,QAAAA,MAAM,EAAE,MAAV;AAAkBC,QAAAA,QAAQ,EAAE,WAA5B;AAAyCC,QAAAA,IAAI,EAAE,GAA/C,CACA;;AADA,OALY,CAAhB;AAQA,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,eAAe,EAAE,SAAnB;AAA8BC,UAAAA,KAAK,EAAE;AAArC;AAAb,SAEI,oBAAC,UAAD;AAAY,QAAA,IAAI,EAAEV,IAAlB;AAAwB,QAAA,gBAAgB,EAAE,KAAKW;AAA/C,QAFJ,EAKI,oBAAC,WAAD;AAAa,QAAA,OAAO,EAAEN;AAAtB,QALJ,EAQKD,OAAO,CAACQ,GAAR,CAAY,UAACC,MAAD,EAASC,KAAT;AAAA,eACT,oBAAC,MAAD;AAAQ,UAAA,OAAO,EAAET,OAAjB;AAA0B,UAAA,MAAM,EAAEQ,MAAlC;AAA0C,UAAA,GAAG,EAAEC,KAA/C;AAAsD,UAAA,IAAI,EAAEd;AAA5D,UADS;AAAA,OAAZ,CARL,CADJ;AAcH;;;;EAnD8BR,S;;SAAdK,K","sourcesContent":["import React, { Component } from 'react';\n\nimport { Grid } from 'semantic-ui-react';\nimport ModeHeader from './ModeHeader';\nimport StatsHeader from './StatsHeader';\nimport Player from './Player';\n\nexport default class Board extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { mode: 'solo' };\n    }\n\n    handleModeChange = direction => {\n        const { mode } = this.state;\n        let nextMode = '';\n        switch (mode) {\n            case 'solo':\n                nextMode = direction === 'forward' ? 'duo' : 'squad';\n                break;\n            case 'duo':\n                nextMode = direction === 'forward' ? 'squad' : 'solo';\n                break;\n            case 'squad':\n                nextMode = direction === 'forward' ? 'solo' : 'duo';\n                break;\n            default:\n                break;\n        }\n        this.setState({ mode: nextMode });\n    };\n\n    render() {\n        const { players } = this.props;\n        const { mode } = this.state;\n        const columns = [\n            { header: 'Player', accessor: 'username', size: '6' },\n            { header: 'K/D', accessor: 'kd', size: '2' },\n            { header: 'Win %', accessor: 'winrate', size: '2' },\n            { header: 'Kills', accessor: 'kills', size: '2' },\n            { header: 'Wins', accessor: 'placetop1', size: '2' }\n            // { header: 'Matches', accessor: 'matchesplayed', size: '3' }\n        ];\n        return (\n            <Grid style={{ backgroundColor: '#2c3c57', color: 'white' }}>\n                {/* Render Mode Header / Selector */}\n                <ModeHeader mode={mode} handleModeChange={this.handleModeChange} />\n\n                {/* Render Column Header */}\n                <StatsHeader columns={columns} />\n\n                {/* Render Player stats */}\n                {players.map((player, index) => (\n                    <Player columns={columns} player={player} key={index} mode={mode} />\n                ))}\n            </Grid>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
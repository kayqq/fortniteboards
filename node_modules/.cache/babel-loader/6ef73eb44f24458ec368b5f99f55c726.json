{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { Container, Grid } from 'semantic-ui-react';\nimport SearchBar from \"../src/components/SearchBar\";\nimport { fetchByUsername, getProfile } from \"../src/actions\";\nimport Board from \"../src/components/board\"; // show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n\nvar Leaderboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Leaderboard, _Component);\n\n  function Leaderboard(props) {\n    var _this;\n\n    _classCallCheck(this, Leaderboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Leaderboard).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleResultSelect\",\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(username, resetSearchFn) {\n        var players, router, newPlayer, isPlayerSelected;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                isPlayerSelected = function _ref2(username, players) {\n                  players.find(function (player) {\n                    return player.username === username;\n                  });\n                };\n\n                players = _this.state.players;\n                router = _this.props.router; // Reset component if username is already in table\n\n                if (!isPlayerSelected(username, players)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", resetSearchFn());\n\n              case 5:\n                _context.next = 7;\n                return getProfile(username);\n\n              case 7:\n                newPlayer = _context.sent;\n\n                _this.setState({\n                  players: [].concat(_toConsumableArray(players), [newPlayer])\n                }, function () {\n                  var query = [router.query.players];\n                  router.push({\n                    pathname: '/leaderboard',\n                    query: {\n                      players: [router.query.players, username]\n                    },\n                    options: {\n                      shallow: true\n                    }\n                  });\n                  console.log(query);\n                  resetSearchFn();\n                }); // Helper function - returns boolean if player already added\n\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _this.state = {\n      players: [],\n      mode: 'solo'\n    };\n    return _this;\n  }\n\n  _createClass(Leaderboard, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          searchResults = _this$props.searchResults,\n          fetchByUsername = _this$props.fetchByUsername;\n\n      var debouncedfetchByUsername = _.debounce(fetchByUsername, 500, {\n        maxWait: 1000\n      });\n\n      return React.createElement(\"div\", null, React.createElement(Container, {\n        text: true,\n        textAlign: \"center\",\n        style: {\n          paddingTop: '200px',\n          paddingBottom: '100px',\n          height: '100%'\n        }\n      }, React.createElement(\"h1\", null, \"Leaderboard\"), React.createElement(Grid, {\n        columns: \"1\",\n        centered: true,\n        textAlign: \"center\"\n      }, React.createElement(Grid.Column, {\n        mobile: \"16\",\n        computer: \"6\",\n        largeScreen: \"6\",\n        tablet: \"6\",\n        widescreen: \"6\"\n      }, React.createElement(Container, null, React.createElement(SearchBar, {\n        handleResultSelect: this.handleResultSelect,\n        fetchByUsername: debouncedfetchByUsername,\n        results: searchResults\n      }))), React.createElement(Grid.Column, {\n        textAlign: \"center\"\n      }, React.createElement(Board, {\n        players: this.state.players\n      })))));\n    }\n  }]);\n\n  return Leaderboard;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    searchResults: state.search.searchResults\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    fetchByUsername: fetchByUsername\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Leaderboard);","map":{"version":3,"sources":["/Users/kenny/Documents/GitHub/fortniteboards/pages/leaderboard.js"],"names":["React","Component","bindActionCreators","connect","_","Container","Grid","SearchBar","fetchByUsername","getProfile","Board","Leaderboard","props","username","resetSearchFn","isPlayerSelected","players","find","player","state","router","newPlayer","setState","query","push","pathname","options","shallow","console","log","mode","searchResults","debouncedfetchByUsername","debounce","maxWait","paddingTop","paddingBottom","height","handleResultSelect","mapStateToProps","search","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\n\nimport { Container, Grid } from 'semantic-ui-react';\nimport SearchBar from '../src/components/SearchBar';\nimport { fetchByUsername, getProfile } from '../src/actions';\n\nimport Board from '../src/components/board';\n\n// show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n\nclass Leaderboard extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { players: [], mode: 'solo' };\n    }\n\n    handleResultSelect = async (username, resetSearchFn) => {\n        const { players } = this.state;\n        const { router } = this.props;\n\n        // Reset component if username is already in table\n        if (isPlayerSelected(username, players)) return resetSearchFn();\n\n        // Get profile of username and add to table\n        const newPlayer = await getProfile(username);\n        this.setState({ players: [...players, newPlayer] }, () => {\n            const query = [router.query.players];\n            router.push({\n                pathname: '/leaderboard',\n                query: { players: [router.query.players, username] },\n                options: { shallow: true }\n            });\n            console.log(query);\n            resetSearchFn();\n        });\n\n        // Helper function - returns boolean if player already added\n        function isPlayerSelected(username, players) {\n            players.find(player => player.username === username);\n        }\n    };\n\n    render() {\n        const { searchResults, fetchByUsername } = this.props;\n\n        const debouncedfetchByUsername = _.debounce(fetchByUsername, 500, {\n            maxWait: 1000\n        });\n\n        return (\n            <div>\n                <Container\n                    text\n                    textAlign=\"center\"\n                    style={{\n                        paddingTop: '200px',\n                        paddingBottom: '100px',\n                        height: '100%'\n                    }}\n                >\n                    <h1>Leaderboard</h1>\n                    <Grid columns=\"1\" centered textAlign=\"center\">\n                        <Grid.Column\n                            mobile=\"16\"\n                            computer=\"6\"\n                            largeScreen=\"6\"\n                            tablet=\"6\"\n                            widescreen=\"6\"\n                        >\n                            <Container>\n                                <SearchBar\n                                    handleResultSelect={this.handleResultSelect}\n                                    fetchByUsername={debouncedfetchByUsername}\n                                    results={searchResults}\n                                />\n                            </Container>\n                        </Grid.Column>\n                        <Grid.Column textAlign=\"center\">\n                            <Board players={this.state.players} />\n                        </Grid.Column>\n                    </Grid>\n                </Container>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        searchResults: state.search.searchResults\n    };\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators({ fetchByUsername }, dispatch);\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Leaderboard);\n"]},"metadata":{},"sourceType":"module"}
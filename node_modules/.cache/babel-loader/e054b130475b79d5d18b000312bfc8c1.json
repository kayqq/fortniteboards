{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _ from 'lodash';\nimport React, { Component, useState, useEffect } from 'react';\nimport { Search, Label } from 'semantic-ui-react';\nimport { getUsernames } from \"../actions\";\n\nvar resultRenderer = function resultRenderer(_ref) {\n  var uid = _ref.uid,\n      username = _ref.username;\n  return React.createElement(Label, {\n    key: uid,\n    content: username\n  });\n}; // export default class SearchBar extends Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             value: '',\n//             isLoading: false\n//         };\n//     }\n//     componentWillMount() {\n//         this.resetComponent();\n//     }\n//     resetComponent = () => this.setState({ isLoading: false, value: '' });\n//     handleResultSelect = async (e, { result }) => {\n//         const { handleResultSelect } = this.props;\n//         this.setState({ value: result.username, isLoading: true });\n//         await handleResultSelect(result.username);\n//         this.resetComponent();\n//     };\n//     handleSearchChange = (e, { value }) => {\n//         this.setState({ isLoading: true, value }, () => {\n//             // reset loading if empty\n//             if (this.state.value.length < 1) return this.resetComponent();\n//             // fetch users by username\n//             this.props.fetchByUsername(this.state.value, () => {\n//                 this.setState({ isLoading: false });\n//             });\n//         });\n//     };\n//     render() {\n//         const { isLoading, value } = this.state;\n//         const { results } = this.props;\n//         return (\n//             <Search\n//                 input={{ fluid: true, icon: 'arrow circle right' }}\n//                 loading={isLoading}\n//                 placeholder={'Enter your Epic username'}\n//                 onResultSelect={this.handleResultSelect}\n//                 onSearchChange={_.debounce(this.handleSearchChange, 500, {\n//                     leading: true\n//                 })}\n//                 results={results}\n//                 resultRenderer={resultRenderer}\n//                 value={value}\n//                 showNoResults={false}\n//             />\n//         );\n//     }\n// }\n\n\nvar SearchBar = function SearchBar(_ref2) {\n  var handleResultSelect = _ref2.handleResultSelect;\n  console.log('rendering');\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      results = _useState6[0],\n      setResults = _useState6[1];\n\n  useEffect(function () {// resetComponent();\n  }, []); // const resetComponent = () => setState({ isLoading: false, value: '' });\n\n  var onResultSelect = function onResultSelect(e, _ref3) {\n    var result = _ref3.result;\n    setValue(result.username);\n    handleResultSelect(result.username); // resetComponent();\n  };\n\n  var onSearchChange =\n  /*#__PURE__*/\n  function () {\n    var _ref5 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(e, _ref4) {\n      var value;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              value = _ref4.value;\n              setIsLoading(true);\n              setValue(value);\n              console.log(value); // const results = await debouncedGet(value);\n              // const formattedResults = results.map((result, index) => {\n              //     result.key = index;\n              //     result.title = result.username;\n              //     return result;\n              // });\n              // setResults(results);\n\n              setIsLoading(false);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function onSearchChange(_x, _x2) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var debouncedGet = _.debounce(getUsernames, 500, {\n    maxWait: 1000\n  });\n\n  return React.createElement(Search, {\n    input: {\n      fluid: true,\n      icon: 'arrow circle right'\n    },\n    loading: state.isLoading,\n    placeholder: 'Enter your Epic username',\n    onResultSelect: onResultSelect,\n    onSearchChange: onSearchChange,\n    results: results,\n    resultRenderer: resultRenderer,\n    value: state.value,\n    showNoResults: false\n  });\n};\n\nexport default SearchBar;","map":{"version":3,"sources":["/Users/kenny/Documents/GitHub/fortniteboards/src/components/SearchBar.js"],"names":["_","React","Component","useState","useEffect","Search","Label","getUsernames","resultRenderer","uid","username","SearchBar","handleResultSelect","console","log","value","setValue","isLoading","setIsLoading","results","setResults","onResultSelect","e","result","onSearchChange","debouncedGet","debounce","maxWait","fluid","icon","state"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport React, { Component, useState, useEffect } from 'react';\nimport { Search, Label } from 'semantic-ui-react';\nimport { getUsernames } from '../actions';\n\nconst resultRenderer = ({ uid, username }) => <Label key={uid} content={username} />;\n\n// export default class SearchBar extends Component {\n//     constructor(props) {\n//         super(props);\n\n//         this.state = {\n//             value: '',\n//             isLoading: false\n//         };\n//     }\n\n//     componentWillMount() {\n//         this.resetComponent();\n//     }\n\n//     resetComponent = () => this.setState({ isLoading: false, value: '' });\n\n//     handleResultSelect = async (e, { result }) => {\n//         const { handleResultSelect } = this.props;\n//         this.setState({ value: result.username, isLoading: true });\n//         await handleResultSelect(result.username);\n//         this.resetComponent();\n//     };\n\n//     handleSearchChange = (e, { value }) => {\n//         this.setState({ isLoading: true, value }, () => {\n//             // reset loading if empty\n//             if (this.state.value.length < 1) return this.resetComponent();\n\n//             // fetch users by username\n//             this.props.fetchByUsername(this.state.value, () => {\n//                 this.setState({ isLoading: false });\n//             });\n//         });\n//     };\n\n//     render() {\n//         const { isLoading, value } = this.state;\n//         const { results } = this.props;\n//         return (\n//             <Search\n//                 input={{ fluid: true, icon: 'arrow circle right' }}\n//                 loading={isLoading}\n//                 placeholder={'Enter your Epic username'}\n//                 onResultSelect={this.handleResultSelect}\n//                 onSearchChange={_.debounce(this.handleSearchChange, 500, {\n//                     leading: true\n//                 })}\n//                 results={results}\n//                 resultRenderer={resultRenderer}\n//                 value={value}\n//                 showNoResults={false}\n//             />\n//         );\n//     }\n// }\n\nconst SearchBar = ({ handleResultSelect }) => {\n    console.log('rendering');\n    const [value, setValue] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n\n    const [results, setResults] = useState([]);\n\n    useEffect(() => {\n        // resetComponent();\n    }, []);\n\n    // const resetComponent = () => setState({ isLoading: false, value: '' });\n\n    const onResultSelect = (e, { result }) => {\n        setValue(result.username);\n        handleResultSelect(result.username);\n        // resetComponent();\n    };\n\n    const onSearchChange = async (e, { value }) => {\n        setIsLoading(true);\n        setValue(value);\n        console.log(value);\n        // const results = await debouncedGet(value);\n        // const formattedResults = results.map((result, index) => {\n        //     result.key = index;\n        //     result.title = result.username;\n        //     return result;\n        // });\n        // setResults(results);\n        setIsLoading(false);\n    };\n\n    const debouncedGet = _.debounce(getUsernames, 500, {\n        maxWait: 1000\n    });\n\n    return (\n        <Search\n            input={{ fluid: true, icon: 'arrow circle right' }}\n            loading={state.isLoading}\n            placeholder={'Enter your Epic username'}\n            onResultSelect={onResultSelect}\n            onSearchChange={onSearchChange}\n            results={results}\n            resultRenderer={resultRenderer}\n            value={state.value}\n            showNoResults={false}\n        />\n    );\n};\n\nexport default SearchBar;\n"]},"metadata":{},"sourceType":"module"}
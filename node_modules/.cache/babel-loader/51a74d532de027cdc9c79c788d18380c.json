{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { Component, useState } from 'react';\nimport _ from 'lodash';\nimport copy from 'copy-to-clipboard';\nimport { Container, Grid, Icon, Popup, Button, Input, Header, Menu } from 'semantic-ui-react';\nimport SearchBar from \"../src/components/SearchBar\";\nimport { getProfileByUsername, getProfileByUid } from \"../src/actions\";\nimport Board from \"../src/components/Board\"; // show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n// share / reset / refresh buttons\n\nvar CopyLinkPopup = function CopyLinkPopup(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isCopied = _useState2[0],\n      setCopied = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      link = _useState4[0],\n      setLink = _useState4[1];\n\n  var handleCopyClipboard = function handleCopyClipboard(link) {\n    var didCopy = copy(link);\n    setCopied(didCopy);\n  };\n\n  return React.createElement(Popup, {\n    style: {\n      width: '100%'\n    },\n    hideOnScroll: true,\n    hoverable: true,\n    position: \"top center\",\n    onOpen: function onOpen() {\n      return setLink(location.href);\n    },\n    onClose: function onClose() {\n      return setCopied(false);\n    },\n    content: React.createElement(Grid, {\n      textAlign: \"center\"\n    }, React.createElement(Grid.Row, {\n      textAlign: \"left\"\n    }, React.createElement(Grid.Column, {\n      textAlign: \"left\"\n    }, React.createElement(Header, {\n      as: \"h5\",\n      color: isCopied ? 'green' : 'grey'\n    }, isCopied ? 'Link copied!' : 'Link to custom leaderboard: '))), React.createElement(Grid.Row, {\n      style: {\n        paddingTop: '0px'\n      }\n    }, React.createElement(Grid.Column, null, React.createElement(Input, {\n      value: link\n    }), React.createElement(Button, {\n      icon: isCopied ? 'check' : 'linkify',\n      color: isCopied ? 'green' : 'grey',\n      compact: true,\n      onClick: function onClick() {\n        return handleCopyClipboard(link);\n      }\n    })))),\n    trigger: children\n  });\n};\n\nvar Leaderboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Leaderboard, _Component);\n\n  _createClass(Leaderboard, null, [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref2) {\n        var query, usernames, mode;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                query = _ref2.query;\n                usernames = query.usernames;\n                mode = query.mode;\n\n                if (usernames) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  usernames: []\n                });\n\n              case 5:\n                // Format into Array\n                usernames = typeof usernames == 'string' ? [usernames] : usernames;\n                return _context.abrupt(\"return\", {\n                  usernames: usernames,\n                  mode: mode\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  function Leaderboard(props) {\n    var _this;\n\n    _classCallCheck(this, Leaderboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Leaderboard).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"initColumns\", function () {\n      _this.setState({\n        columns: [{\n          header: 'Player',\n          accessor: 'username',\n          sort: _this.handleSort('username')\n        }, {\n          header: 'K/D',\n          accessor: 'kd',\n          sort: _this.handleSort('kd')\n        }, {\n          header: 'Win %',\n          accessor: 'winrate',\n          sort: _this.handleSort('winrate')\n        }, {\n          header: 'Kills',\n          accessor: 'kills',\n          sort: _this.handleSort('kills')\n        }, {\n          header: 'Wins',\n          accessor: 'placetop1',\n          sort: _this.handleSort('placetop1')\n        }]\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"initPlayers\",\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(usernames) {\n        var initialPlayers;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                initialPlayers = []; // Start load player stats\n\n                _this.setState({\n                  loading: true,\n                  players: new Array(usernames.length).fill(null)\n                });\n\n                _context2.next = 4;\n                return _Promise.all(usernames.map(function (username) {\n                  return getProfileByUsername(username);\n                }));\n\n              case 4:\n                initialPlayers = _context2.sent;\n\n                // End load player stats\n                _this.setState({\n                  players: _toConsumableArray(initialPlayers),\n                  loading: false\n                }, function () {\n                  return _this.updateURL();\n                });\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"addPlayer\",\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(player) {\n        var _this$state, players, column, mode, direction, newPlayer, updatedPlayers;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this$state = _this.state, players = _this$state.players, column = _this$state.column, mode = _this$state.mode, direction = _this$state.direction; // Check if already added to board\n\n                if (!_this.isPlayerSelected(player.uid)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 3:\n                _context3.next = 5;\n                return getProfileByUid(player.uid);\n\n              case 5:\n                newPlayer = _context3.sent;\n                updatedPlayers = [].concat(_toConsumableArray(players), [newPlayer]); // if pre-sorted then apply sort setting to updated players\n\n                if (column !== null) {\n                  updatedPlayers = _this.sortPlayers(updatedPlayers, column, mode, direction);\n                }\n\n                _this.setState({\n                  players: updatedPlayers\n                }, function () {\n                  return _this.updateURL();\n                });\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"removePlayer\", function (index) {\n      var players = _this.state.players;\n      var updatedPlayers = players.filter(function (player, i) {\n        return i !== index;\n      });\n\n      _this.setState({\n        players: updatedPlayers\n      }, function () {\n        return _this.updateURL();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"changeMode\", function (direction) {\n      var mode = _this.state.mode;\n      var nextMode = '';\n\n      switch (mode) {\n        case 'solo':\n          nextMode = direction === 'forward' ? 'duo' : 'squad';\n          break;\n\n        case 'duo':\n          nextMode = direction === 'forward' ? 'squad' : 'solo';\n          break;\n\n        case 'squad':\n          nextMode = direction === 'forward' ? 'solo' : 'duo';\n          break;\n\n        default:\n          break;\n      }\n\n      _this.setState({\n        mode: nextMode\n      }, function () {\n        return _this.updateURL();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleSort\", function (accessor) {\n      return function () {\n        var _this$state2 = _this.state,\n            column = _this$state2.column,\n            players = _this$state2.players,\n            direction = _this$state2.direction,\n            mode = _this$state2.mode; // Reverse order if direction set, else default to desc\n\n        var sortDirection = direction === 'desc' ? 'asc' : 'desc';\n        var sortedColumn = column; // Default to desc order on column switch\n\n        if (column !== accessor) {\n          // Default to asc order if username column\n          sortDirection = accessor == 'username' ? 'asc' : 'desc'; // Set sorted column name\n\n          sortedColumn = accessor;\n        } // Sort players\n\n\n        var sortedPlayers = _this.sortPlayers(players, accessor, mode, sortDirection);\n\n        _this.setState({\n          column: sortedColumn,\n          players: sortedPlayers,\n          direction: sortDirection\n        }, function () {\n          return _this.updateURL();\n        });\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"sortPlayers\", function (players, accessor, mode, direction) {\n      return accessor == 'username' ? _.orderBy(_this.state.players, [function (o) {\n        return o.username.toLowerCase();\n      }], [direction]) : _.orderBy(players, function (o) {\n        return o.stats[\"\".concat(accessor, \"_\").concat(mode)];\n      }, [direction]);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"isPlayerSelected\", function (uid) {\n      var players = _this.state.players;\n      return players.find(function (player) {\n        return player.uid === uid;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"updateURL\", function () {\n      var router = _this.props.router;\n      var _this$state3 = _this.state,\n          players = _this$state3.players,\n          mode = _this$state3.mode;\n      var usernames = players.map(function (player) {\n        return player.username;\n      });\n      router.replace({\n        pathname: '/leaderboard',\n        query: {\n          mode: mode,\n          usernames: usernames\n        },\n        options: {\n          shallow: true\n        }\n      });\n    });\n\n    _this.state = {\n      players: [],\n      mode: props.mode || 'solo',\n      columns: [],\n      column: null,\n      direction: null,\n      loading: null\n    };\n    return _this;\n  }\n\n  _createClass(Leaderboard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        url: location.href\n      });\n      this.initColumns();\n      var usernames = this.props.usernames;\n\n      if (usernames.length) {\n        this.initPlayers(usernames);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state4 = this.state,\n          columns = _this$state4.columns,\n          mode = _this$state4.mode,\n          players = _this$state4.players,\n          loading = _this$state4.loading;\n      return React.createElement(Container, {\n        text: true,\n        textAlign: \"center\",\n        style: {\n          paddingTop: '100px',\n          paddingBottom: '100px' // height: '100%'\n\n        }\n      }, React.createElement(Grid, {\n        centered: true,\n        textAlign: \"center\"\n      }, React.createElement(Grid.Row, null, React.createElement(\"h3\", null, \"Leaderboards\")), React.createElement(Grid.Row, {\n        columns: \"1\"\n      }, React.createElement(Grid.Column, {\n        mobile: \"16\",\n        computer: \"6\",\n        largeScreen: \"6\",\n        tablet: \"6\",\n        widescreen: \"6\"\n      }, React.createElement(SearchBar, {\n        handleResultSelect: this.addPlayer\n      }))), React.createElement(Grid.Row, {\n        className: \"compact\"\n      }, React.createElement(Menu, {\n        fluid: true,\n        borderless: true\n      }, React.createElement(Menu.Item, {\n        position: \"right\",\n        as: \"a\"\n      }, React.createElement(CopyLinkPopup, null, React.createElement(\"span\", null, \"Share \", React.createElement(Icon, {\n        name: \"share\"\n      })))), React.createElement(Menu.Item, {\n        as: \"a\"\n      }, React.createElement(\"span\", null, \"Refresh \", React.createElement(Icon, {\n        name: \"sync alternate\"\n      }))))), React.createElement(Grid.Row, null, React.createElement(Grid.Column, {\n        textAlign: \"center\"\n      }, React.createElement(Board, {\n        columns: columns,\n        mode: mode,\n        players: players,\n        removePlayer: this.removePlayer,\n        handleModeChange: this.changeMode,\n        loading: loading\n      })))));\n    }\n  }]);\n\n  return Leaderboard;\n}(Component);\n\nexport default Leaderboard;","map":{"version":3,"sources":["/Users/kenny/Documents/GitHub/fortniteboards/pages/leaderboard.js"],"names":["React","Component","useState","_","copy","Container","Grid","Icon","Popup","Button","Input","Header","Menu","SearchBar","getProfileByUsername","getProfileByUid","Board","CopyLinkPopup","children","isCopied","setCopied","link","setLink","handleCopyClipboard","didCopy","width","location","href","paddingTop","Leaderboard","query","usernames","mode","props","setState","columns","header","accessor","sort","handleSort","initialPlayers","loading","players","Array","length","fill","all","map","username","updateURL","player","state","column","direction","isPlayerSelected","uid","newPlayer","updatedPlayers","sortPlayers","index","filter","i","nextMode","sortDirection","sortedColumn","sortedPlayers","orderBy","o","toLowerCase","stats","find","router","replace","pathname","options","shallow","url","initColumns","initPlayers","paddingBottom","addPlayer","removePlayer","changeMode"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react';\nimport _ from 'lodash';\nimport copy from 'copy-to-clipboard';\n\nimport { Container, Grid, Icon, Popup, Button, Input, Header, Menu } from 'semantic-ui-react';\nimport SearchBar from '../src/components/SearchBar';\nimport { getProfileByUsername, getProfileByUid } from '../src/actions';\n\nimport Board from '../src/components/Board';\n\n// show awards, i.e. most kills, most wins, highest kd etc etc in separate div\n// share / reset / refresh buttons\n\nconst CopyLinkPopup = ({ children }) => {\n    const [isCopied, setCopied] = useState(false);\n    const [link, setLink] = useState('');\n\n    const handleCopyClipboard = link => {\n        const didCopy = copy(link);\n        setCopied(didCopy);\n    };\n\n    return (\n        <Popup\n            style={{ width: '100%' }}\n            hideOnScroll\n            hoverable\n            position=\"top center\"\n            onOpen={() => setLink(location.href)}\n            onClose={() => setCopied(false)}\n            content={\n                <Grid textAlign=\"center\">\n                    <Grid.Row textAlign=\"left\">\n                        <Grid.Column textAlign=\"left\">\n                            <Header as=\"h5\" color={isCopied ? 'green' : 'grey'}>\n                                {isCopied ? 'Link copied!' : 'Link to custom leaderboard: '}\n                            </Header>\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row style={{ paddingTop: '0px' }}>\n                        <Grid.Column>\n                            <Input value={link} />\n                            <Button\n                                icon={isCopied ? 'check' : 'linkify'}\n                                color={isCopied ? 'green' : 'grey'}\n                                compact\n                                onClick={() => handleCopyClipboard(link)}\n                            />\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            }\n            trigger={children}\n        />\n    );\n};\n\nclass Leaderboard extends Component {\n    static async getInitialProps({ query }) {\n        let { usernames } = query;\n        const { mode } = query;\n        if (!usernames) return { usernames: [] };\n        // Format into Array\n        usernames = typeof usernames == 'string' ? [usernames] : usernames;\n        return { usernames, mode };\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: [],\n            mode: props.mode || 'solo',\n            columns: [],\n            column: null,\n            direction: null,\n            loading: null\n        };\n    }\n\n    componentDidMount() {\n        this.setState({ url: location.href });\n        this.initColumns();\n\n        const { usernames } = this.props;\n        if (usernames.length) {\n            this.initPlayers(usernames);\n        }\n    }\n\n    initColumns = () => {\n        this.setState({\n            columns: [\n                {\n                    header: 'Player',\n                    accessor: 'username',\n                    sort: this.handleSort('username')\n                },\n                {\n                    header: 'K/D',\n                    accessor: 'kd',\n                    sort: this.handleSort('kd')\n                },\n                {\n                    header: 'Win %',\n                    accessor: 'winrate',\n                    sort: this.handleSort('winrate')\n                },\n                {\n                    header: 'Kills',\n                    accessor: 'kills',\n\n                    sort: this.handleSort('kills')\n                },\n                {\n                    header: 'Wins',\n                    accessor: 'placetop1',\n                    sort: this.handleSort('placetop1')\n                }\n            ]\n        });\n    };\n\n    initPlayers = async usernames => {\n        let initialPlayers = [];\n        // Start load player stats\n        this.setState({\n            loading: true,\n            players: new Array(usernames.length).fill(null)\n        });\n\n        initialPlayers = await Promise.all(\n            usernames.map(username => getProfileByUsername(username))\n        );\n\n        // End load player stats\n        this.setState(\n            {\n                players: [...initialPlayers],\n                loading: false\n            },\n            () => this.updateURL()\n        );\n    };\n\n    addPlayer = async player => {\n        const { players, column, mode, direction } = this.state;\n        // Check if already added to board\n        if (this.isPlayerSelected(player.uid)) return;\n        // Not duplicate, get profile and add\n        const newPlayer = await getProfileByUid(player.uid);\n        let updatedPlayers = [...players, newPlayer];\n\n        // if pre-sorted then apply sort setting to updated players\n        if (column !== null) {\n            updatedPlayers = this.sortPlayers(updatedPlayers, column, mode, direction);\n        }\n\n        this.setState({ players: updatedPlayers }, () => this.updateURL());\n    };\n\n    removePlayer = index => {\n        const { players } = this.state;\n        const updatedPlayers = players.filter((player, i) => i !== index);\n        this.setState({ players: updatedPlayers }, () => this.updateURL());\n    };\n\n    changeMode = direction => {\n        const { mode } = this.state;\n        let nextMode = '';\n        switch (mode) {\n            case 'solo':\n                nextMode = direction === 'forward' ? 'duo' : 'squad';\n                break;\n            case 'duo':\n                nextMode = direction === 'forward' ? 'squad' : 'solo';\n                break;\n            case 'squad':\n                nextMode = direction === 'forward' ? 'solo' : 'duo';\n                break;\n            default:\n                break;\n        }\n        this.setState({ mode: nextMode }, () => this.updateURL());\n    };\n\n    handleSort = accessor => () => {\n        const { column, players, direction, mode } = this.state;\n\n        // Reverse order if direction set, else default to desc\n        let sortDirection = direction === 'desc' ? 'asc' : 'desc';\n        let sortedColumn = column;\n\n        // Default to desc order on column switch\n        if (column !== accessor) {\n            // Default to asc order if username column\n            sortDirection = accessor == 'username' ? 'asc' : 'desc';\n            // Set sorted column name\n            sortedColumn = accessor;\n        }\n        // Sort players\n        const sortedPlayers = this.sortPlayers(players, accessor, mode, sortDirection);\n        this.setState(\n            {\n                column: sortedColumn,\n                players: sortedPlayers,\n                direction: sortDirection\n            },\n            () => this.updateURL()\n        );\n    };\n\n    sortPlayers = (players, accessor, mode, direction) => {\n        return accessor == 'username'\n            ? _.orderBy(this.state.players, [o => o.username.toLowerCase()], [direction])\n            : _.orderBy(players, o => o.stats[`${accessor}_${mode}`], [direction]);\n    };\n\n    isPlayerSelected = uid => {\n        const { players } = this.state;\n        return players.find(player => player.uid === uid);\n    };\n\n    updateURL = () => {\n        const { router } = this.props;\n        const { players, mode } = this.state;\n        const usernames = players.map(player => player.username);\n        router.replace({\n            pathname: '/leaderboard',\n            query: { mode: mode, usernames: usernames },\n            options: { shallow: true }\n        });\n    };\n\n    render() {\n        const { columns, mode, players, loading } = this.state;\n\n        return (\n            <Container\n                text\n                textAlign=\"center\"\n                style={{\n                    paddingTop: '100px',\n                    paddingBottom: '100px'\n                    // height: '100%'\n                }}\n            >\n                <Grid centered textAlign=\"center\">\n                    <Grid.Row>\n                        <h3>Leaderboards</h3>\n                    </Grid.Row>\n                    <Grid.Row columns=\"1\">\n                        <Grid.Column\n                            mobile=\"16\"\n                            computer=\"6\"\n                            largeScreen=\"6\"\n                            tablet=\"6\"\n                            widescreen=\"6\"\n                        >\n                            <SearchBar handleResultSelect={this.addPlayer} />\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row className=\"compact\">\n                        <Menu fluid borderless>\n                            <Menu.Item position=\"right\" as=\"a\">\n                                <CopyLinkPopup>\n                                    <span>\n                                        Share <Icon name=\"share\" />\n                                    </span>\n                                </CopyLinkPopup>\n                            </Menu.Item>\n                            <Menu.Item as=\"a\">\n                                <span>\n                                    Refresh <Icon name=\"sync alternate\" />\n                                </span>\n                            </Menu.Item>\n                        </Menu>\n                    </Grid.Row>\n\n                    <Grid.Row>\n                        <Grid.Column textAlign=\"center\">\n                            <Board\n                                columns={columns}\n                                mode={mode}\n                                players={players}\n                                removePlayer={this.removePlayer}\n                                handleModeChange={this.changeMode}\n                                loading={loading}\n                            />\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Container>\n        );\n    }\n}\n\nexport default Leaderboard;\n"]},"metadata":{},"sourceType":"module"}